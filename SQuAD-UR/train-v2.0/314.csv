,data_num,paragraph_num,id,title,context,question,is_impossible,review
0,314,0,57290d3a6aef0514001549f6,سافٹ ویئر_ٹیسٹنگ,چونکہ یہاں تک کہ سادہ سافٹ ویئر اجزاء کے لئے ممکنہ ٹیسٹ کی تعداد عملی طور پر لامحدود ہے ، تمام سافٹ ویئر ٹیسٹنگ دستیاب وقت اور وسائل کے لئے قابل عمل ٹیسٹوں کا انتخاب کرنے کے لئے کچھ حکمت عملی کا استعمال کرتی ہے۔ اس کے نتیجے میں ، سافٹ ویئر ٹیسٹنگ عام طور پر (لیکن خصوصی طور پر نہیں) کسی پروگرام یا ایپلی کیشن کو ••سافٹ ویئر کیڑے تلاش کرنے•• (غلطیاں یا دیگر نقائص) کے ارادے سے چلانے کی کوشش کرتی ہے۔ ٹیسٹنگ کا کام ایک تکرار عمل ہے کیونکہ جب ایک بگ طے ہوتا ہے تو ، یہ دوسرے ، گہرے کیڑے کو روشن کرسکتا ہے ، یا یہاں تک کہ نئے بھی پیدا کرسکتا ہے۔,سافٹ ویئر کی جانچ کا مقصد کیا ہے؟,False,False
1,314,0,57290d3a6aef0514001549f7,سافٹ ویئر_ٹیسٹنگ,چونکہ ممکنہ ••آزمائشوں کی تعداد یہاں تک کہ سادہ سافٹ ویئر اجزاء کے لئے عملی طور پر لامحدود ہے•• ، تمام سافٹ ویئر ٹیسٹنگ دستیاب وقت اور وسائل کے لئے قابل عمل ٹیسٹوں کا انتخاب کرنے کے لئے کچھ حکمت عملی کا استعمال کرتی ہے۔ اس کے نتیجے میں ، سافٹ ویئر ٹیسٹنگ عام طور پر (لیکن خصوصی طور پر نہیں) سافٹ ویئر کی غلطیوں (غلطیاں یا دیگر نقائص) کو تلاش کرنے کے ارادے سے کسی پروگرام یا ایپلی کیشن کو چلانے کی کوشش کرتی ہے۔ ٹیسٹنگ کا کام ایک تکرار عمل ہے کیونکہ جب ایک بگ طے ہوتا ہے تو ، یہ دوسرے ، گہرے بگوں کو روشن کرسکتا ہے ، یا یہاں تک کہ نئے بھی پیدا کرسکتا ہے۔,سافٹ ویئر میں کیڑے تلاش کرنا اتنا مشکل کیوں ہے؟,False,False
2,314,0,57290d3a6aef0514001549f8,سافٹ ویئر_ٹیسٹنگ,چونکہ یہاں تک کہ سادہ سافٹ ویئر اجزاء کے لئے ممکنہ ٹیسٹ کی تعداد عملی طور پر لامحدود ہے ، تمام سافٹ ویئر ٹیسٹنگ دستیاب وقت اور وسائل کے لئے قابل عمل ٹیسٹوں کا انتخاب کرنے کے لئے کچھ حکمت عملی کا استعمال کرتی ہے۔ اس کے نتیجے میں ، سافٹ ویئر ٹیسٹنگ عام طور پر (لیکن خصوصی طور پر نہیں) سافٹ ویئر کی غلطیوں (غلطیاں یا دیگر نقائص) کو تلاش کرنے کے ارادے سے کسی پروگرام یا ایپلی کیشن کو چلانے کی کوشش کرتی ہے۔ ٹیسٹنگ کا کام ایک تکرار عمل ہے جیسے جب ایک بگ طے ہوتا ہے ، ••یہ دوسرے ، گہرے کیڑے کو روشن کرسکتا ہے ،•• یا یہاں تک کہ نئے بھی تشکیل دے سکتا ہے۔,ایک بگ کو ٹھیک کرنے سے کیا حاصل ہو سکتا ہے؟,False,False
3,314,0,5a7b686e21c2de001afe9fdc,سافٹ ویئر_ٹیسٹنگ,چونکہ یہاں تک کہ سادہ سافٹ ویئر اجزاء کے لئے ممکنہ ٹیسٹ کی تعداد ••عملی طور پر لامحدود•• ہے ، تمام سافٹ ویئر ٹیسٹنگ دستیاب وقت اور وسائل کے لئے قابل عمل ٹیسٹوں کا انتخاب کرنے کے لئے کچھ حکمت عملی کا استعمال کرتی ہے۔ اس کے نتیجے میں ، سافٹ ویئر ٹیسٹنگ عام طور پر (لیکن خصوصی طور پر نہیں) سافٹ ویئر کی غلطیوں (غلطیاں یا دیگر نقائص) کو تلاش کرنے کے ارادے سے کسی پروگرام یا ایپلی کیشن کو چلانے کی کوشش کرتی ہے۔ ٹیسٹنگ کا کام ایک تکرار عمل ہے کیونکہ جب ایک بگ طے ہوتا ہے تو ، یہ دوسرے ، گہرے بگوں کو روشن کرسکتا ہے ، یا یہاں تک کہ نئے بھی پیدا کرسکتا ہے۔,پیچیدہ سافٹ ویئر کے اجزاء کے لئے ٹیسٹ کی تعداد کیا ہے؟,True,False
4,314,0,5a7b686e21c2de001afe9fdd,سافٹ ویئر_ٹیسٹنگ,چونکہ یہاں تک کہ سادہ سافٹ ویئر اجزاء کے لئے ممکنہ ٹیسٹ کی تعداد عملی طور پر لامحدود ہے ، تمام سافٹ ویئر ٹیسٹنگ کچھ حکمت عملی کا استعمال کرتی ہے ••وہ ٹیسٹ منتخب کرنے کے لئے جو دستیاب وقت اور وسائل کے لئے قابل عمل ہیں۔•• اس کے نتیجے میں ، سافٹ ویئر ٹیسٹنگ عام طور پر (لیکن خصوصی طور پر نہیں) سافٹ ویئر کی غلطیوں (غلطیاں یا دیگر نقائص) کو تلاش کرنے کے ارادے سے کسی پروگرام یا ایپلی کیشن کو چلانے کی کوشش کرتی ہے۔ ٹیسٹنگ کا کام ایک تکرار عمل ہے کیونکہ جب ایک بگ طے ہوتا ہے تو ، یہ دوسرے ، گہرے کیڑے کو روشن کرسکتا ہے ، یا یہاں تک کہ نئے بھی پیدا کرسکتا ہے۔,فرم ویئر ٹیسٹنگ کیا حاصل کرنے کے لئے حکمت عملی کا استعمال کرتا ہے؟,True,False
5,314,0,5a7b686e21c2de001afe9fde,سافٹ ویئر_ٹیسٹنگ,چونکہ یہاں تک کہ سادہ سافٹ ویئر اجزاء کے لئے ممکنہ ٹیسٹ کی تعداد عملی طور پر لامحدود ہے ، تمام سافٹ ویئر ٹیسٹنگ دستیاب وقت اور وسائل کے لئے قابل عمل ٹیسٹوں کا انتخاب کرنے کے لئے کچھ حکمت عملی کا استعمال کرتی ہے۔ اس کے نتیجے میں ، سافٹ ویئر ٹیسٹنگ عام طور پر (لیکن خصوصی طور پر نہیں) کسی پروگرام یا ایپلی کیشن کو ••سافٹ ویئر کیڑے (غلطیاں یا دیگر نقائص) تلاش کرنے•• کے ارادے سے چلانے کی کوشش کرتی ہے۔ ٹیسٹنگ کا کام ایک تکرار عمل ہے کیونکہ جب ایک بگ طے ہوتا ہے تو ، یہ دوسرے ، گہرے کیڑے کو روشن کرسکتا ہے ، یا یہاں تک کہ نئے بھی پیدا کرسکتا ہے۔,سافٹ ویئر ٹیسٹنگ کس وجہ سے ایک پروگرام کو ختم کرنے کی کوشش کرتا ہے؟,True,False
6,314,0,5a7b686e21c2de001afe9fdf,سافٹ ویئر_ٹیسٹنگ,چونکہ یہاں تک کہ سادہ سافٹ ویئر اجزاء کے لئے ممکنہ ٹیسٹ کی تعداد عملی طور پر لامحدود ہے ، تمام سافٹ ویئر ٹیسٹنگ دستیاب وقت اور وسائل کے لئے قابل عمل ٹیسٹوں کا انتخاب کرنے کے لئے کچھ حکمت عملی کا استعمال کرتی ہے۔ اس کے نتیجے میں ، سافٹ ویئر ٹیسٹنگ عام طور پر (لیکن خصوصی طور پر نہیں) سافٹ ویئر کی غلطیوں (غلطیاں یا دیگر نقائص) کو تلاش کرنے کے ارادے سے کسی پروگرام یا ایپلی کیشن کو چلانے کی کوشش کرتی ہے۔ ٹیسٹنگ کا کام ایک ••تکرار•• عمل ہے کیونکہ جب ایک بگ طے ہوتا ہے تو ، یہ دوسرے ، گہرے کیڑے کو روشن کرسکتا ہے ، یا یہاں تک کہ نئے بھی پیدا کرسکتا ہے۔,جانچنے کے کام کو کس قسم کی ترقی کہا جاتا ہے؟,True,False
7,314,0,5a7b686e21c2de001afe9fe0,سافٹ ویئر_ٹیسٹنگ,چونکہ یہاں تک کہ سادہ سافٹ ویئر اجزاء کے لئے ممکنہ ٹیسٹ کی تعداد عملی طور پر لامحدود ہے ، تمام سافٹ ویئر ٹیسٹنگ دستیاب وقت اور وسائل کے لئے قابل عمل ٹیسٹوں کا انتخاب کرنے کے لئے کچھ حکمت عملی کا استعمال کرتی ہے۔ اس کے نتیجے میں ، سافٹ ویئر ٹیسٹنگ عام طور پر (لیکن خصوصی طور پر نہیں) سافٹ ویئر کی غلطیوں (غلطیاں یا دیگر نقائص) کو تلاش کرنے کے ارادے سے کسی پروگرام یا ایپلی کیشن کو چلانے کی کوشش کرتی ہے۔ ٹیسٹنگ کا کام ایک تکرار عمل ہے جیسے جب ایک بگ طے ہوتا ہے ، ••یہ دوسرے ، گہرے کیڑے کو روشن کرسکتا ہے ، یا یہاں تک کہ نئے بھی پیدا کرسکتا ہے۔••,کیڑے ٹھیک نہ کرنے کی کچھ پیچیدگیاں کیا ہیں؟,True,False
8,314,1,57290ea56aef0514001549fc,سافٹ ویئر_ٹیسٹنگ,اگرچہ جانچ کچھ مخصوص مفروضوں کے مفروضے کے تحت سافٹ ویئر کی درستگی کا تعین کرسکتی ہے (نیچے جانچ کی دشواری کی درجہ بندی دیکھیں) ، جانچ سافٹ ویئر کے اندر ••تمام نقائص•• کی نشاندہی نہیں کرسکتی ہے۔ اس کے بجائے ، یہ ایک تنقید یا موازنہ فراہم کرتا ہے جو مصنوعات کی حالت اور رویے کا موازنہ کرتا ہے - اصول یا میکانزم جس کے ذریعہ کوئی مسئلہ کو پہچان سکتا ہے۔ ان اوریکلوں میں وضاحتیں ، معاہدے ، موازنہ کرنے والی مصنوعات ، ایک ہی مصنوعات کے ماضی کے ورژن ، مطلوبہ یا متوقع مقصد ، صارف یا کسٹمر کی توقعات ، متعلقہ معیارات ، قابل اطلاق قوانین ، یا دیگر معیارات شامل ہوسکتے ہیں۔,ٹیسٹ کیا مکمل طور پر تلاش نہیں کر سکتے ہیں؟,False,False
9,314,1,57290ea56aef0514001549fd,سافٹ ویئر_ٹیسٹنگ,اگرچہ جانچ کچھ مخصوص مفروضوں کے مفروضے کے تحت سافٹ ویئر کی درستگی کا تعین کرسکتی ہے (نیچے جانچ کی دشواری کی درجہ بندی دیکھیں) ، جانچ سافٹ ویئر کے اندر تمام نقائص کی نشاندہی نہیں کرسکتی ہے۔ اس کے بجائے ، یہ ••تنقید یا موازنہ فراہم کرتا ہے•• جو مصنوعات کی حالت اور رویے کا موازنہ کرتا ہے - اصول یا میکانزم جس کے ذریعہ کوئی مسئلہ کو پہچان سکتا ہے۔ ان اوریکلوں میں وضاحتیں ، معاہدے ، موازنہ کرنے والی مصنوعات ، ایک ہی مصنوعات کے ماضی کے ورژن ، مطلوبہ یا متوقع مقصد ، صارف یا کسٹمر کی توقعات ، متعلقہ معیارات ، قابل اطلاق قوانین ، یا دیگر معیارات شامل ہوسکتے ہیں۔,کیڑے کی تلاش کے دوران، ٹیسٹ اور کیا کر سکتے ہیں؟,False,False
10,314,1,57290ea56aef0514001549fe,سافٹ ویئر_ٹیسٹنگ,اگرچہ جانچ کچھ مخصوص مفروضوں کے مفروضے کے تحت سافٹ ویئر کی درستگی کا تعین کرسکتی ہے (نیچے جانچ کی دشواری کی درجہ بندی دیکھیں) ، جانچ سافٹ ویئر کے اندر تمام نقائص کی نشاندہی نہیں کرسکتی ہے۔ اس کے بجائے ، یہ ایک تنقید یا موازنہ فراہم کرتا ہے جو مصنوعات کی حالت اور رویے کا موازنہ کرتا ہے ••اوریکل - اصول یا میکانزم•• جس کے ذریعہ کوئی مسئلہ کو پہچان سکتا ہے۔ ان اوریکل میں وضاحتیں ، معاہدے ، موازنہ کرنے والی مصنوعات ، ایک ہی مصنوعات کے ماضی کے ورژن ، مطلوبہ یا متوقع مقصد ، صارف یا کسٹمر کی توقعات ، متعلقہ معیارات ، قابل اطلاق قوانین ، یا دیگر معیارات شامل ہوسکتے ہیں۔,سافٹ ویئر ٹیسٹنگ کے دوران کس کے ساتھ موازنہ کرتا ہے؟,False,False
11,314,1,57290ea56aef0514001549ff,سافٹ ویئر_ٹیسٹنگ,اگرچہ جانچ کچھ مخصوص مفروضوں کے مفروضے کے تحت سافٹ ویئر کی درستگی کا تعین کرسکتی ہے (نیچے جانچ کی دشواری کی درجہ بندی دیکھیں) ، جانچ سافٹ ویئر کے اندر تمام نقائص کی نشاندہی نہیں کرسکتی ہے۔ اس کے بجائے ، یہ ایک تنقید یا موازنہ فراہم کرتا ہے جو مصنوعات کی حالت اور رویے کا موازنہ کرتا ہے - اصول یا میکانزم جس کے ذریعہ کوئی مسئلہ کو پہچان سکتا ہے۔ ان اوریکلوں میں شامل ہوسکتے ہیں (لیکن ان تک محدود نہیں ہیں) اسی مصنوعات کی ••تفصیلات ، معاہدے ، موازنہ مصنوعات ، ماضی کے ورژن•• ، مطلوبہ یا متوقع مقصد ، صارف یا کسٹمر کی توقعات ، متعلقہ معیارات ، قابل اطلاق قوانین ، یا دیگر معیارات۔,ٹیسٹنگ کے دوران اوریکل کیا بناتا ہے؟,False,False
12,314,1,5a7b6ee021c2de001afea00e,سافٹ ویئر_ٹیسٹنگ,اگرچہ جانچ کچھ مخصوص مفروضوں کے مفروضے کے تحت سافٹ ویئر کی درستگی کا تعین کرسکتی ہے (نیچے جانچ کی دشواری کی درجہ بندی دیکھیں) ، جانچ ••سافٹ ویئر•• کے اندر تمام نقائص کی نشاندہی نہیں کرسکتی ہے۔ اس کے بجائے ، یہ ایک تنقید یا موازنہ فراہم کرتا ہے جو مصنوعات کی حالت اور رویے کا موازنہ کرتا ہے - اصول یا میکانزم جس کے ذریعہ کوئی مسئلہ کو پہچان سکتا ہے۔ ان اوریکلوں میں وضاحتیں ، معاہدے ، موازنہ کرنے والی مصنوعات ، ایک ہی مصنوعات کے ماضی کے ورژن ، مطلوبہ یا متوقع مقصد ، صارف یا کسٹمر کی توقعات ، متعلقہ معیارات ، قابل اطلاق قوانین ، یا دیگر معیارات شامل ہوسکتے ہیں۔,ٹیسٹ کس کے اندر تمام نقائص کی نشاندہی کر سکتا ہے؟,True,False
13,314,1,5a7b6ee021c2de001afea00f,سافٹ ویئر_ٹیسٹنگ,اگرچہ جانچ کچھ مخصوص مفروضوں کے مفروضے کے تحت سافٹ ویئر کی درستگی کا تعین کرسکتی ہے (نیچے جانچ کی دشواری کی درجہ بندی دیکھیں) ، جانچ سافٹ ویئر کے اندر تمام نقائص کی نشاندہی نہیں کرسکتی ہے۔ اس کے بجائے ، یہ ••تنقید یا موازنہ فراہم کرتا ہے•• جو مصنوعات کی حالت اور رویے کا موازنہ کرتا ہے - اصول یا میکانزم جس کے ذریعہ کوئی مسئلہ کو پہچان سکتا ہے۔ ان اوریکلوں میں وضاحتیں ، معاہدے ، موازنہ کرنے والی مصنوعات ، ایک ہی مصنوعات کے ماضی کے ورژن ، مطلوبہ یا متوقع مقصد ، صارف یا کسٹمر کی توقعات ، متعلقہ معیارات ، قابل اطلاق قوانین ، یا دیگر معیارات شامل ہوسکتے ہیں۔,بگ کی تلاش کے دوران، ٹیسٹنگ کیا نہیں کر سکتا؟,True,False
14,314,1,5a7b6ee021c2de001afea010,سافٹ ویئر_ٹیسٹنگ,اگرچہ جانچ کچھ مخصوص مفروضوں کے مفروضے کے تحت سافٹ ویئر کی درستگی کا تعین کر سکتی ہے (نیچے جانچ کی دشواری کی درجہ بندی دیکھیں) ، جانچ سافٹ ویئر کے اندر تمام نقائص کی نشاندہی نہیں کرسکتی ہے۔ اس کے بجائے ، یہ ایک تنقید یا موازنہ فراہم کرتا ہے جو مصنوعات کی حالت اور رویے کا موازنہ کرتا ہے - اصول یا میکانزم جس کے ذریعہ کوئی مسئلہ کو پہچان سکتا ہے۔ ان اوریکلوں میں شامل ہوسکتے ہیں (لیکن ان تک محدود نہیں ہیں) ••تفصیلات ، معاہدے ، موازنہ مصنوعات ، ایک ہی مصنوعات کے ماضی کے ورژن ، مطلوبہ یا متوقع مقصد کے بارے میں استنباط•• ، صارف یا کسٹمر کی توقعات ، متعلقہ معیارات ، قابل اطلاق قوانین ، یا دیگر معیارات۔,اوریکل میں کون سی چیزیں شامل ہیں اور ان تک محدود ہیں؟,True,False
15,314,1,5a7b6ee021c2de001afea011,سافٹ ویئر_ٹیسٹنگ,اگرچہ جانچ کچھ مخصوص مفروضوں کے مفروضے کے تحت سافٹ ویئر کی درستگی کا تعین کرسکتی ہے (نیچے جانچ کی دشواری کی درجہ بندی دیکھیں) ، جانچ سافٹ ویئر کے اندر تمام نقائص کی نشاندہی نہیں کرسکتی ہے۔ اس کے بجائے ، یہ ایک تنقید یا موازنہ فراہم کرتا ہے جو مصنوعات کی حالت اور رویے کا موازنہ کرتا ہے ••اوریکل - اصول یا میکانزم•• جس کے ذریعہ کوئی مسئلہ کو پہچان سکتا ہے۔ ان اوریکل میں وضاحتیں ، معاہدے ، موازنہ کرنے والی مصنوعات ، ایک ہی مصنوعات کے ماضی کے ورژن ، مطلوبہ یا متوقع مقصد ، صارف یا کسٹمر کی توقعات ، متعلقہ معیارات ، قابل اطلاق قوانین ، یا دیگر معیارات شامل ہوسکتے ہیں۔,ٹیسٹنگ کے دوران سافٹ ویئر کس کے خلاف تضاد کرتا ہے؟,True,False
16,314,2,572910176aef051400154a0e,سافٹ ویئر_ٹیسٹنگ,ٹیسٹنگ کا ایک بنیادی مقصد ••سافٹ ویئر کی ناکامیوں کا پتہ لگانا•• ہے تاکہ نقائص کو دریافت اور درست کیا جاسکے۔ ٹیسٹنگ اس بات کا تعین نہیں کرسکتی ہے کہ کوئی مصنوع تمام حالات میں صحیح طریقے سے کام کرتا ہے بلکہ صرف اس بات کا تعین کرسکتا ہے کہ یہ مخصوص حالات میں صحیح طریقے سے کام نہیں کرتا ہے۔ سافٹ ویئر ٹیسٹنگ کے دائرہ کار میں اکثر کوڈ کی جانچ کے ساتھ ساتھ مختلف ماحول اور حالات میں اس کوڈ کی عملدرآمد کے ساتھ ساتھ کوڈ کے پہلوؤں کی جانچ بھی شامل ہوتی ہے۔ کیا یہ وہی کرتا ہے جو اسے کرنا چاہئے اور جو اسے کرنے کی ضرورت ہے۔ سافٹ ویئر ڈویلپمنٹ کی موجودہ ثقافت میں ، ٹیسٹنگ تنظیم ترقیاتی ٹیم سے الگ ہوسکتی ہے۔ ٹیسٹنگ ٹیم کے ممبروں کے لئے مختلف کردار ہیں۔ سافٹ ویئر ٹیسٹنگ سے حاصل کردہ معلومات کو اس عمل کو درست کرنے کے لئے استعمال کیا جاسکتا ہے۔,سافٹ ویئر کی جانچ کے لئے بنیادی وجہ کیا ہے؟,False,False
17,314,2,572910176aef051400154a0f,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹنگ کا ایک بنیادی مقصد سافٹ ویئر کی ناکامیوں کا پتہ لگانا ہے تاکہ نقائص کو دریافت اور درست کیا جاسکے۔ ٹیسٹنگ ••اس بات کا تعین نہیں کر سکتی کہ کوئی مصنوع تمام حالات میں صحیح طریقے سے کام کرتا ہے•• بلکہ صرف یہ ثابت کر سکتی ہے کہ یہ مخصوص حالات میں صحیح طریقے سے کام نہیں کرتا ہے۔ سافٹ ویئر ٹیسٹنگ کے دائرہ کار میں اکثر کوڈ کی جانچ کے ساتھ ساتھ مختلف ماحول اور حالات میں اس کوڈ کی عملدرآمد کے ساتھ ساتھ کوڈ کے پہلوؤں کی جانچ پڑتال بھی شامل ہے۔ کیا یہ وہی کرتا ہے جو اسے کرنا چاہئے اور جو اسے کرنے کی ضرورت ہے۔ سافٹ ویئر ڈویلپمنٹ کی موجودہ ثقافت میں ، ایک ٹیسٹنگ تنظیم ترقیاتی ٹیم سے الگ ہوسکتی ہے۔ ٹیسٹنگ ٹیم کے ممبروں کے لئے مختلف کردار ہیں۔ سافٹ ویئر ٹیسٹنگ سے حاصل کردہ معلومات کو اس عمل کو درست کرنے کے لئے استعمال کیا جاسکتا ہے۔,کیا ٹیسٹنگ سافٹ ویئر مکمل طور پر مکمل طور پر قائم نہیں کر سکتے ہیں؟,False,False
18,314,2,572910176aef051400154a10,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹنگ کا ایک بنیادی مقصد سافٹ ویئر کی ناکامیوں کا پتہ لگانا ہے تاکہ نقائص کو دریافت اور درست کیا جاسکے۔ ٹیسٹنگ اس بات کا تعین نہیں کرسکتی ہے کہ کوئی مصنوع تمام حالات میں صحیح طریقے سے کام کرتا ہے لیکن یہ صرف اس بات کا تعین کرسکتا ہے کہ یہ مخصوص حالات میں صحیح طریقے سے کام نہیں کرتا ہے۔ سافٹ ویئر ٹیسٹنگ کے دائرہ کار میں اکثر ••کوڈ کی جانچ کے ساتھ ساتھ اس کوڈ کی عملدرآمد•• بھی شامل ہوتی ہے۔ مختلف ماحول اور حالات کے ساتھ ساتھ کوڈ کے پہلوؤں کی جانچ پڑتال: کیا یہ وہی کرتا ہے جو اسے کرنا چاہئے اور جو اسے کرنے کی ضرورت ہے۔ سافٹ ویئر ڈویلپمنٹ کی موجودہ ثقافت میں ، ایک ٹیسٹنگ تنظیم ترقیاتی ٹیم سے الگ ہوسکتی ہے۔ ٹیسٹنگ ٹیم کے ممبروں کے لئے مختلف کردار ہیں۔ سافٹ ویئر ٹیسٹنگ سے حاصل کردہ معلومات کو اس عمل کو درست کرنے کے لئے استعمال کیا جاسکتا ہے۔,سافٹ ویئر کی جانچ کے دائرہ کار بھی کیا دیکھتا ہے؟,False,False
19,314,2,572910176aef051400154a11,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹنگ کا ایک بنیادی مقصد سافٹ ویئر کی ناکامیوں کا پتہ لگانا ہے تاکہ نقائص کو دریافت اور درست کیا جاسکے۔ ٹیسٹنگ اس بات کا تعین نہیں کرسکتی ہے کہ کوئی مصنوع تمام حالات میں صحیح طریقے سے کام کرتا ہے لیکن یہ صرف اس بات کا تعین کرسکتا ہے کہ یہ مخصوص حالات میں صحیح طریقے سے کام نہیں کرتا ہے۔ سافٹ ویئر ٹیسٹنگ کے دائرہ کار میں اکثر کوڈ کی جانچ کے ساتھ ساتھ مختلف ماحول اور حالات میں اس کوڈ کی عملدرآمد کے ساتھ ساتھ کوڈ کے پہلوؤں کی جانچ بھی شامل ہوتی ہے۔ کیا یہ وہی کرتا ہے جو اسے کرنا چاہئے اور جو اسے کرنے کی ضرورت ہے۔ سافٹ ویئر ڈویلپمنٹ کی موجودہ ثقافت میں ، ••ٹیسٹنگ آرگنائزیشن ڈویلپمنٹ ٹیم سے الگ ہوسکتی ہے۔•• ٹیسٹنگ ٹیم کے ممبروں کے لئے مختلف کردار ہیں۔ سافٹ ویئر ٹیسٹنگ سے حاصل کردہ معلومات کو اس عمل کو درست کرنے کے لئے استعمال کیا جاسکتا ہے۔,سافٹ ویئر لکھنے اور ٹیسٹنگ کرتے وقت آپ عام طور پر کون سی دو ٹیمیں الگ کرتے ہیں؟,False,False
20,314,2,5a7b724b21c2de001afea016,سافٹ ویئر_ٹیسٹنگ,ٹیسٹنگ کا ایک بنیادی مقصد ••سافٹ ویئر کی ناکامیوں کا پتہ لگانا ہے تاکہ نقائص کو دریافت اور درست کیا جاسکے۔•• ٹیسٹنگ اس بات کا تعین نہیں کرسکتی ہے کہ کوئی مصنوع تمام حالات میں صحیح طریقے سے کام کرتا ہے بلکہ صرف اس بات کا تعین کرسکتا ہے کہ یہ مخصوص حالات میں صحیح طریقے سے کام نہیں کرتا ہے۔ سافٹ ویئر ٹیسٹنگ کے دائرہ کار میں اکثر کوڈ کی جانچ کے ساتھ ساتھ مختلف ماحول اور حالات میں اس کوڈ کی عملدرآمد کے ساتھ ساتھ کوڈ کے پہلوؤں کی جانچ بھی شامل ہوتی ہے۔ کیا یہ وہی کرتا ہے جو اسے کرنا چاہئے اور جو اسے کرنے کی ضرورت ہے۔ سافٹ ویئر ڈویلپمنٹ کی موجودہ ثقافت میں ، ایک ٹیسٹنگ تنظیم ترقیاتی ٹیم سے الگ ہوسکتی ہے۔ ٹیسٹنگ ٹیم کے ممبروں کے لئے مختلف کردار ہیں۔ سافٹ ویئر ٹیسٹنگ سے حاصل کردہ معلومات کو اس عمل کو درست کرنے کے لئے استعمال کیا جاسکتا ہے۔,سافٹ ویئر کی جانچ کا ایک ثانوی مقصد کیا ہے؟,True,False
21,314,2,5a7b724b21c2de001afea017,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹنگ کا ایک بنیادی مقصد سافٹ ویئر کی ناکامیوں کا پتہ لگانا ہے تاکہ نقائص کو دریافت اور درست کیا جاسکے۔ ٹیسٹنگ اس بات کا تعین نہیں کرسکتی ہے کہ کوئی مصنوع تمام حالات میں صحیح طریقے سے کام کرتا ہے بلکہ صرف اس بات کا تعین کرسکتا ہے کہ یہ مخصوص حالات میں صحیح طریقے سے کام نہیں کرتا ہے۔ سافٹ ویئر ٹیسٹنگ کے دائرہ کار میں اکثر ••کوڈ کی جانچ کے ساتھ ساتھ مختلف ماحول اور حالات میں اس کوڈ کی عملدرآمد کے ساتھ ساتھ کوڈ کے پہلوؤں کی جانچ پڑتال•• شامل ہوتی ہے۔ کیا یہ وہی کرتا ہے جو اسے کرنا چاہئے اور جو اسے کرنے کی ضرورت ہے۔ سافٹ ویئر ڈویلپمنٹ کی موجودہ ثقافت میں ، ٹیسٹنگ تنظیم ترقیاتی ٹیم سے الگ ہوسکتی ہے۔ ٹیسٹنگ ٹیم کے ممبروں کے لئے مختلف کردار ہیں۔ سافٹ ویئر ٹیسٹنگ سے حاصل کردہ معلومات کو اس عمل کو درست کرنے کے لئے استعمال کیا جاسکتا ہے۔,سافٹ ویئر ٹیسٹنگ میں ہمیشہ کیا شامل ہوتا ہے؟,True,False
22,314,2,5a7b724b21c2de001afea018,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹنگ کا ایک بنیادی مقصد سافٹ ویئر کی ناکامیوں کا پتہ لگانا ہے تاکہ نقائص کو دریافت اور درست کیا جاسکے۔ ٹیسٹنگ اس بات کا تعین نہیں کرسکتی ہے کہ کوئی مصنوع تمام حالات میں صحیح طریقے سے کام کرتا ہے بلکہ صرف اس بات کا تعین کرسکتا ہے کہ یہ مخصوص حالات میں صحیح طریقے سے کام نہیں کرتا ہے۔ سافٹ ویئر ٹیسٹنگ کے دائرہ کار میں اکثر کوڈ کی جانچ کے ساتھ ساتھ مختلف ماحول اور حالات میں اس کوڈ کی عملدرآمد کے ساتھ ساتھ کوڈ کے پہلوؤں کی جانچ بھی شامل ہوتی ہے۔ کیا یہ وہی کرتا ہے جو اسے کرنا چاہئے اور جو اسے کرنا ضروری ہے۔ سافٹ ویئر ڈویلپمنٹ کی موجودہ ثقافت میں ، ••ٹیسٹنگ تنظیم ترقیاتی ٹیم سے الگ ہوسکتی ہے۔•• ٹیسٹنگ ٹیم کے ممبروں کے لئے مختلف کردار ہیں۔ سافٹ ویئر ٹیسٹنگ سے حاصل کردہ معلومات کو اس عمل کو درست کرنے کے لئے استعمال کیا جاسکتا ہے۔,سافٹ ویئر ڈویلپمنٹ کی سابقہ ثقافت میں، کون سی دو چیزیں الگ تھیں؟,True,False
23,314,2,5a7b724b21c2de001afea019,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹنگ کا ایک بنیادی مقصد سافٹ ویئر کی ناکامیوں کا پتہ لگانا ہے تاکہ نقائص کو دریافت اور درست کیا جاسکے۔ ٹیسٹنگ اس بات کا تعین نہیں کرسکتی ہے کہ کوئی مصنوع تمام حالات میں صحیح طریقے سے کام کرتا ہے بلکہ صرف اس بات کا تعین کرسکتا ہے کہ یہ مخصوص حالات میں صحیح طریقے سے کام نہیں کرتا ہے۔ سافٹ ویئر ٹیسٹنگ کے دائرہ کار میں اکثر کوڈ کی جانچ کے ساتھ ساتھ مختلف ماحول اور حالات میں اس کوڈ کی عملدرآمد کے ساتھ ساتھ کوڈ کے پہلوؤں کی جانچ پڑتال بھی شامل ہوتی ہے۔ کیا یہ وہی کرتا ہے جو اسے کرنا چاہئے اور جو اسے کرنے کی ضرورت ہے۔ سافٹ ویئر ڈویلپمنٹ کی موجودہ ثقافت میں ، ایک ٹیسٹنگ تنظیم ترقیاتی ٹیم سے الگ ہوسکتی ہے۔ ٹیسٹنگ ٹیم کے ممبروں کے لئے مختلف کردار ہیں۔ سافٹ ویئر ٹیسٹنگ سے حاصل کردہ معلومات کو درست کرنے کے لئے استعمال کیا جاسکتا ہے۔,سافٹ ویئر ٹیسٹنگ سے ڈیٹا کیا ماڈل کرنے کے لئے استعمال کیا جا سکتا ہے؟,True,True
24,314,3,572911636aef051400154a20,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر کی غلطیاں مندرجہ ذیل عملوں کے ذریعے ہوتی ہیں۔ ایک ••پروگرامر ایک غلطی کرتا ہے•• (غلطی) ، جس کے نتیجے میں سافٹ ویئر سورس کوڈ میں ایک خرابی (غلطی ، بگ) ہوتی ہے۔ اگر یہ خرابی عمل میں لائی جاتی ہے تو ، بعض حالات میں سسٹم غلط نتائج پیدا کرے گا ، جس کی وجہ سے ناکامی ہوگی۔ تمام نقائص لازمی طور پر ناکامیوں کا سبب نہیں بنیں گے۔ مثال کے طور پر ، مردہ کوڈ میں نقائص کبھی بھی ناکامیوں کا سبب نہیں بنیں گے۔ جب ماحول تبدیل ہوتا ہے تو ایک خرابی ناکامی میں بدل سکتی ہے۔ ماحول میں ان تبدیلیوں کی مثالوں میں سافٹ ویئر کو نئے کمپیوٹر ہارڈ ویئر پلیٹ فارم پر چلانا ، سورس ڈیٹا میں تبدیلیاں ، یا مختلف سافٹ ویئر کے ساتھ بات چیت کرنا شامل ہیں۔ ایک واحد نقض کے نتیجے میں ناکامی کی علامات کی ایک وسیع رینج ہوسکتی ہے۔,پہلا قدم کیا ہے جو سافٹ ویئر کی ناکامی کی طرف جاتا ہے؟,False,False
25,314,3,572911636aef051400154a21,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر کی غلطیاں مندرجہ ذیل عملوں کے ذریعے ہوتی ہیں۔ ایک پروگرامر ایک غلطی (غلطی) کرتا ہے ، جس کے نتیجے میں سافٹ ویئر سورس کوڈ میں ••خامی (غلطی ، بگ) •• ہوتا ہے۔ اگر یہ خرابی عمل میں لائی جاتی ہے تو ، کچھ حالات میں سسٹم غلط نتائج پیدا کرے گا ، جس کی وجہ سے ناکامی ہوگی۔ تمام نقائص لازمی طور پر ناکامیوں کا نتیجہ نہیں ہوگا۔ مثال کے طور پر ، مردہ کوڈ میں نقائص کبھی بھی ناکامیوں کا نتیجہ نہیں ہوگا۔ جب ماحول تبدیل ہوتا ہے تو ایک خرابی ناکامی میں بدل سکتی ہے۔ ماحول میں ان تبدیلیوں کی مثالوں میں سافٹ ویئر کو نئے کمپیوٹر ہارڈ ویئر پلیٹ فارم پر چلانا ، ماخذ ڈیٹا میں تبدیلیاں ، یا مختلف سافٹ ویئر کے ساتھ بات چیت کرنا شامل ہیں۔ ایک واحد نقض کے نتیجے میں ناکامی کی علامات کی ایک وسیع رینج ہوسکتی ہے۔,پروگرامر کی غلطی کا کیا نتیجہ ہوتا ہے؟,False,False
26,314,3,572911636aef051400154a22,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر کی غلطیاں مندرجہ ذیل عملوں کے ذریعے ہوتی ہیں۔ ایک پروگرامر ایک غلطی (غلطی) کرتا ہے ، جس کے نتیجے میں سافٹ ویئر سورس کوڈ میں ایک نقص (غلطی ، بگ) ہوتا ہے۔ اگر یہ نقص انجام دیا جاتا ہے تو ، بعض حالات میں سسٹم غلط نتائج پیدا کرے گا ، جس کی وجہ سے ناکامی ہوگی۔ تمام نقائص لازمی طور پر ناکامیوں کا سبب نہیں بنیں گے۔ مثال کے طور پر ، مردہ کوڈ میں نقائص کبھی بھی ناکامیوں کا سبب نہیں بنیں گے۔ جب ماحول تبدیل ہوتا ہے تو ایک نقص ناکامی میں بدل سکتا ہے۔ ماحول میں ان تبدیلیوں کی مثالوں میں سافٹ ویئر کو ••نئے کمپیوٹر ہارڈ ویئر پلیٹ فارم پر چلانا•• ، ماخذ ڈیٹا میں تبدیلیاں ، یا مختلف سافٹ ویئر کے ساتھ بات چیت کرنا شامل ہیں۔ ایک واحد نقص کے نتیجے میں ناکامی کی علامات کی ایک وسیع رینج ہوسکتی ہے۔,مردہ کوڈ میں سافٹ ویئر کے نقائص کب مسائل پیدا کرسکتے ہیں؟,False,False
27,314,3,5a7b745721c2de001afea026,سافٹ ویئر_ٹیسٹنگ,"سافٹ ویئر کی غلطیاں مندرجہ ذیل عملوں کے ذریعے ہوتی ہیں۔ ""ایک پروگرامر ایک غلطی (غلطی) کرتا ہے ، جس کے نتیجے میں سافٹ ویئر سورس کوڈ میں ایک خرابی (غلطی ، بگ) ہوتی ہے۔ اگر یہ خرابی عمل میں لائی جاتی ہے تو ، بعض حالات میں سسٹم غلط نتائج پیدا کرے گا ، جس کی وجہ سے ناکامی ہوگی۔ تمام نقائص لازمی طور پر ناکامیوں کا سبب نہیں بنیں گے۔ مثال کے طور پر ، مردہ کوڈ میں نقائص کبھی بھی ناکامیوں کا سبب نہیں بنیں گے۔ جب ماحول تبدیل ہوتا ہے تو ایک خرابی ناکامی میں بدل سکتی ہے۔ ماحول میں ان تبدیلیوں کی مثالوں میں سافٹ ویئر کو نئے کمپیوٹر ہارڈ ویئر پلیٹ فارم پر چلانا ، ماخذ ڈیٹا میں تبدیلیاں ، یا مختلف سافٹ ویئر کے ساتھ بات چیت کرنا شامل ہیں۔ ایک واحد نقض کے نتیجے میں ناکامی کی علامات کی ایک وسیع رینج ہوسکتی ہے۔",سافٹ ویئر پروگرام کس عمل کے ذریعے تیار ہوتے ہیں؟,True,True
28,314,3,5a7b745721c2de001afea027,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر کی غلطیاں مندرجہ ذیل عملوں کے ذریعے ہوتی ہیں۔ ایک پروگرامر ایک غلطی (غلطی) کرتا ہے ، جس کے نتیجے میں سافٹ ویئر سورس کوڈ میں ایک نقص (غلطی ، بگ) ہوتا ہے۔ اگر یہ نقص انجام دیا جاتا ہے تو ، بعض حالات میں سسٹم غلط نتائج پیدا کرے گا ، جس کی وجہ سے ناکامی ہوگی۔ تمام نقائص لازمی طور پر ••ناکامیوں•• کا نتیجہ نہیں ہوں گے۔ مثال کے طور پر ، مردہ کوڈ میں نقائص کبھی بھی ناکامیوں کا نتیجہ نہیں ہوگا۔ ماحول تبدیل ہونے پر ایک نقص ناکامی میں تبدیل ہوسکتا ہے۔ ماحول میں ان تبدیلیوں کی مثالوں میں سافٹ ویئر کو نئے کمپیوٹر ہارڈ ویئر پلیٹ فارم پر چلانا ، ماخذ ڈیٹا میں تبدیلیاں ، یا مختلف سافٹ ویئر کے ساتھ بات چیت کرنا شامل ہیں۔ ایک واحد نقص کے نتیجے میں ناکامی کی علامات کی ایک وسیع رینج ہوسکتی ہے۔,تمام نقائص کا نتیجہ کیا ہوتا ہے؟,True,False
29,314,3,5a7b745721c2de001afea028,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر کی غلطیاں مندرجہ ذیل عملوں کے ذریعے ہوتی ہیں۔ ایک پروگرامر ایک غلطی (غلطی) کرتا ہے ، جس کے نتیجے میں سافٹ ویئر سورس کوڈ میں ایک نقص (غلطی ، بگ) ہوتا ہے۔ اگر یہ نقص انجام دیا جاتا ہے تو ، کچھ حالات میں سسٹم غلط نتائج پیدا کرے گا ، جس کی وجہ سے ناکامی ہوگی۔ تمام نقائص لازمی طور پر ناکامیوں کا نتیجہ نہیں ہوگا۔ مثال کے طور پر ، مردہ کوڈ میں نقائص کبھی بھی ••ناکامیوں کا نتیجہ•• نہیں ہوں گے۔ جب ماحول تبدیل ہوتا ہے تو ایک نقص ناکامی میں تبدیل ہوسکتا ہے۔ ماحول میں ان تبدیلیوں کی مثالوں میں سافٹ ویئر کو نئے کمپیوٹر ہارڈ ویئر پلیٹ فارم پر چلانا ، سورس ڈیٹا میں تبدیلیاں ، یا مختلف سافٹ ویئر کے ساتھ بات چیت کرنا شامل ہیں۔ ایک واحد نقص کے نتیجے میں ناکامی کی علامات کی ایک وسیع رینج ہوسکتی ہے۔,مردہ کوڈ میں نقائص ہمیشہ کیا کرتے ہیں؟,True,False
30,314,3,5a7b745721c2de001afea029,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر کی غلطیاں مندرجہ ذیل عملوں کے ذریعے ہوتی ہیں۔ ایک پروگرامر ایک غلطی (غلطی) کرتا ہے ، جس کے نتیجے میں سافٹ ویئر سورس کوڈ میں ایک نقص (غلطی ، بگ) ہوتا ہے۔ اگر یہ نقص انجام دیا جاتا ہے تو ، کچھ حالات میں سسٹم غلط نتائج پیدا کرے گا ، جس کی وجہ سے ناکامی ہوگی۔ تمام نقائص لازمی طور پر ناکامیوں کا سبب نہیں بنیں گے۔ مثال کے طور پر ، مردہ کوڈ میں نقائص کبھی بھی ناکامیوں کا سبب نہیں بنیں گے۔ جب ماحول تبدیل ہوجاتا ہے تو ••ایک نقص•• ناکامی میں تبدیل ہوسکتا ہے۔ ماحول میں ان تبدیلیوں کی مثالوں میں سافٹ ویئر کو نئے کمپیوٹر ہارڈ ویئر پلیٹ فارم پر چلانا ، ماخذ ڈیٹا میں تبدیلیاں ، یا مختلف سافٹ ویئر کے ساتھ بات چیت کرنا شامل ہیں۔ ایک واحد نقص کے نتیجے میں ناکامی کی علامات کی ایک وسیع رینج ہوسکتی ہے۔,جب ماحول بدل جاتا ہے، تو ناکامی کا نتیجہ ہمیشہ کیا ہوتا ہے؟,True,False
31,314,3,5a7b745721c2de001afea02a,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر کی غلطیاں مندرجہ ذیل عملوں کے ذریعے ہوتی ہیں۔ ایک پروگرامر ایک غلطی (غلطی) کرتا ہے ، جس کے نتیجے میں سافٹ ویئر سورس کوڈ میں ایک نقص (غلطی ، بگ) ہوتا ہے۔ اگر یہ نقص انجام دیا جاتا ہے تو ، بعض حالات میں سسٹم غلط نتائج پیدا کرے گا ، جس کی وجہ سے ناکامی ہوگی۔ تمام نقائص لازمی طور پر ناکامیوں کا سبب نہیں بنیں گے۔ مثال کے طور پر ، مردہ کوڈ میں نقائص کبھی بھی ناکامیوں کا سبب نہیں بنیں گے۔ جب ماحول تبدیل ہوتا ہے تو ایک نقص ناکامی میں بدل سکتا ہے۔ ماحول میں ان تبدیلیوں کی مثالوں میں سافٹ ویئر کو نئے کمپیوٹر ہارڈ ویئر پلیٹ فارم پر چلانا ، سورس ڈیٹا میں تبدیلیاں ، یا مختلف سافٹ ویئر کے ساتھ بات چیت کرنا شامل ہیں۔ ایک واحد نقص کے نتیجے میں ••ناکامی کی علامات کی ایک وسیع رینج•• ہوسکتی ہے۔,ایک ہی خرابی کے نتیجے میں کیا نہیں ہو سکتا؟,True,False
32,314,4,5729134aaf94a219006aa031,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹنگ کے ساتھ ایک بنیادی مسئلہ یہ ہے کہ ••ان پٹ اور پیشگی شرائط (ابتدائی حالت) کے تمام مجموعوں کے تحت ٹیسٹنگ ممکن نہیں ہے•• ، یہاں تک کہ ایک سادہ مصنوع کے ساتھ۔:17-18 اس کا مطلب یہ ہے کہ سافٹ ویئر پروڈکٹ میں نقائص کی تعداد بہت بڑی ہوسکتی ہے اور جو نقائص کم ہی ہوتے ہیں انہیں ٹیسٹنگ میں تلاش کرنا مشکل ہوتا ہے۔ زیادہ اہم بات یہ ہے کہ معیار کے غیر فنکشنل طول و عرض (یہ کس طرح ہونا چاہئے اس کے مقابلے میں کیا کرنا چاہئے) - قابل استعمال ، اسکیل ایبلٹی ، کارکردگی ، مطابقت ، قابل اعتماد - انتہائی شخصی ہوسکتے ہیں۔ جو کچھ ایک شخص کے لئے کافی قدر کا حامل ہے وہ دوسرے کے لئے ناقابل برداشت ہوسکتا ہے۔,سافٹ ویئر ٹیسٹنگ چلانے کے ساتھ بنیادی مسئلہ کیا ہے؟,False,False
33,314,4,5729134aaf94a219006aa032,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹنگ کے ساتھ ایک بنیادی مسئلہ یہ ہے کہ ان پٹ اور پیشگی شرائط (ابتدائی حالت) کے تمام مجموعوں کے تحت ٹیسٹنگ ممکن نہیں ہے ، یہاں تک کہ ایک سادہ مصنوع کے ساتھ۔:17-18 اس کا مطلب یہ ہے کہ سافٹ ویئر پروڈکٹ میں نقائص کی تعداد بہت بڑی ہوسکتی ہے اور ••کبھی کبھی پیش آنے والے نقائص•• کو ٹیسٹنگ میں تلاش کرنا مشکل ہے۔ زیادہ اہم بات یہ ہے کہ معیار کے غیر فنکشنل طول و عرض (یہ کس طرح ہونا چاہئے اس کے مقابلے میں کیا کرنا چاہئے) - استعمال ، اسکیل ایبلٹی ، کارکردگی ، مطابقت ، وشوسنییتا ، وشوسنییتا - انتہائی موضوعی ہوسکتے ہیں۔ کچھ جو ایک شخص کے لئے کافی قدر بناتا ہے وہ دوسرے کے لئے ناقابل برداشت ہوسکتا ہے۔,ٹیسٹنگ کے دوران کس قسم کے سافٹ ویئر کیڑے تلاش کرنا مشکل ہے؟,False,False
34,314,4,5729134aaf94a219006aa033,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹنگ کے ساتھ ایک بنیادی مسئلہ یہ ہے کہ ان پٹ اور پیشگی شرائط (ابتدائی حالت) کے تمام مجموعوں کے تحت ٹیسٹنگ ممکن نہیں ہے ، یہاں تک کہ ایک سادہ مصنوع کے ساتھ۔:17-18 اس کا مطلب یہ ہے کہ سافٹ ویئر پروڈکٹ میں نقائص کی تعداد بہت بڑی ہوسکتی ہے اور جو نقائص اکثر ہوتے ہیں وہ ٹیسٹنگ میں تلاش کرنا مشکل ہوتا ہے۔ زیادہ اہم بات یہ ہے کہ معیار کے غیر فنکشنل طول و عرض (یہ کس طرح ہونا چاہئے اس کے مقابلے میں کیا کرنا چاہئے) - ••استعمال ، اسکیل ایبلٹی ، کارکردگی ، مطابقت ، وشوسنییتا•• - انتہائی موضوعی ہوسکتے ہیں۔ کچھ جو ایک شخص کے لئے کافی قدر کا حامل ہے وہ دوسرے کے لئے ناقابل برداشت ہوسکتا ہے۔,کون سے دوسرے غیر فنکشنل طول و عرض سافٹ ویئر کو کم کارکردگی کا مظاہرہ کرنے اور دیگر مسائل کا سبب بن سکتے ہیں؟,False,False
35,314,4,5a7b75f521c2de001afea03a,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹنگ کے ساتھ ایک بنیادی مسئلہ یہ ہے کہ ••ان پٹ اور پیشگی شرائط (ابتدائی حالت) کے تمام مجموعوں کے تحت ٹیسٹنگ ممکن نہیں ہے•• ، یہاں تک کہ ایک سادہ مصنوع کے ساتھ۔:17-18 اس کا مطلب یہ ہے کہ سافٹ ویئر پروڈکٹ میں نقائص کی تعداد بہت بڑی ہوسکتی ہے اور جو نقائص کم ہی ہوتے ہیں انہیں ٹیسٹنگ میں تلاش کرنا مشکل ہوتا ہے۔ زیادہ اہم بات یہ ہے کہ معیار کے غیر فنکشنل طول و عرض (یہ کس طرح ہونا چاہئے اس کے مقابلے میں کیا کرنا چاہئے) - قابل استعمال ، اسکیل ایبلٹی ، کارکردگی ، مطابقت ، قابل اعتماد - انتہائی شخصی ہوسکتے ہیں۔ جو کچھ ایک شخص کے لئے کافی قدر کا حامل ہے وہ دوسرے کے لئے ناقابل برداشت ہوسکتا ہے۔,سافٹ ویئر ٹیسٹنگ چلانے کے ساتھ ثانوی مسئلہ کیا ہے؟,True,False
36,314,4,5a7b75f521c2de001afea03b,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹنگ کے ساتھ ایک بنیادی مسئلہ یہ ہے کہ ان پٹ اور پیشگی شرائط (ابتدائی حالت) کے تمام مجموعوں کے تحت ٹیسٹنگ ممکن نہیں ہے ، یہاں تک کہ ایک سادہ مصنوع کے ساتھ۔:17-18 اس کا مطلب یہ ہے کہ سافٹ ویئر پروڈکٹ میں نقائص کی تعداد بہت بڑی ہوسکتی ہے اور جو نقائص کم ہی ہوتے ہیں وہ ٹیسٹنگ میں ڈھونڈنا ••مشکل•• ہوتا ہے۔ زیادہ اہم بات یہ ہے کہ معیار کے غیر فنکشنل طول و عرض (یہ کس طرح ہونا چاہئے اس کے مقابلے میں کیا کرنا چاہئے) - استعمال ، اسکیل ایبلٹی ، کارکردگی ، مطابقت ، وشوسنییتا - انتہائی شخصی ہوسکتے ہیں۔ کچھ جو ایک شخص کے لئے کافی قدر کا حامل ہے وہ دوسرے کے لئے ناقابل برداشت ہوسکتا ہے۔,اکثر پائے جانے والے نقائص کو تلاش کرنا کتنا آسان ہے؟,True,False
37,314,4,5a7b75f521c2de001afea03c,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹنگ کے ساتھ ایک بنیادی مسئلہ یہ ہے کہ ان پٹ اور پیشگی شرائط (ابتدائی حالت) کے تمام مجموعوں کے تحت ٹیسٹنگ ممکن نہیں ہے ، یہاں تک کہ ایک سادہ مصنوع کے ساتھ۔:17-18 اس کا مطلب یہ ہے کہ سافٹ ویئر پروڈکٹ میں نقائص کی تعداد بہت بڑی ہوسکتی ہے اور جو نقائص اکثر ہوتے ہیں وہ ٹیسٹنگ میں تلاش کرنا مشکل ہوتا ہے۔ زیادہ اہم بات یہ ہے کہ معیار کے غیر فنکشنل طول و عرض (یہ کس طرح ہونا چاہئے اس کے مقابلے میں کیا کرنا چاہئے) - ••استعمال ، اسکیل ایبلٹی ، کارکردگی ، مطابقت ، وشوسنییتا•• - انتہائی موضوعی ہوسکتے ہیں۔ کچھ جو ایک شخص کے لئے کافی قدر کا حامل ہے وہ دوسرے کے لئے ناقابل برداشت ہوسکتا ہے۔,معیار کے فنکشنل طول و عرض کی مثالیں کیا ہیں؟,True,False
38,314,4,5a7b75f521c2de001afea03d,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹنگ کے ساتھ ایک بنیادی مسئلہ یہ ہے کہ ان پٹ اور پیشگی شرائط (ابتدائی حالت) کے تمام مجموعوں کے تحت ٹیسٹنگ ممکن نہیں ہے ، یہاں تک کہ ایک سادہ مصنوع کے ساتھ۔:17-18 اس کا مطلب یہ ہے کہ سافٹ ویئر پروڈکٹ میں نقائص کی تعداد بہت بڑی ہوسکتی ہے اور جو نقائص اکثر ہوتے ہیں وہ ٹیسٹنگ میں تلاش کرنا مشکل ہوتا ہے۔ زیادہ نمایاں طور پر ، معیار کے غیر فنکشنل طول و عرض (یہ کس طرح ہونا چاہئے اس کے مقابلے میں یہ کیا کرنا چاہئے) - استعمال ، اسکیل ایبلٹی ، کارکردگی ، مطابقت ، وشوسنییتا - ••انتہائی شخصی ہوسکتا ہے••۔ کچھ جو ایک شخص کے لئے کافی قدر کا حامل ہے وہ دوسرے کے لئے ناقابل برداشت ہوسکتا ہے۔,معیار کے فنکشنل طول و عرض کے ساتھ مسئلہ کیا ہے؟,True,False
39,314,5,5729141f6aef051400154a3a,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ڈویلپرز ہر چیز کی جانچ نہیں کرسکتے ہیں ، لیکن وہ مطلوبہ کوریج حاصل کرنے کے لئے درکار ٹیسٹوں کی کم سے کم تعداد کی نشاندہی کرنے کے لئے ••کومبیٹوریل ٹیسٹ ڈیزائن کا استعمال•• کرسکتے ہیں۔ کمبیٹوریل ٹیسٹ ڈیزائن صارفین کو کم ٹیسٹ کے ساتھ زیادہ ٹیسٹ کوریج حاصل کرنے کے قابل بناتا ہے۔ چاہے وہ رفتار یا ٹیسٹ کی گہرائی کی تلاش کر رہے ہوں ، وہ اپنے ٹیسٹ کیسز میں منظم تغیرات بنانے کے لئے کمبیٹوریل ٹیسٹ ڈیزائن طریقوں کا استعمال کرسکتے ہیں۔ نوٹ کریں کہ کوریج ، جیسا کہ یہاں استعمال کیا جاتا ہے ، کمبیٹوریل کوریج کا حوالہ دیتا ہے ، نہ کہ ضروریات کی کوریج۔,اگرچہ سافٹ ویئر ڈویلپرز ہر چیز کی جانچ کرنے سے قاصر ہیں ، لیکن وہ جانچ کو کم سے کم رکھنے کے لئے کیا چلاتے ہیں؟,False,False
40,314,5,5729141f6aef051400154a3b,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ڈویلپرز ہر چیز کی جانچ نہیں کرسکتے ہیں ، لیکن وہ مطلوبہ کوریج حاصل کرنے کے لئے درکار ٹیسٹوں کی کم سے کم تعداد کی نشاندہی کرنے کے لئے مجموعہ ٹیسٹ ڈیزائن کا استعمال کرسکتے ہیں۔ مجموعہ ٹیسٹ ڈیزائن صارفین کو ••کم ٹیسٹ کے ساتھ زیادہ ٹیسٹ کوریج حاصل کرنے•• کے قابل بناتا ہے۔ چاہے وہ رفتار یا ٹیسٹ کی گہرائی کی تلاش کر رہے ہوں ، وہ اپنے ٹیسٹ کیسز میں منظم تغیرات بنانے کے لئے مجموعہ ٹیسٹ ڈیزائن طریقوں کا استعمال کرسکتے ہیں۔ نوٹ کریں کہ کوریج ، جیسا کہ یہاں استعمال کیا جاتا ہے ، مجموعہ کوریج کا حوالہ دیتا ہے ، ضروریات کی کوریج نہیں۔,مجموعہ ٹیسٹنگ کا استعمال کیا پر مشتمل ہے؟,False,False
41,314,5,5729141f6aef051400154a3c,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ڈویلپرز ہر چیز کی جانچ نہیں کرسکتے ہیں ، لیکن وہ مطلوبہ کوریج حاصل کرنے کے لئے درکار ٹیسٹوں کی کم سے کم تعداد کی نشاندہی کرنے کے لئے مجموعہ ٹیسٹ ڈیزائن کا استعمال کرسکتے ہیں۔ مجموعہ ٹیسٹ ڈیزائن صارفین کو کم ٹیسٹ کے ساتھ زیادہ ٹیسٹ کوریج حاصل کرنے کے قابل بناتا ہے۔ چاہے وہ ••رفتار یا ٹیسٹ کی گہرائی•• کی تلاش کر رہے ہوں ، وہ اپنے ٹیسٹ کیسز میں منظم تغیرات بنانے کے لئے مجموعہ ٹیسٹ ڈیزائن طریقوں کا استعمال کرسکتے ہیں۔ نوٹ کریں کہ کوریج ، جیسا کہ یہاں استعمال کیا جاتا ہے ، مجموعہ کوریج کا حوالہ دیتا ہے ، ضروریات کی کوریج نہیں۔,کون سی دو قسم کی جانچ یہاں ذکر کے طور پر مجموعہ جانچ کے ساتھ ملوث ہیں؟,False,False
42,314,5,5a7b7a0421c2de001afea052,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ڈویلپرز ہر چیز کی جانچ نہیں کرسکتے ہیں ، لیکن وہ مطلوبہ کوریج حاصل کرنے کے لئے درکار ٹیسٹوں کی کم سے کم تعداد کی نشاندہی کرنے کے لئے ••مشترکہ ٹیسٹ•• ڈیزائن کا استعمال کرسکتے ہیں۔ مشترکہ ٹیسٹ ڈیزائن صارفین کو کم ٹیسٹ کے ساتھ زیادہ ٹیسٹ کوریج حاصل کرنے کے قابل بناتا ہے۔ چاہے وہ رفتار یا ٹیسٹ کی گہرائی کی تلاش کر رہے ہوں ، وہ اپنے ٹیسٹ کیسز میں منظم تغیرات بنانے کے لئے مشترکہ ٹیسٹ ڈیزائن طریقوں کا استعمال کرسکتے ہیں۔ نوٹ کریں کہ کوریج ، جیسا کہ یہاں استعمال کیا جاتا ہے ، مشترکہ کوریج کا حوالہ دیتا ہے ، ضروریات کی کوریج نہیں۔,فرم ویئر ڈویلپرز کس ٹیسٹ کا استعمال کرتے ہیں تاکہ یہ معلوم کیا جاسکے کہ ٹیسٹ کو کم سے کم کیسے رکھا جائے؟,True,False
43,314,5,5a7b7a0421c2de001afea053,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ڈویلپرز ہر چیز کی جانچ نہیں کرسکتے ہیں ، لیکن وہ مطلوبہ کوریج حاصل کرنے کے لئے درکار ٹیسٹوں کی کم سے کم تعداد کی نشاندہی کرنے کے لئے مجموعہ ٹیسٹ ڈیزائن کا استعمال کرسکتے ہیں۔ مجموعہ ٹیسٹ ڈیزائن صارفین کو کم ٹیسٹ کے ساتھ ••زیادہ ٹیسٹ کوریج•• حاصل کرنے کے قابل بناتا ہے۔ چاہے وہ رفتار یا ٹیسٹ کی گہرائی کی تلاش کر رہے ہوں ، وہ اپنے ٹیسٹ کیسز میں منظم تغیرات بنانے کے لئے مجموعہ ٹیسٹ ڈیزائن طریقوں کا استعمال کرسکتے ہیں۔ نوٹ کریں کہ کوریج ، جیسا کہ یہاں استعمال کیا جاتا ہے ، مجموعہ کوریج کا حوالہ دیتا ہے ، ضروریات کی کوریج نہیں۔,مشترکہ ٹیسٹ ڈیزائن صارفین کو کیا حاصل کرنے کی اجازت نہیں دیتا ہے؟,True,False
44,314,5,5a7b7a0421c2de001afea054,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ڈویلپرز ہر چیز کی جانچ نہیں کرسکتے ہیں ، لیکن وہ مطلوبہ کوریج حاصل کرنے کے لئے درکار ٹیسٹوں کی کم سے کم تعداد کی نشاندہی کرنے کے لئے مجموعہ ٹیسٹ ڈیزائن کا استعمال کرسکتے ہیں۔ مجموعہ ٹیسٹ ڈیزائن صارفین کو کم ٹیسٹ کے ساتھ زیادہ ٹیسٹ کوریج حاصل کرنے کے قابل بناتا ہے۔ چاہے وہ رفتار یا ٹیسٹ کی گہرائی کی تلاش کر رہے ہوں ، وہ ••اپنے ٹیسٹ کیسز•• میں منظم تغیرات بنانے کے لئے مجموعہ ٹیسٹ ڈیزائن طریقوں کا استعمال کرسکتے ہیں۔ نوٹ کریں کہ کوریج ، جیسا کہ یہاں استعمال کیا جاتا ہے ، مجموعہ کوریج کا حوالہ دیتا ہے ، ضروریات کی کوریج نہیں۔,غیر منظم تغیرات کس چیز میں تعمیر کیے جا سکتے ہیں؟,True,False
45,314,5,5a7b7a0421c2de001afea055,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ڈویلپرز ہر چیز کی جانچ نہیں کرسکتے ہیں ، لیکن وہ مطلوبہ کوریج حاصل کرنے کے لئے درکار ٹیسٹوں کی کم سے کم تعداد کی نشاندہی کرنے کے لئے مجموعہ ٹیسٹ ڈیزائن کا استعمال کرسکتے ہیں۔ مجموعہ ٹیسٹ ڈیزائن صارفین کو کم ٹیسٹ کے ساتھ زیادہ ٹیسٹ کوریج حاصل کرنے کے قابل بناتا ہے۔ چاہے وہ رفتار یا ٹیسٹ کی گہرائی کی تلاش کر رہے ہوں ، وہ اپنے ٹیسٹ کیسز میں منظم تغیرات بنانے کے لئے مجموعہ ٹیسٹ ڈیزائن طریقوں کا استعمال کرسکتے ہیں۔ نوٹ کریں کہ کوریج ، جیسا کہ یہاں استعمال کیا جاتا ہے ، مجموعہ کوریج کا حوالہ دیتا ہے ، نہ کہ ••ضرورتوں کا احاطہ••۔,"""کوریج"" مشترکہ کوریج کا حوالہ دے رہا ہے لیکن کیا نہیں؟",True,False
46,314,6,572914a26aef051400154a40,سافٹ ویئر_ٹیسٹنگ,عام طور پر یہ خیال کیا جاتا ہے کہ ••جتنا جلدی کوئی خرابی پائی جاتی ہے•• ، اس کو ٹھیک کرنا اتنا ہی سستا ہوتا ہے۔ مندرجہ ذیل جدول میں خرابی کو ٹھیک کرنے کی لاگت اس مرحلے پر منحصر ہے جس میں اسے پایا گیا تھا۔ مثال کے طور پر ، اگر ضروریات میں کوئی مسئلہ صرف ریلیز کے بعد پایا جاتا ہے ، تو اس کی مرمت کے لئے 10 سے 100 گنا زیادہ لاگت آئے گی اگر یہ پہلے ہی ضروریات کے جائزہ کے ذریعہ پایا گیا ہوتا۔ جدید مسلسل تعیناتی کے طریقوں اور کلاؤڈ پر مبنی خدمات کی آمد کے ساتھ ، وقت کے ساتھ ساتھ دوبارہ تعیناتی اور دیکھ بھال کا لاگت کم ہوسکتی ہے۔,ایک بگ کو ٹھیک کرنے کی لاگت کا تعین کیا کرتا ہے؟,False,False
47,314,6,572914a26aef051400154a41,سافٹ ویئر_ٹیسٹنگ,عام طور پر یہ خیال کیا جاتا ہے کہ جتنی جلدی کوئی خرابی پائی جاتی ہے ، اس کو ٹھیک کرنا اتنا ہی سستا ہوتا ہے۔ مندرجہ ذیل جدول میں خرابی کو ٹھیک کرنے کی لاگت اس مرحلے پر منحصر ہے جس میں اسے پایا گیا تھا۔ مثال کے طور پر ، اگر ضروریات میں کوئی مسئلہ صرف ریلیز کے بعد پایا جاتا ہے ، تو اس کی مرمت کے لئے ••10-100 گنا زیادہ•• لاگت آئے گی اگر یہ پہلے ہی ضروریات کے جائزہ کے ذریعہ پایا گیا ہوتا۔ جدید مسلسل تعیناتی کے طریقوں اور کلاؤڈ پر مبنی خدمات کی آمد کے ساتھ ، وقت کے ساتھ ساتھ دوبارہ تعیناتی اور دیکھ بھال کا لاگت کم ہوسکتی ہے۔,اگر سافٹ ویئر کی رہائی کے بعد مسئلہ پایا جاتا ہے تو اس کی قیمت کتنی گنا زیادہ ہوگی؟,False,False
48,314,6,572914a26aef051400154a42,سافٹ ویئر_ٹیسٹنگ,عام طور پر یہ خیال کیا جاتا ہے کہ جتنی جلدی کوئی خرابی پائی جاتی ہے ، اس کو ٹھیک کرنا اتنا ہی سستا ہوتا ہے۔ مندرجہ ذیل جدول میں خرابی کو ٹھیک کرنے کی لاگت اس مرحلے پر منحصر ہے جس میں اسے پایا گیا تھا۔ مثال کے طور پر ، اگر ضروریات میں کوئی مسئلہ صرف ریلیز کے بعد پایا جاتا ہے ، تو اس کی مرمت کے لئے 10 سے 100 گنا زیادہ لاگت آئے گی اگر یہ پہلے ہی ضروریات کے جائزہ کے ذریعہ پایا گیا ہوتا۔ جدید مسلسل تعیناتی کے طریقوں اور ••کلاؤڈ پر مبنی خدمات•• کی آمد کے ساتھ ، وقت کے ساتھ ساتھ دوبارہ تعیناتی اور دیکھ بھال کا لاگت کم ہوسکتی ہے۔,بگ سافٹ ویئر کی مرمت کے اخراجات کو کم کرنے کے لئے کیا ممکن ہے؟,False,False
49,314,6,5a7b7cb021c2de001afea06c,سافٹ ویئر_ٹیسٹنگ,عام طور پر یہ خیال کیا جاتا ہے کہ ••جتنا جلد کوئی خرابی پائی جاتی ہے ، اس کو ٹھیک کرنا اتنا ہی سستا ہوتا ہے۔•• مندرجہ ذیل جدول میں خرابی کو ٹھیک کرنے کی لاگت اس مرحلے پر منحصر ہے جس میں اسے پایا گیا تھا۔ مثال کے طور پر ، اگر ضروریات میں کوئی مسئلہ صرف ریلیز کے بعد پایا جاتا ہے ، تو اس کی مرمت کے لئے 10 سے 100 گنا زیادہ لاگت آئے گی اگر یہ پہلے ہی ضروریات کے جائزہ کے ذریعہ پایا گیا ہوتا۔ جدید مسلسل تعیناتی کے طریقوں اور کلاؤڈ پر مبنی خدمات کی آمد کے ساتھ ، وقت کے ساتھ ساتھ دوبارہ تعیناتی اور دیکھ بھال کا لاگت کم ہوسکتی ہے۔,ایک بگ کو ٹھیک کرنے کی لاگت کے بارے میں غیر مقبول عقیدہ کیا ہے؟,True,False
50,314,6,5a7b7cb021c2de001afea06d,سافٹ ویئر_ٹیسٹنگ,عام طور پر یہ خیال کیا جاتا ہے کہ جتنی جلدی کوئی خرابی پائی جاتی ہے ، اس کو ٹھیک کرنا اتنا ہی سستا ہوتا ہے۔ مندرجہ ذیل جدول میں خرابی کو ٹھیک کرنے کی لاگت ••اس مرحلے پر منحصر ہے جس میں یہ پایا گیا تھا۔•• مثال کے طور پر ، اگر ضروریات میں کوئی مسئلہ صرف ریلیز کے بعد پایا جاتا ہے ، تو اس کی مرمت کے لئے 10 سے 100 گنا زیادہ لاگت آئے گی اگر یہ پہلے ہی ضروریات کے جائزہ کے ذریعہ پایا گیا ہوتا۔ جدید مسلسل تعیناتی کے طریقوں اور کلاؤڈ پر مبنی خدمات کی آمد کے ساتھ ، وقت کے ساتھ ساتھ دوبارہ تعیناتی اور دیکھ بھال کا لاگت کم ہوسکتی ہے۔,ایک خرابی کو ٹھیک کرنے کی لاگت کس چیز پر منحصر نہیں ہے؟,True,False
51,314,6,5a7b7cb021c2de001afea06e,سافٹ ویئر_ٹیسٹنگ,عام طور پر یہ خیال کیا جاتا ہے کہ جتنی جلدی کوئی خرابی پائی جاتی ہے ، اس کو ٹھیک کرنا اتنا ہی سستا ہوتا ہے۔ مندرجہ ذیل جدول میں خرابی کو ٹھیک کرنے کی لاگت اس مرحلے پر منحصر ہے جس میں اسے پایا گیا تھا۔ مثال کے طور پر ، اگر ضروریات میں کوئی مسئلہ صرف ریلیز کے بعد پایا جاتا ہے ، تو اس کی مرمت کے لئے ••10 سے 100 گنا•• زیادہ لاگت آئے گی اگر یہ پہلے ہی ضروریات کے جائزہ کے ذریعہ پایا گیا ہوتا۔ جدید مسلسل تعیناتی کے طریقوں اور کلاؤڈ پر مبنی خدمات کی آمد کے ساتھ ، دوبارہ تعیناتی اور دیکھ بھال کی لاگت وقت کے ساتھ کم ہوسکتی ہے۔,سافٹ ویئر کی رہائی کے بعد پائے جانے والے مسئلے کو ٹھیک کرنے میں کتنا کم لاگت آئے گی؟,True,False
52,314,6,5a7b7cb021c2de001afea06f,سافٹ ویئر_ٹیسٹنگ,عام طور پر یہ خیال کیا جاتا ہے کہ جتنی جلدی کوئی خرابی پائی جاتی ہے ، اس کو ٹھیک کرنا اتنا ہی سستا ہوتا ہے۔ مندرجہ ذیل جدول میں خرابی کو ٹھیک کرنے کی لاگت اس مرحلے پر منحصر ہے جس میں اسے پایا گیا تھا۔ مثال کے طور پر ، اگر ضروریات میں کوئی مسئلہ صرف ریلیز کے بعد پایا جاتا ہے ، تو اس کی مرمت کے لئے 10 سے 100 گنا زیادہ لاگت آئے گی اگر یہ پہلے ہی ضروریات کے جائزہ کے ذریعہ پایا گیا ہوتا۔ ••جدید مسلسل تعیناتی کے طریقوں اور کلاؤڈ پر مبنی خدمات•• کی آمد کے ساتھ ، دوبارہ تعیناتی اور دیکھ بھال کا لاگت وقت کے ساتھ کم ہوسکتی ہے۔,کون سی جدید اشیاء وقت کے ساتھ ساتھ دوبارہ تعیناتی کی لاگت میں اضافہ کر سکتی ہیں؟,True,False
53,314,7,572915f36aef051400154a4e,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹنگ میں بہت سے نقطہ نظر دستیاب ہیں۔ ••جائزہ لینے ، واک تھرو ، یا معائنہ•• کو جامد ٹیسٹنگ کہا جاتا ہے ، جبکہ اصل میں ٹیسٹ کیسز کے ایک دیئے گئے سیٹ کے ساتھ پروگرام شدہ کوڈ پر عملدرآمد کو متحرک ٹیسٹنگ کہا جاتا ہے۔ جامد ٹیسٹنگ اکثر ضمنی ہوتی ہے ، جیسے پروف ریڈنگ ، اس کے علاوہ جب پروگرامنگ ٹولز / ٹیکسٹ ایڈیٹرز سورس کوڈ ڈھانچہ چیک کرتے ہیں یا کمپائلرز (پری کمپائلرز) جامد پروگرام تجزیہ کے طور پر نحو اور ڈیٹا فلو چیک کرتے ہیں۔ متحرک ٹیسٹنگ اس وقت ہوتی ہے جب پروگرام خود چلایا جاتا ہے۔ پروگرام 100٪ مکمل ہونے سے پہلے شروع ہوسکتا ہے تاکہ کوڈ کے مخصوص حصوں کی جانچ کی جاسکے اور اس کو الگ الگ افعال یا ماڈیولز پر لاگو کیا جاسکے۔ اس کے لئے عام تکنیک یا تو اسٹب / ڈرائیور یا ڈیبگر ماحول سے عملدرآمد ہیں۔,سافٹ ویئر ٹیسٹرز اپنے سافٹ ویئر کی جانچ کرتے وقت تین طریقوں کا نام بتائیں؟,False,False
54,314,7,572915f36aef051400154a4f,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹنگ میں بہت سے نقطہ نظر دستیاب ہیں۔ جائزے ، واک تھرو ، یا معائنہ کو جامد ٹیسٹنگ کہا جاتا ہے ، جبکہ اصل میں ٹیسٹ کیسز کے ایک دیئے گئے سیٹ کے ساتھ پروگرام شدہ کوڈ پر عملدرآمد کو ••متحرک ٹیسٹنگ•• کہا جاتا ہے۔ جامد ٹیسٹنگ اکثر ضمنی ہوتی ہے ، جیسے پروف ریڈنگ ، اس کے علاوہ جب پروگرامنگ ٹولز / ٹیکسٹ ایڈیٹرز سورس کوڈ ڈھانچہ چیک کرتے ہیں یا کمپائلرز (پری کمپائلرز) جامد پروگرام تجزیہ کے طور پر نحو اور ڈیٹا فلو چیک کرتے ہیں۔ متحرک ٹیسٹنگ اس وقت ہوتی ہے جب پروگرام خود چلایا جاتا ہے۔ پروگرام 100٪ مکمل ہونے سے پہلے شروع ہوسکتا ہے تاکہ کوڈ کے مخصوص حصوں کی جانچ کی جاسکے اور اسے الگ الگ افعال یا ماڈیولز پر لاگو کیا جاسکے۔ اس کے لئے عام تکنیک یا تو اسٹب / ڈرائیور یا ڈیبگر ماحول سے عملدرآمد ہیں۔,یہ اصطلاح کیا ہے جو ٹیسٹ کے ایک دیئے گئے سیٹ کے ساتھ پروگرام شدہ کوڈ کو انجام دینے کے لئے استعمال کیا جاتا ہے؟,False,False
55,314,7,572915f36aef051400154a50,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹنگ میں بہت سے نقطہ نظر دستیاب ہیں۔ جائزے ، واک تھرو ، یا معائنہ کو جامد ٹیسٹنگ کہا جاتا ہے ، جبکہ اصل میں ٹیسٹ کیسز کے ایک دیئے گئے سیٹ کے ساتھ پروگرام شدہ کوڈ پر عملدرآمد کو متحرک ٹیسٹنگ کہا جاتا ہے۔ جامد ٹیسٹنگ اکثر ضمنی ہوتی ہے ، جیسے پروف ریڈنگ ، اس کے علاوہ جب پروگرامنگ ٹولز / ٹیکسٹ ایڈیٹرز سورس کوڈ ڈھانچے یا کمپائلرز (پری کمپائلرز) کو چیک کرتے ہیں۔ پروگرام کے تجزیہ کے طور پر نحو اور ڈیٹا فلو کی جانچ پڑتال کریں۔ متحرک ٹیسٹنگ اس وقت ہوتی ہے جب پروگرام خود چلایا جاتا ہے۔ متحرک ٹیسٹنگ کوڈ کے مخصوص حصوں کی جانچ کرنے کے لئے ••پروگرام 100٪ مکمل ہونے سے پہلے•• شروع ہوسکتی ہے اور اسے علیحدہ افعال یا ماڈیولز پر لاگو کیا جاتا ہے۔ اس کے لئے عام تکنیک یا تو اسٹب / ڈرائیور یا ڈیبگر ماحول سے عملدرآمد ہیں۔,متحرک ٹیسٹنگ کب ہوسکتی ہے؟,False,False
56,314,7,572915f36aef051400154a51,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹنگ میں بہت سے نقطہ نظر دستیاب ہیں۔ جائزے ، واک تھرو ، یا معائنہ کو جامد ٹیسٹنگ کہا جاتا ہے ، جبکہ اصل میں ٹیسٹ کیسز کے ایک دیئے گئے سیٹ کے ساتھ پروگرام شدہ کوڈ پر عملدرآمد کو متحرک ٹیسٹنگ کہا جاتا ہے۔ جامد ٹیسٹنگ اکثر ضمنی ہوتی ہے ، جیسے پروف ریڈنگ ، اس کے علاوہ جب پروگرامنگ ٹولز / ٹیکسٹ ایڈیٹرز سورس کوڈ ڈھانچہ چیک کرتے ہیں یا کمپائلرز (پری کمپائلرز) جامد پروگرام تجزیہ کے طور پر نحو اور ڈیٹا فلو چیک کرتے ہیں۔ متحرک ٹیسٹنگ اس وقت ہوتی ہے جب پروگرام خود چلایا جاتا ہے۔ متحرک ٹیسٹنگ پروگرام کے 100٪ مکمل ہونے سے پہلے شروع ہوسکتی ہے تاکہ کوڈ کے مخصوص حصوں کی جانچ کی جاسکے اور اس کو الگ تھلگ افعال یا ماڈیولز پر لاگو کیا جاسکے۔ اس کے لئے عام تکنیک یا تو ••سٹب / ڈرائیور یا ڈیبگر ماحول سے عملدرآمد•• کا استعمال کرتے ہیں۔,متحرک ٹیسٹنگ کے دوران عام طور پر استعمال ہونے والی تکنیک کیا ہیں؟,False,False
57,314,7,5a7b7eb421c2de001afea092,سافٹ ویئر_ٹیسٹنگ,••سافٹ ویئر•• ٹیسٹنگ میں بہت سے نقطہ نظر دستیاب ہیں۔ جائزے ، واک تھرو ، یا معائنہ کو جامد ٹیسٹنگ کہا جاتا ہے ، جبکہ اصل میں ٹیسٹ کیسز کے ایک دیئے گئے سیٹ کے ساتھ پروگرام شدہ کوڈ پر عملدرآمد کو متحرک ٹیسٹنگ کہا جاتا ہے۔ جامد ٹیسٹنگ اکثر ضمنی ہوتی ہے ، جیسے پروف ریڈنگ ، اس کے علاوہ جب پروگرامنگ ٹولز / ٹیکسٹ ایڈیٹرز سورس کوڈ ڈھانچہ چیک کرتے ہیں یا کمپائلرز (پری کمپائلرز) جامد پروگرام تجزیہ کے طور پر نحو اور ڈیٹا فلو چیک کرتے ہیں۔ متحرک ٹیسٹنگ اس وقت ہوتی ہے جب پروگرام خود چلایا جاتا ہے۔ پروگرام 100٪ مکمل ہونے سے پہلے شروع ہوسکتا ہے تاکہ کوڈ کے مخصوص حصوں کی جانچ کی جاسکے اور اس کو الگ الگ افعال یا ماڈیولز پر لاگو کیا جاسکے۔ اس کے لئے عام تکنیک یا تو اسٹب / ڈرائیور یا ڈیبگر ماحول سے عملدرآمد ہیں۔,کس قسم کے ٹیسٹ میں چند سے رابطہ کیا جاتا ہے؟,True,False
58,314,7,5a7b7eb421c2de001afea093,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹنگ میں بہت سے نقطہ نظر دستیاب ہیں۔ جائزے ، واک تھرو ، یا ••انسپکشن•• کو جامد ٹیسٹنگ کہا جاتا ہے ، جبکہ اصل میں ٹیسٹ کیسز کے ایک دیئے گئے سیٹ کے ساتھ پروگرام شدہ کوڈ پر عملدرآمد کو متحرک ٹیسٹنگ کہا جاتا ہے۔ جامد ٹیسٹنگ اکثر ضمنی ہوتی ہے ، جیسے پروف ریڈنگ ، اس کے علاوہ جب پروگرامنگ ٹولز / ٹیکسٹ ایڈیٹرز سورس کوڈ ڈھانچہ چیک کرتے ہیں یا کمپائلرز (پری کمپائلرز) جامد پروگرام تجزیہ کے طور پر نحو اور ڈیٹا فلو چیک کرتے ہیں۔ متحرک ٹیسٹنگ اس وقت ہوتی ہے جب پروگرام خود چلایا جاتا ہے۔ متحرک ٹیسٹنگ پروگرام کے 100٪ مکمل ہونے سے پہلے شروع ہوسکتی ہے تاکہ کوڈ کے مخصوص حصوں کی جانچ کی جاسکے اور اسے الگ الگ افعال یا ماڈیولز پر لاگو کیا جاسکے۔ اس کے لئے عام تکنیک یا تو اسٹب / ڈرائیور یا ڈیبگر ماحول سے عملدرآمد ہیں۔,جامد ٹیسٹنگ کی مثالوں میں پیش نظارہ، واک تھرو، اور کیا دوسری شے شامل ہیں؟,True,False
59,314,7,5a7b7eb421c2de001afea094,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹنگ میں بہت سے نقطہ نظر دستیاب ہیں۔ جائزے ، واک تھرو ، یا معائنہ کو جامد ٹیسٹنگ کہا جاتا ہے ، جبکہ اصل میں پروگرام شدہ کوڈ کو ••ٹیسٹ کیسز کے ایک دیئے گئے سیٹ•• کے ساتھ چلانے کو متحرک ٹیسٹنگ کہا جاتا ہے۔ جامد ٹیسٹنگ اکثر ضمنی ہوتی ہے ، جیسے پروف ریڈنگ ، اس کے علاوہ جب پروگرامنگ ٹولز / ٹیکسٹ ایڈیٹرز سورس کوڈ ڈھانچہ چیک کرتے ہیں یا کمپائلرز (پری کمپائلرز) جامد پروگرام تجزیہ کے طور پر نحو اور ڈیٹا فلو چیک کرتے ہیں۔ متحرک ٹیسٹنگ اس وقت ہوتی ہے جب پروگرام خود چلایا جاتا ہے۔ متحرک ٹیسٹنگ پروگرام کے 100٪ مکمل ہونے سے پہلے شروع ہوسکتی ہے تاکہ کوڈ کے مخصوص حصوں کی جانچ کی جاسکے اور اسے الگ الگ افعال یا ماڈیولز پر لاگو کیا جاسکے۔ اس کے لئے عام تکنیک یا تو اسٹب / ڈرائیور یا ڈیبگر ماحول سے عملدرآمد ہیں۔,متحرک ٹیسٹنگ سے مراد پہلے سے طے شدہ کوڈ کو کس کے ساتھ چلانا ہے؟,True,False
60,314,7,5a7b7eb421c2de001afea095,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹنگ میں بہت سے نقطہ نظر دستیاب ہیں۔ جائزے ، واک تھرو ، یا معائنہ کو جامد ٹیسٹنگ کہا جاتا ہے ، جبکہ اصل میں ٹیسٹ کیسز کے ایک دیئے گئے سیٹ کے ساتھ پروگرام شدہ کوڈ پر عملدرآمد کو متحرک ٹیسٹنگ کہا جاتا ہے۔ جامد ٹیسٹنگ اکثر ضمنی ہوتی ہے ، جیسے پروف ریڈنگ ، اس کے علاوہ جب پروگرامنگ ٹولز / ٹیکسٹ ایڈیٹرز سورس کوڈ ڈھانچہ چیک کرتے ہیں یا کمپائلرز (پری کمپائلرز) جامد پروگرام تجزیہ کے طور پر نحو اور ڈیٹا فلو چیک کرتے ہیں۔ متحرک ٹیسٹنگ ••جب پروگرام خود چلایا جاتا ہے•• ہوتی ہے۔ متحرک ٹیسٹنگ پروگرام کے 100٪ مکمل ہونے سے پہلے شروع ہوسکتی ہے تاکہ کوڈ کے مخصوص حصوں کی جانچ کی جاسکے اور اسے الگ الگ افعال یا ماڈیولز پر لاگو کیا جاسکے۔ اس کے لئے عام تکنیک یا تو اسٹب / ڈرائیور یا ڈیبگر ماحول سے عملدرآمد ہیں۔,متحرک ٹیسٹ کب نہیں کیا جاتا ہے؟,True,False
61,314,7,5a7b7eb421c2de001afea096,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹنگ میں بہت سے نقطہ نظر دستیاب ہیں۔ جائزے ، واک تھرو ، یا معائنہ کو جامد ٹیسٹنگ کہا جاتا ہے ، جبکہ اصل میں ٹیسٹ کیسز کے ایک دیئے گئے سیٹ کے ساتھ پروگرام شدہ کوڈ پر عملدرآمد کو متحرک ٹیسٹنگ کہا جاتا ہے۔ جامد ٹیسٹنگ اکثر ••غیر واضح•• ہوتی ہے ، جیسے پروف ریڈنگ ، اس کے علاوہ جب پروگرامنگ ٹولز / ٹیکسٹ ایڈیٹرز سورس کوڈ ڈھانچہ چیک کرتے ہیں یا کمپائلرز (پری کمپائلرز) جامد پروگرام تجزیہ کے طور پر نحو اور ڈیٹا فلو چیک کرتے ہیں۔ متحرک ٹیسٹنگ اس وقت ہوتی ہے جب پروگرام خود چلایا جاتا ہے۔ متحرک ٹیسٹنگ پروگرام کے 100٪ مکمل ہونے سے پہلے شروع ہوسکتی ہے تاکہ کوڈ کے مخصوص حصوں کی جانچ کی جاسکے اور اسے الگ الگ افعال یا ماڈیولز پر لاگو کیا جاسکے۔ اس کے لئے عام تکنیک یا تو اسٹب / ڈرائیور یا ڈیبگر ماحول سے عملدرآمد ہیں۔,جامد ٹیسٹنگ ہمیشہ کیا ہے؟,True,False
62,314,8,5729193baf94a219006aa06f,سافٹ ویئر_ٹیسٹنگ,وائٹ باکس ٹیسٹنگ (جس کو ••کلیئر باکس ٹیسٹنگ•• ، گلاس باکس ٹیسٹنگ ، شفاف باکس ٹیسٹنگ اور ساختی ٹیسٹنگ بھی کہا جاتا ہے ، ماخذ کوڈ کو دیکھ کر) کسی پروگرام کے اندرونی ڈھانچے یا کام کرنے کی جانچ کرتا ہے ، اس کے برعکس اختتامی صارف کو بے نقاب کی گئی فعالیت۔ وائٹ باکس ٹیسٹنگ میں سسٹم کا اندرونی نقطہ نظر ، نیز پروگرامنگ کی مہارتیں ، ٹیسٹ کیسز ڈیزائن کرنے کے لئے استعمال کی جاتی ہیں۔ ٹیسٹر کوڈ کے ذریعے مشق کرنے کے لئے ان پٹ کا انتخاب کرتا ہے اور مناسب آؤٹ پٹ کا تعین کرتا ہے۔ یہ سرکٹ میں نوڈس کی جانچ کے مترادف ہے۔ مثال کے طور پر ان سرکٹ ٹیسٹنگ (آئی سی ٹی) ۔,وائٹ باکس ٹیسٹنگ کے لئے استعمال ہونے والی ایک اور اصطلاح کیا ہے؟,False,False
63,314,8,5729193baf94a219006aa070,سافٹ ویئر_ٹیسٹنگ,وائٹ باکس ٹیسٹنگ (جس کو واضح باکس ٹیسٹنگ ، شیشے کے باکس ٹیسٹنگ ، شفاف باکس ٹیسٹنگ اور ساختی ٹیسٹنگ بھی کہا جاتا ہے ، ••سورس کوڈ دیکھ کر••) کسی پروگرام کے اندرونی ڈھانچے یا کام کرنے کی جانچ کرتا ہے ، اس کے برعکس اختتامی صارف کو بے نقاب ہونے والی فعالیت۔ وائٹ باکس ٹیسٹنگ میں سسٹم کا اندرونی نقطہ نظر ، نیز پروگرامنگ کی مہارتیں ، ٹیسٹ کیسز ڈیزائن کرنے کے لئے استعمال کی جاتی ہیں۔ ٹیسٹر کوڈ کے ذریعے مشق کرنے کے لئے ان پٹ کا انتخاب کرتا ہے اور مناسب آؤٹ پٹ کا تعین کرتا ہے۔ یہ سرکٹ میں نوڈس کی جانچ کے مترادف ہے۔ مثال کے طور پر ان سرکٹ ٹیسٹنگ (آئی سی ٹی) ۔,وائٹ باکس ٹیسٹنگ میں کیا شامل ہے؟,False,False
64,314,8,5729193baf94a219006aa071,سافٹ ویئر_ٹیسٹنگ,وائٹ باکس ٹیسٹنگ (جس کو صاف باکس ٹیسٹنگ ، شیشے کے باکس ٹیسٹنگ ، شفاف باکس ٹیسٹنگ اور ساختی ٹیسٹنگ بھی کہا جاتا ہے ، ماخذ کوڈ کو دیکھ کر) کسی پروگرام کے اندرونی ڈھانچے یا کام کرنے کی جانچ کرتا ہے ، اس کے برعکس اختتامی صارف کو بے نقاب کی گئی فعالیت۔ وائٹ باکس میں ••سسٹم کے اندرونی نقطہ نظر کی جانچ ، نیز پروگرامنگ کی مہارتوں•• کو ٹیسٹ کیسز ڈیزائن کرنے کے لئے استعمال کیا جاتا ہے۔ ٹیسٹر کوڈ کے ذریعے مشق کرنے کے لئے ان پٹ کا انتخاب کرتا ہے اور مناسب آؤٹ پٹ کا تعین کرتا ہے۔ یہ سرکٹ میں نوڈس کی جانچ کے مترادف ہے۔ مثال کے طور پر ان سرکٹ ٹیسٹنگ (آئی سی ٹی) ۔,وائٹ باکس ٹیسٹنگ میں ٹیسٹ کیسز ڈیزائن کرنے کے لئے کون سے دو طریقہ کار استعمال کیے جاتے ہیں؟,False,False
65,314,8,5a7b813621c2de001afea0b8,سافٹ ویئر_ٹیسٹنگ,وائٹ باکس ٹیسٹنگ (جس کو ••کلیئر باکس ٹیسٹنگ ، گلاس باکس ٹیسٹنگ ، شفاف باکس ٹیسٹنگ اور ساختی ٹیسٹنگ•• بھی کہا جاتا ہے ، ماخذ کوڈ کو دیکھ کر) کسی پروگرام کے اندرونی ڈھانچے یا کام کرنے کی جانچ کرتا ہے ، اس کے برعکس اختتامی صارف کو بے نقاب کی گئی فعالیت۔ وائٹ باکس ٹیسٹنگ میں سسٹم کا اندرونی نقطہ نظر ، نیز پروگرامنگ کی مہارتیں ، ٹیسٹ کیسز ڈیزائن کرنے کے لئے استعمال کی جاتی ہیں۔ ٹیسٹر کوڈ کے ذریعے مشق کرنے کے لئے ان پٹ کا انتخاب کرتا ہے اور مناسب آؤٹ پٹ کا تعین کرتا ہے۔ یہ سرکٹ میں نوڈس کی جانچ کے مترادف ہے۔ مثال کے طور پر ان سرکٹ ٹیسٹنگ (آئی سی ٹی) ۔,وائٹ باکس ڈیٹا ٹیسٹنگ کو کس دوسرے نام سے بھی جانا جاتا ہے؟,True,False
66,314,8,5a7b813621c2de001afea0b9,سافٹ ویئر_ٹیسٹنگ,وائٹ باکس ٹیسٹنگ (جس کو صاف باکس ٹیسٹنگ ، شیشے کے باکس ٹیسٹنگ ، شفاف باکس ٹیسٹنگ اور ساختی ٹیسٹنگ بھی کہا جاتا ہے ، ماخذ کوڈ کو دیکھ کر) کسی پروگرام کے اندرونی ڈھانچے یا کام کرنے کی جانچ کرتا ہے ، اس کے برعکس اختتامی صارف کو بے نقاب کی گئی فعالیت۔ وائٹ باکس ٹیسٹنگ میں سسٹم کا اندرونی نقطہ نظر ، نیز ••پروگرامنگ کی مہارت•• کا استعمال ٹیسٹ کیسز ڈیزائن کرنے کے لئے کیا جاتا ہے۔ ٹیسٹر کوڈ کے ذریعے مشق کرنے کے لئے ان پٹ کا انتخاب کرتا ہے اور مناسب آؤٹ پٹ کا تعین کرتا ہے۔ یہ سرکٹ میں نوڈس کی جانچ کے مترادف ہے۔ مثال کے طور پر ان سرکٹ ٹیسٹنگ (آئی سی ٹی) ۔,وائٹ باکس ٹیسٹنگ میں ایک بیرونی نقطہ نظر کا استعمال کیا جاتا ہے اور ساتھ ہی ٹیسٹ کیسز تیار کرنے کے لئے اور کیا استعمال کیا جاتا ہے؟,True,False
67,314,8,5a7b813621c2de001afea0ba,سافٹ ویئر_ٹیسٹنگ,وائٹ باکس ٹیسٹنگ (جس کو صاف باکس ٹیسٹنگ ، شیشے کے باکس ٹیسٹنگ ، شفاف باکس ٹیسٹنگ اور ساختی ٹیسٹنگ بھی کہا جاتا ہے ، ماخذ کوڈ کو دیکھ کر) کسی پروگرام کے اندرونی ڈھانچے یا کام کرنے کی جانچ کرتا ہے ، اس کے برعکس اختتامی صارف کو بے نقاب کی گئی فعالیت۔ وائٹ باکس ٹیسٹنگ میں سسٹم کا اندرونی نقطہ نظر ، نیز پروگرامنگ کی مہارتیں ، ٹیسٹ کیسز ڈیزائن کرنے کے لئے استعمال کی جاتی ہیں۔ ٹیسٹر ان پٹ کا انتخاب کرتا ہے ••کوڈ کے ذریعے راستوں کی مشق کرنے اور مناسب آؤٹ پٹ کا تعین کرنے کے لئے••۔ یہ سرکٹ میں نوڈس کی جانچ کے مترادف ہے۔ مثال کے طور پر سرکٹ میں جانچ (آئی سی ٹی) ۔,ٹیسٹر کیا پورا کرنے کے لئے آؤٹ پٹ کا انتخاب کرتا ہے؟,True,False
68,314,8,5a7b813621c2de001afea0bb,سافٹ ویئر_ٹیسٹنگ,وائٹ باکس ٹیسٹنگ (جس کو صاف باکس ٹیسٹنگ ، شیشے کے باکس ٹیسٹنگ ، شفاف باکس ٹیسٹنگ اور ساختی ٹیسٹنگ بھی کہا جاتا ہے ، ماخذ کوڈ کو دیکھ کر) کسی پروگرام کے اندرونی ڈھانچے یا کام کرنے کی جانچ کرتا ہے ، اس کے برعکس اختتامی صارف کو بے نقاب کی گئی فعالیت۔ وائٹ باکس ٹیسٹنگ میں سسٹم کا اندرونی نقطہ نظر ، نیز پروگرامنگ کی مہارتیں ، ٹیسٹ کیسز ڈیزائن کرنے کے لئے استعمال کی جاتی ہیں۔ ٹیسٹر کوڈ کے ذریعے مشق کرنے کے لئے ان پٹ کا انتخاب کرتا ہے اور مناسب آؤٹ پٹ کا تعین کرتا ہے۔ یہ سرکٹ میں نوڈس کی جانچ کے مترادف ہے۔ مثال کے طور پر ان سرکٹ ٹیسٹنگ (••آئی سی ٹی••).,ان سرکلس ٹیسٹنگ کو کیا بھی کہا جاتا ہے؟,True,False
69,314,9,57291acd3f37b3190047801d,سافٹ ویئر_ٹیسٹنگ,بلیک باکس ٹیسٹنگ سافٹ ویئر کو بلیک باکس کے طور پر علاج کرتی ہے ، اندرونی نفاذ کے کسی علم کے بغیر فعالیت کا معائنہ کرتی ہے ، ••سورس کوڈ کو دیکھے بغیر••۔ ٹیسٹر صرف اس بات سے آگاہ ہیں کہ سافٹ ویئر کو کیا کرنا چاہئے ، نہ کہ یہ کیسے کرتا ہے۔ بلیک باکس ٹیسٹنگ کے طریقوں میں شامل ہیں: مساوات کی تقسیم ، سرحدی قدر کا تجزیہ ، تمام جوڑوں کی جانچ ، ریاست منتقلی کی میزیں ، فیصلہ ٹیبل ٹیسٹنگ ، فزی ٹیسٹنگ ، ماڈل پر مبنی جانچ ، استعمال کیس ٹیسٹنگ ، دریافت ٹیسٹنگ اور وضاحت پر مبنی جانچ۔,بلیک باکس ٹیسٹنگ اور وائٹ باکس ٹیسٹنگ کے درمیان بنیادی فرق کیا ہے؟,False,False
70,314,9,57291acd3f37b3190047801e,سافٹ ویئر_ٹیسٹنگ,بلیک باکس ٹیسٹنگ سافٹ ویئر کو بلیک باکس کے طور پر سمجھتی ہے ، اندرونی نفاذ کے کسی علم کے بغیر ، سورس کوڈ کو دیکھے بغیر فعالیت کا معائنہ کرتی ہے۔ ٹیسٹر صرف ••یہ جانتے ہیں کہ سافٹ ویئر کو کیا کرنا چاہئے•• ، نہ کہ یہ یہ کہ یہ یہ کیسے کرتا ہے۔ بلیک باکس ٹیسٹنگ کے طریقوں میں شامل ہیں: مساوات کی تقسیم ، سرحدی قدر کا تجزیہ ، تمام جوڑے کی جانچ ، ریاست منتقلی کی میزیں ، فیصلہ ٹیبل ٹیسٹنگ ، فزی ٹیسٹنگ ، ماڈل پر مبنی جانچ ، استعمال کیس ٹیسٹنگ ، دریافت ٹیسٹنگ اور وضاحت پر مبنی جانچ۔,سافٹ ویئر ٹیسٹرز کو کیا معلوم ہے؟,False,False
71,314,9,57291acd3f37b3190047801f,سافٹ ویئر_ٹیسٹنگ,بلیک باکس ٹیسٹنگ سافٹ ویئر کو بلیک باکس کے طور پر علاج کرتی ہے ، اندرونی نفاذ کے کسی علم کے بغیر ، سورس کوڈ کو دیکھے بغیر فعالیت کا معائنہ کرتی ہے۔ ٹیسٹر صرف اس بات سے آگاہ ہیں کہ سافٹ ویئر کو کیا کرنا چاہئے ، نہ کہ یہ کیسے کرتا ہے۔ بلیک باکس ٹیسٹنگ کے طریقوں میں شامل ہیں: ••مساوات کی تقسیم ، سرحدی قدر کا تجزیہ•• ، تمام جوڑے کی جانچ ، ریاست منتقلی کی میزیں ، فیصلہ ٹیبل ٹیسٹنگ ، فوز ٹیسٹنگ ، ماڈل پر مبنی جانچ ، استعمال کیس ٹیسٹنگ ، دریافت ٹیسٹنگ اور وضاحت پر مبنی جانچ۔,پہلے تین طریقوں میں سے کون سے ذکر کیے گئے ہیں جو بلیک باکس ٹیسٹنگ تشکیل دیتے ہیں؟,False,False
72,314,9,5a7b825121c2de001afea0d2,سافٹ ویئر_ٹیسٹنگ,بلیک باکس ٹیسٹنگ سافٹ ویئر کو ••بلیک باکس•• کے طور پر سمجھتی ہے ، اندرونی نفاذ کے کسی بھی علم کے بغیر ، سورس کوڈ کو دیکھے بغیر فعالیت کا معائنہ کرتی ہے۔ ٹیسٹر صرف اس بات سے آگاہ ہیں کہ سافٹ ویئر کو کیا کرنا چاہئے ، نہ کہ یہ کیسے کرتا ہے۔ بلیک باکس ٹیسٹنگ کے طریقوں میں شامل ہیں: مساوات کی تقسیم ، سرحدی قدر کا تجزیہ ، تمام جوڑوں کی جانچ ، ریاست منتقلی کی میزیں ، فیصلہ ٹیبل ٹیسٹنگ ، فزی ٹیسٹنگ ، ماڈل پر مبنی جانچ ، استعمال کیس ٹیسٹنگ ، دریافت ٹیسٹنگ اور وضاحت پر مبنی جانچ۔,بلیک باکس ٹیسٹنگ ڈیٹا کو کس طرح علاج کرتی ہے؟,True,False
73,314,9,5a7b825121c2de001afea0d3,سافٹ ویئر_ٹیسٹنگ,بلیک باکس ٹیسٹنگ سافٹ ویئر کو بلیک باکس کے طور پر علاج کرتی ہے ، اندرونی نفاذ کے کسی علم کے بغیر ، سورس کوڈ کو دیکھے بغیر فعالیت کا معائنہ کرتی ہے۔ ٹیسٹر صرف اس بات سے آگاہ ہیں کہ ••سافٹ ویئر کو کیا کرنا چاہئے ، نہ کہ یہ کیسے کرتا ہے۔•• بلیک باکس ٹیسٹنگ کے طریقوں میں شامل ہیں: مساوات کی تقسیم ، سرحدی قدر کا تجزیہ ، تمام جوڑے کی جانچ ، ریاست منتقلی کی میزیں ، فیصلہ ٹیبل ٹیسٹنگ ، فزی ٹیسٹنگ ، ماڈل پر مبنی جانچ ، استعمال کیس ٹیسٹنگ ، دریافت ٹیسٹنگ اور وضاحت پر مبنی جانچ۔,ٹیسٹرز ہمیشہ کس چیز سے آگاہ ہوتے ہیں؟,True,False
74,314,9,5a7b825121c2de001afea0d4,سافٹ ویئر_ٹیسٹنگ,بلیک باکس ٹیسٹنگ سافٹ ویئر کو بلیک باکس کے طور پر علاج کرتی ہے ، اندرونی نفاذ کے کسی علم کے بغیر ، سورس کوڈ کو دیکھے بغیر فعالیت کا معائنہ کرتی ہے۔ ٹیسٹر صرف اس بات سے آگاہ ہیں کہ سافٹ ویئر کو کیا کرنا چاہئے ، نہ کہ یہ کیسے کرتا ہے۔ بلیک باکس ٹیسٹنگ کے طریقوں میں شامل ہیں: ••مساوات کی تقسیم ، سرحدی قدر کا تجزیہ ، تمام جوڑوں کی جانچ ،•• ریاست منتقلی کی میزیں ، فیصلہ ٹیبل ٹیسٹنگ ، فوز ٹیسٹنگ ، ماڈل پر مبنی جانچ ، استعمال کیس ٹیسٹنگ ، دریافت ٹیسٹنگ اور وضاحت پر مبنی جانچ۔,وائٹ باکس ٹیسٹنگ کے پہلے تین طریقے کیا ہیں؟,True,False
75,314,9,5a7b825121c2de001afea0d5,سافٹ ویئر_ٹیسٹنگ,بلیک باکس ٹیسٹنگ سافٹ ویئر کو بلیک باکس کے طور پر علاج کرتی ہے ، اندرونی نفاذ کے کسی بھی علم کے بغیر فعالیت کا معائنہ کرتی ہے ، ••سورس•• کوڈ کو دیکھے بغیر۔ ٹیسٹر صرف اس بات سے آگاہ ہیں کہ سافٹ ویئر کو کیا کرنا چاہئے ، نہ کہ یہ کیسے کرتا ہے۔ بلیک باکس ٹیسٹنگ کے طریقوں میں شامل ہیں: مساوات کی تقسیم ، سرحدی قدر کا تجزیہ ، تمام جوڑے کی جانچ ، ریاست منتقلی کی میزیں ، فیصلہ ٹیبل ٹیسٹنگ ، فزی ٹیسٹنگ ، ماڈل پر مبنی جانچ ، استعمال کیس ٹیسٹنگ ، دریافت ٹیسٹنگ اور وضاحت پر مبنی جانچ۔,بلیک باکس ٹیسٹنگ کس قسم کا کوڈ دیکھنے کے ساتھ کام کرتا ہے؟,True,False
76,314,10,57291e76af94a219006aa0a1,سافٹ ویئر_ٹیسٹنگ,••تفصیل پر مبنی جانچ•• کا مقصد قابل اطلاق ضروریات کے مطابق سافٹ ویئر کی فعالیت کی جانچ کرنا ہے۔ جانچ کی اس سطح کے لئے عام طور پر ٹیسٹر کو مکمل ٹیسٹ کیسز فراہم کرنے کی ضرورت ہوتی ہے ، جو پھر صرف اس بات کی تصدیق کرسکتا ہے کہ کسی دیئے گئے ان پٹ کے لئے ، آؤٹ پٹ ویلیو (یا رویہ) ، یا تو ٹیسٹ کیس میں مخصوص متوقع قدر کے برابر ہے یا نہیں ہے۔ ٹیسٹ کیسز وضاحتیں اور ضروریات کے ارد گرد بنائے جاتے ہیں ، یعنی ، ایپلی کیشن کو کیا کرنا چاہئے۔ یہ ٹیسٹ کیسز حاصل کرنے کے لئے سافٹ ویئر کی بیرونی وضاحتیں ، بشمول وضاحتیں ، ضروریات اور ڈیزائن استعمال کرتا ہے۔ یہ ٹیسٹ ٹیسٹ فنکشنل یا غیر فنکشنل ہوسکتے ہیں۔,ایپلی کیشن کی ضروریات کے مطابق سافٹ ویئر کی فعالیت کی جانچ کے لئے کیا اصطلاح استعمال کی جاتی ہے؟,False,False
77,314,10,57291e76af94a219006aa0a2,سافٹ ویئر_ٹیسٹنگ,تفصیلات پر مبنی ٹیسٹنگ کا مقصد قابل اطلاق ضروریات کے مطابق سافٹ ویئر کی فعالیت کی جانچ کرنا ہے۔ جانچ کی اس سطح کے لئے عام طور پر ٹیسٹر کو مکمل ٹیسٹ کیسز فراہم کرنے کی ضرورت ہوتی ہے ، جو پھر صرف اس بات کی تصدیق کرسکتا ہے کہ کسی دیئے گئے ان پٹ کے لئے ، آؤٹ پٹ ویلیو (یا رویہ) ، یا تو ٹیسٹ کیس میں مخصوص متوقع قدر کے برابر ہے یا نہیں ہے۔ ٹیسٹ کیسز ••تفصیلات اور ضروریات•• کے ارد گرد بنائے جاتے ہیں ، یعنی ، ایپلی کیشن کو کیا کرنا چاہئے۔ یہ ٹیسٹ کیسز حاصل کرنے کے لئے سافٹ ویئر کی بیرونی وضاحتیں ، بشمول وضاحتیں ، ضروریات اور ڈیزائن استعمال کرتا ہے۔ یہ ٹیسٹ ٹیسٹ فنکشنل یا غیر فنکشنل ہوسکتے ہیں۔,ٹیسٹ کیسز کس کے ارد گرد بنائے گئے ہیں؟,False,False
78,314,10,57291e76af94a219006aa0a3,سافٹ ویئر_ٹیسٹنگ,تفصیلات پر مبنی ٹیسٹنگ کا مقصد قابل اطلاق ضروریات کے مطابق سافٹ ویئر کی فعالیت کی جانچ کرنا ہے۔ جانچ کی اس سطح کے لئے عام طور پر ٹیسٹر کو مکمل ٹیسٹ کیسز فراہم کرنے کی ضرورت ہوتی ہے ، جو پھر صرف اس بات کی تصدیق کرسکتا ہے کہ کسی دیئے گئے ان پٹ کے لئے ، آؤٹ پٹ ویلیو (یا رویہ) ، یا تو ٹیسٹ کیس میں مخصوص متوقع قدر کے برابر ہے یا نہیں ہے۔ ٹیسٹ کیسز وضاحتیں اور ضروریات کے ارد گرد بنائے جاتے ہیں ، یعنی ، ایپلی کیشن کو کیا کرنا چاہئے۔ یہ ٹیسٹ کیسز حاصل کرنے کے لئے سافٹ ویئر کی بیرونی وضاحتیں ، بشمول وضاحتیں ، ضروریات اور ڈیزائن استعمال کرتا ہے۔ یہ ٹیسٹ ٹیسٹ فنکشنل یا غیر فنکشنل ہوسکتے ہیں۔,ٹیسٹ کے معاملات کی تعمیر کرتے وقت استعمال ہونے والے دو طریقوں میں سے کون سا دوسرے سے زیادہ عام ہے؟,False,True
79,314,10,5a7b849921c2de001afea0ee,سافٹ ویئر_ٹیسٹنگ,تفصیلات پر مبنی ٹیسٹنگ کا مقصد ••قابل اطلاق ضروریات کے مطابق سافٹ ویئر کی فعالیت•• کی جانچ کرنا ہے۔ جانچ کی اس سطح کے لئے عام طور پر ٹیسٹر کو مکمل ٹیسٹ کیسز فراہم کرنے کی ضرورت ہوتی ہے ، جو پھر صرف اس بات کی تصدیق کرسکتا ہے کہ کسی دیئے گئے ان پٹ کے لئے ، آؤٹ پٹ ویلیو (یا رویہ) ، یا تو ٹیسٹ کیس میں مخصوص متوقع قدر کے برابر ہے یا نہیں ہے۔ ٹیسٹ کیسز وضاحتیں اور ضروریات کے ارد گرد بنائے جاتے ہیں ، یعنی ، ایپلی کیشن کو کیا کرنا چاہئے۔ یہ ٹیسٹ کیسز حاصل کرنے کے لئے سافٹ ویئر کی بیرونی وضاحتیں ، بشمول وضاحتیں ، ضروریات اور ڈیزائن استعمال کرتا ہے۔ یہ ٹیسٹ ٹیسٹ فنکشنل یا غیر فنکشنل ہوسکتے ہیں۔,مہارت پر مبنی ٹیسٹنگ کا مقصد کیا جانچنا ہے؟,True,False
80,314,10,5a7b849921c2de001afea0ef,سافٹ ویئر_ٹیسٹنگ,تفصیلات پر مبنی ٹیسٹنگ کا مقصد قابل اطلاق ضروریات کے مطابق سافٹ ویئر کی فعالیت کی جانچ کرنا ہے۔ جانچ کی اس سطح کے لئے عام طور پر ٹیسٹر کو مکمل ٹیسٹ کیسز فراہم کرنے کی ضرورت ہوتی ہے ، جو پھر صرف اس بات کی تصدیق کرسکتا ہے کہ کسی دیئے گئے ان پٹ کے لئے ، آؤٹ پٹ ویلیو (یا رویہ) ، یا تو ٹیسٹ کیس میں مخصوص متوقع قدر کے برابر ہے یا نہیں ہے۔ ٹیسٹ کیسز وضاحتیں اور ••ضرورتیں•• کے ارد گرد بنائے جاتے ہیں ، یعنی ، ایپلی کیشن کو کیا کرنا چاہئے۔ یہ ٹیسٹ کیسز حاصل کرنے کے لئے سافٹ ویئر کی بیرونی وضاحتیں ، بشمول وضاحتیں ، ضروریات اور ڈیزائن استعمال کرتا ہے۔ یہ ٹیسٹ ٹیسٹ فنکشنل یا غیر فنکشنل ہوسکتے ہیں۔,ٹیسٹ کے مقدمات مہارت کے ارد گرد تعمیر کر رہے ہیں اور کیا اور؟,True,False
81,314,10,5a7b849921c2de001afea0f0,سافٹ ویئر_ٹیسٹنگ,تفصیلات پر مبنی ٹیسٹنگ کا مقصد قابل اطلاق ضروریات کے مطابق سافٹ ویئر کی فعالیت کی جانچ کرنا ہے۔ جانچ کی اس سطح کے لئے عام طور پر ٹیسٹر کو مکمل ٹیسٹ کیسز فراہم کرنے کی ضرورت ہوتی ہے ، جو پھر صرف اس بات کی تصدیق کرسکتا ہے کہ کسی دیئے گئے ان پٹ کے لئے ، آؤٹ پٹ ویلیو (یا رویہ) ، یا تو ٹیسٹ کیس میں مخصوص متوقع قدر کے برابر ہے یا نہیں ہے۔ ٹیسٹ کیسز وضاحتیں اور ضروریات کے ارد گرد بنائے جاتے ہیں ، یعنی ، ایپلی کیشن کو کیا کرنا چاہئے۔ یہ ٹیسٹ کیسز حاصل کرنے کے لئے سافٹ ویئر کی بیرونی وضاحتیں ، بشمول وضاحتیں ، ضروریات اور ڈیزائن استعمال کرتا ہے۔ یہ ٹیسٹ ٹیسٹ فنکشنل یا غیر فنکشنل ہوسکتے ہیں۔,ٹیسٹ کیسز کی تعمیر کے دو طریقوں میں سے، غیر فعال اور غیر فعال، جو زیادہ عام ہے؟,True,True
82,314,10,5a7b849921c2de001afea0f1,سافٹ ویئر_ٹیسٹنگ,تفصیلات پر مبنی ٹیسٹنگ کا مقصد قابل اطلاق ضروریات کے مطابق سافٹ ویئر کی فعالیت کی جانچ کرنا ہے۔ جانچ کی اس سطح کے لئے عام طور پر ٹیسٹر کو مکمل ٹیسٹ کیسز فراہم کرنے کی ضرورت ہوتی ہے ، جو پھر صرف اس بات کی تصدیق کرسکتا ہے کہ کسی دیئے گئے ان پٹ کے لئے ، آؤٹ پٹ ویلیو (یا رویہ) ، یا تو ٹیسٹ کیس میں بیان کردہ متوقع قدر کے برابر ہے یا نہیں ہے۔ ٹیسٹ کیسز وضاحتیں اور ضروریات کے ارد گرد بنائے جاتے ہیں ، یعنی ، ایپلی کیشن کو کیا کرنا چاہئے۔ یہ ٹیسٹ کیسز حاصل کرنے کے لئے سافٹ ویئر کی بیرونی وضاحتیں استعمال کرتا ہے ، بشمول ••تفصیلات ، ضروریات اور ڈیزائن••۔ یہ ٹیسٹ فنکشنل یا غیر فنکشنل ہوسکتے ہیں۔,ٹیسٹ کے معاملات میں فرم ویئر کی کیا وضاحتیں استعمال کی جاتی ہیں؟,True,False
83,314,11,572921606aef051400154a72,سافٹ ویئر_ٹیسٹنگ,بلیک باکس تکنیک کا ایک فائدہ یہ ہے کہ ••کوئی پروگرامنگ علم کی ضرورت نہیں ہے۔•• پروگرامرز کے جو بھی تعصبات ہوسکتے ہیں ، ٹیسٹر کے پاس ممکنہ طور پر ایک مختلف سیٹ ہے اور وہ فعالیت کے مختلف شعبوں پر زور دے سکتا ہے۔ دوسری طرف ، بلیک باکس ٹیسٹنگ کو بغیر ٹارچ لائٹ کے تاریک بھولبلییا میں چلنے کی طرح کہا گیا ہے۔ کیونکہ وہ ماخذ کوڈ کی جانچ نہیں کرتے ہیں ، ایسی صورتحال ہوتی ہے جب ٹیسٹر بہت سے ٹیسٹ کیسز لکھتا ہے تاکہ کسی ایسی چیز کی جانچ پڑتال کی جاسکے جو صرف ایک ٹیسٹ کیس کے ذریعہ جانچ پڑتال کی جاسکتی ہے ، یا پروگرام کے کچھ حصوں کو غیر آزمایا جاتا ہے۔,بلیک باکس کے طریقہ کار کو استعمال کرنے کا ایک بہت بڑا فائدہ کیا ہے؟,False,False
84,314,11,572921606aef051400154a73,سافٹ ویئر_ٹیسٹنگ,بلیک باکس تکنیک کا ایک فائدہ یہ ہے کہ پروگرامنگ کے علم کی ضرورت نہیں ہے۔ پروگرامرز کے جو بھی تعصبات ہوسکتے ہیں ، ٹیسٹر کے پاس ممکنہ طور پر ایک مختلف سیٹ ہے اور وہ فعالیت کے مختلف علاقوں پر زور دے سکتا ہے۔ دوسری طرف ، بلیک باکس ٹیسٹنگ کو ••بغیر ٹارچ لائٹ کے تاریک بھولبلییا میں چلنے کی طرح•• کہا گیا ہے۔ کیونکہ وہ ماخذ کوڈ کی جانچ نہیں کرتے ہیں ، ایسی صورتحال ہوتی ہے جب ٹیسٹر بہت سے ٹیسٹ کیسز لکھتا ہے تاکہ کسی ایسی چیز کی جانچ پڑتال کی جاسکے جو صرف ایک ٹیسٹ کیس کے ذریعہ جانچ پڑتال کی جاسکتی ہے ، یا پروگرام کے کچھ حصوں کو غیر آزمایا جاتا ہے۔,کیا بلیک باکس ٹیسٹنگ کبھی کبھی کوڈ کو دیکھنے کی صلاحیت کے ساتھ حوالہ دیا جا سکتا ہے؟,False,False
85,314,11,572921606aef051400154a74,سافٹ ویئر_ٹیسٹنگ,"بلیک باکس تکنیک کا ایک فائدہ یہ ہے کہ پروگرامنگ کے علم کی ضرورت نہیں ہے۔ پروگرامرز کے جو بھی تعصبات ہوسکتے ہیں ، ""ٹیسٹر کے پاس ممکنہ طور پر ایک مختلف سیٹ ہے اور وہ فعالیت کے مختلف علاقوں پر زور دے سکتا ہے۔ دوسری طرف ، بلیک باکس ٹیسٹنگ کے بارے میں کہا گیا ہے کہ یہ بغیر ٹارچ لائٹ کے تاریک بھولبلییا میں چلنے کی طرح ہے۔ کیونکہ وہ سورس کوڈ کا معائنہ نہیں کرتے ہیں ، ایسی صورتحال ہوتی ہے جب ٹیسٹر بہت سے ٹیسٹ کیسز لکھتا ہے تاکہ کسی ایسی چیز کی جانچ پڑتال کی جاسکے جو صرف ایک ٹیسٹ کیس کے ذریعہ جانچ کی جاسکتی ہے ، یا پروگرام کے کچھ حصوں کو غیر آزمایا جاتا ہے۔",ٹیسٹرز اور ڈویلپرز کو الگ الگ رکھنے کی ایک اچھی وجہ کیا ہے؟,False,True
86,314,11,5a7b885321c2de001afea108,سافٹ ویئر_ٹیسٹنگ,بلیک باکس تکنیک کا ایک فائدہ یہ ہے کہ کوئی ••پروگرامنگ•• علم کی ضرورت نہیں ہے۔ پروگرامرز کے جو بھی تعصبات ہوسکتے ہیں ، ٹیسٹر کے پاس ممکنہ طور پر ایک مختلف سیٹ ہے اور وہ فعالیت کے مختلف علاقوں پر زور دے سکتا ہے۔ دوسری طرف ، بلیک باکس ٹیسٹنگ کو بغیر ٹارچ لائٹ کے تاریک بھولبلییا میں چلنے کی طرح کہا گیا ہے۔ کیونکہ وہ ماخذ کوڈ کا معائنہ نہیں کرتے ہیں ، ایسی صورتحال ہوتی ہے جب ٹیسٹر بہت سے ٹیسٹ کیسز لکھتا ہے تاکہ کسی ایسی چیز کی جانچ پڑتال کی جاسکے جو صرف ایک ٹیسٹ کیس کے ذریعہ جانچ پڑتال کی جاسکتی ہے ، یا پروگرام کے کچھ حصوں کو غیر آزمایا جاتا ہے۔,بلیک باکس تکنیک کے لئے کس طرح کے علم کی ضرورت ہے؟,True,False
87,314,11,5a7b885321c2de001afea109,سافٹ ویئر_ٹیسٹنگ,بلیک باکس تکنیک کا ایک فائدہ یہ ہے کہ پروگرامنگ کے علم کی ضرورت نہیں ہے۔ پروگرامرز کے جو بھی تعصبات ہوسکتے ہیں ، ٹیسٹر کے پاس ممکنہ طور پر ایک مختلف سیٹ ہے اور وہ فعالیت کے مختلف علاقوں پر زور دے سکتا ہے۔ دوسری طرف ، بلیک باکس ٹیسٹنگ کو ••بغیر ٹارچ لائٹ کے تاریک بھولبلییا میں چلنے کی طرح•• کہا گیا ہے۔ کیونکہ وہ ماخذ کوڈ کی جانچ نہیں کرتے ہیں ، ایسی صورتحال ہوتی ہے جب ٹیسٹر بہت سے ٹیسٹ کیسز لکھتا ہے تاکہ کسی ایسی چیز کی جانچ پڑتال کی جاسکے جو صرف ایک ٹیسٹ کیس کے ذریعہ جانچ پڑتال کی جاسکتی ہے ، یا پروگرام کے کچھ حصوں کو غیر آزمایا جاتا ہے۔,بلیک باکس کوڈنگ کا موازنہ کس سے کیا گیا ہے؟,True,False
88,314,11,5a7b885321c2de001afea10a,سافٹ ویئر_ٹیسٹنگ,بلیک باکس تکنیک کا ایک فائدہ یہ ہے کہ کسی پروگرامنگ کے علم کی ضرورت نہیں ہے۔ پروگرامرز کے جو بھی تعصبات ہوسکتے ہیں ، ٹیسٹر کے پاس ممکنہ طور پر ایک مختلف سیٹ ہے اور وہ فعالیت کے مختلف علاقوں پر زور دے سکتا ہے۔ دوسری طرف ، بلیک باکس ٹیسٹنگ کو بغیر ٹارچ لائٹ کے تاریک بھولبلییا میں چلنے کی طرح کہا گیا ہے۔ کیونکہ وہ ••سورس•• کوڈ کی جانچ نہیں کرتے ہیں ، ایسی صورتحال ہوتی ہے جب ٹیسٹر بہت سے ٹیسٹ کیسز لکھتا ہے تاکہ کسی ایسی چیز کی جانچ پڑتال کی جاسکے جو صرف ایک ٹیسٹ کیس کے ذریعہ جانچ پڑتال کی جاسکتی ہے ، یا پروگرام کے کچھ حصوں کو غیر آزمایا جاتا ہے۔,پروگرام کے کچھ حصوں کی جانچ پڑتال نہیں کی جا سکتی کیونکہ کیا قانون کی جانچ پڑتال نہیں کی جاتی ہے؟,True,False
89,314,11,5a7b885321c2de001afea10b,سافٹ ویئر_ٹیسٹنگ,"بلیک باکس تکنیک کا ایک فائدہ یہ ہے کہ پروگرامنگ کے علم کی ضرورت نہیں ہے۔ پروگرامرز کے جو بھی تعصبات ہوسکتے ہیں ، ""ٹیسٹر کے پاس ممکنہ طور پر ایک مختلف سیٹ ہے اور وہ فعالیت کے مختلف علاقوں پر زور دے سکتا ہے۔ دوسری طرف ، بلیک باکس ٹیسٹنگ کے بارے میں کہا گیا ہے کہ یہ بغیر ٹارچ لائٹ کے تاریک بھولبلییا میں چلنے کی طرح ہے۔ کیونکہ وہ سورس کوڈ کا معائنہ نہیں کرتے ہیں ، ایسی صورتحال ہوتی ہے جب ٹیسٹر بہت سے ٹیسٹ کیسز لکھتا ہے تاکہ کسی ایسی چیز کی جانچ پڑتال کی جاسکے جو صرف ایک ٹیسٹ کیس کے ذریعہ جانچ کی جاسکتی ہے ، یا پروگرام کے کچھ حصوں کو غیر آزمایا جاتا ہے۔",ٹیسٹرز اور ڈویلپرز کو کس وجہ سے ایک ساتھ رکھا جاتا ہے؟,True,True
90,314,12,5729223faf94a219006aa0d7,سافٹ ویئر_ٹیسٹنگ,گرے باکس ٹیسٹنگ (امریکی ہجے: گرے باکس ٹیسٹنگ) میں ٹیسٹ ڈیزائن کرنے کے مقاصد کے لئے ••اندرونی ڈیٹا ڈھانچے اور الگورتھم کا علم ہونا•• شامل ہے ، جبکہ ان ٹیسٹوں کو صارف ، یا بلیک باکس کی سطح پر انجام دیا جاتا ہے۔ ٹیسٹر کو سافٹ ویئر کے سورس کوڈ تک مکمل رسائی حاصل کرنے کی ضرورت نہیں ہے۔ ان پٹ ڈیٹا میں ہیرا پھیری اور آؤٹ پٹ کو فارمیٹ کرنا گرے باکس کے طور پر کوالیفائی نہیں کرتا ہے ، کیونکہ ان پٹ اور آؤٹ پٹ واضح طور پر بلیک باکس سے باہر ہیں جسے ہم ٹیسٹ کے تحت سسٹم کہتے ہیں۔ یہ فرق خاص طور پر اہم ہے جب دو مختلف ڈویلپرز کے ذریعہ لکھے گئے کوڈ کے دو ماڈیولز کے مابین انضمام کی جانچ کرتے ہیں۔,گرے باکس ٹیسٹنگ میں کیا شامل ہے؟,False,False
91,314,12,5729223faf94a219006aa0d8,سافٹ ویئر_ٹیسٹنگ,گرے باکس ٹیسٹنگ (امریکی ہجے: گرے باکس ٹیسٹنگ) میں ٹیسٹ ڈیزائن کرنے کے مقاصد کے لئے اندرونی ڈیٹا ڈھانچے اور الگورتھم کا علم ہونا شامل ہے ، جبکہ ان ٹیسٹوں کو صارف ، یا بلیک باکس کی سطح پر انجام دیا جاتا ہے۔ ٹیسٹر کو ••سافٹ ویئر کے سورس کوڈ تک مکمل رسائی حاصل کرنے کی ضرورت نہیں ہے••۔ ان پٹ ڈیٹا میں ہیرا پھیری اور آؤٹ پٹ کو فارمیٹ کرنا گرے باکس کے طور پر کوالیفائی نہیں کرتا ہے ، کیونکہ ان پٹ اور آؤٹ پٹ واضح طور پر بلیک باکس سے باہر ہیں جسے ہم ٹیسٹ کے تحت سسٹم کہتے ہیں۔ یہ فرق خاص طور پر اہم ہے جب دو مختلف ڈویلپرز کے ذریعہ لکھے گئے کوڈ کے دو ماڈیولز کے مابین انضمام کی جانچ کی جاتی ہے۔,ایک سرمئی باکس ٹیسٹر ان کے ٹیسٹ چلانے کے لئے کی ضرورت نہیں ہے کیا؟,False,False
92,314,12,5729223faf94a219006aa0d9,سافٹ ویئر_ٹیسٹنگ,گرے باکس ٹیسٹنگ (امریکی ہجے: گرے باکس ٹیسٹنگ) میں ٹیسٹ ڈیزائن کرنے کے مقاصد کے لئے اندرونی ڈیٹا ڈھانچے اور الگورتھم کا علم ہونا شامل ہے ، جبکہ ان ٹیسٹوں کو صارف ، یا بلیک باکس کی سطح پر انجام دینے کے دوران۔ ٹیسٹر کو سافٹ ویئر کے سورس کوڈ تک مکمل رسائی حاصل کرنے کی ضرورت نہیں ہے۔ [ حوالہ میں نہیں دیا گیا ہے] ••ان پٹ ڈیٹا میں ہیرا پھیری اور آؤٹ پٹ فارمیٹنگ•• گرے باکس کے طور پر کوالیفائی نہیں کرتے ہیں ، کیونکہ ان پٹ اور آؤٹ پٹ واضح طور پر بلیک باکس سے باہر ہیں جسے ہم ٹیسٹ کے تحت سسٹم کہتے ہیں۔ یہ فرق خاص طور پر اہم ہے جب دو مختلف ڈویلپرز کے ذریعہ لکھے گئے کوڈ کے دو ماڈیولز کے مابین انضمام کی جانچ کی جاتی ہے۔,گرے باکس ٹیسٹنگ کے طور پر کیا اہل نہیں ہے؟,False,False
93,314,12,5a7b898021c2de001afea11a,سافٹ ویئر_ٹیسٹنگ,گرے باکس ٹیسٹنگ (امریکی ہجے: گرے باکس ٹیسٹنگ) میں اندرونی ڈیٹا ڈھانچے اور ••ٹیسٹ ڈیزائن کرنے کے مقاصد کے لئے الگورتھم•• کا علم ہونا شامل ہے ، جبکہ ان ٹیسٹوں کو صارف ، یا بلیک باکس کی سطح پر انجام دینے کے دوران۔ ٹیسٹر کو سافٹ ویئر کے سورس کوڈ تک مکمل رسائی حاصل کرنے کی ضرورت نہیں ہے۔ ان پٹ ڈیٹا میں ہیرا پھیری اور آؤٹ پٹ کو فارمیٹ کرنا گرے باکس کے طور پر کوالیفائی نہیں کرتا ہے ، کیونکہ ان پٹ اور آؤٹ پٹ واضح طور پر بلیک باکس سے باہر ہیں جسے ہم ٹیسٹ کے تحت سسٹم کہتے ہیں۔ یہ فرق خاص طور پر اہم ہے جب دو مختلف ڈویلپرز کے ذریعہ لکھے گئے کوڈ کے دو ماڈیولز کے مابین انضمام کی جانچ کرتے ہیں۔,گرے باکس ٹیسٹنگ میں بیرونی ڈیٹا ڈھانچے کا علم ہونا شامل ہے اور اور کیا؟,True,False
94,314,12,5a7b898021c2de001afea11b,سافٹ ویئر_ٹیسٹنگ,گرے باکس ٹیسٹنگ (امریکی ہجے: گرے باکس ٹیسٹنگ) میں ٹیسٹ ڈیزائن کرنے کے مقاصد کے لئے اندرونی ڈیٹا ڈھانچے اور الگورتھم کا علم ہونا شامل ہے ، جبکہ ان ٹیسٹوں کو صارف ، یا بلیک باکس کی سطح پر انجام دینے کے دوران۔ ٹیسٹر کو ••سافٹ ویئر کے سورس کوڈ•• تک مکمل رسائی حاصل کرنے کی ضرورت نہیں ہے۔ ان پٹ ڈیٹا میں ہیرا پھیری اور آؤٹ پٹ کو فارمیٹ کرنا گرے باکس کے طور پر کوالیفائی نہیں کرتا ہے ، کیونکہ ان پٹ اور آؤٹ پٹ واضح طور پر بلیک باکس سے باہر ہیں جسے ہم ٹیسٹ کے تحت سسٹم کہتے ہیں۔ یہ فرق خاص طور پر اہم ہے جب دو مختلف ڈویلپرز کے ذریعہ لکھے گئے کوڈ کے دو ماڈیولز کے مابین انضمام کی جانچ کی جاتی ہے۔,ٹیسٹر کو کس معلومات تک مکمل رسائی حاصل کرنے کی ضرورت ہے؟,True,False
95,314,12,5a7b898021c2de001afea11c,سافٹ ویئر_ٹیسٹنگ,گرے باکس ٹیسٹنگ (امریکی ہجے: گرے باکس ٹیسٹنگ) میں ٹیسٹ ڈیزائن کرنے کے مقاصد کے لئے اندرونی ڈیٹا ڈھانچے اور الگورتھم کا علم ہونا شامل ہے ، جبکہ ان ٹیسٹوں کو صارف ، یا بلیک باکس کی سطح پر انجام دینے کے دوران۔ ٹیسٹر کو سافٹ ویئر کے سورس کوڈ تک مکمل رسائی حاصل کرنے کی ضرورت نہیں ہے۔ ان پٹ ڈیٹا میں ہیرا پھیری کرنا اور آؤٹ پٹ کو فارمیٹ کرنا ••گرے باکس•• کے طور پر کوالیفائی نہیں کرتا ہے ، کیونکہ ان پٹ اور آؤٹ پٹ واضح طور پر بلیک باکس سے باہر ہیں جسے ہم ٹیسٹ کے تحت سسٹم کہتے ہیں۔ یہ فرق خاص طور پر اہم ہے جب دو مختلف ڈویلپرز کے ذریعہ لکھے گئے کوڈ کے دو ماڈیولز کے مابین انضمام کی جانچ کی جاتی ہے۔,ڈیٹا میں ہیرا پھیری کرنا اور ان پٹ کو فارمیٹ کرنا کس کے طور پر کوالیفائی نہیں کرتے؟,True,False
96,314,12,5a7b898021c2de001afea11d,سافٹ ویئر_ٹیسٹنگ,گرے باکس ٹیسٹنگ (امریکی ہجے: گرے باکس ٹیسٹنگ) میں ٹیسٹ ڈیزائن کرنے کے مقاصد کے لئے اندرونی ڈیٹا ڈھانچے اور الگورتھم کا علم ہونا شامل ہے ، جبکہ ان ٹیسٹوں کو صارف ، یا بلیک باکس کی سطح پر انجام دینے کے دوران۔ ٹیسٹر کو سافٹ ویئر کے سورس کوڈ تک مکمل رسائی حاصل کرنے کی ضرورت نہیں ہے۔ ان پٹ ڈیٹا میں ہیرا پھیری اور آؤٹ پٹ کو فارمیٹ کرنا گرے باکس کے طور پر کوالیفائی نہیں کرتا ہے ، کیونکہ ان پٹ اور آؤٹ پٹ واضح طور پر بلیک باکس سے باہر ہیں جسے ہم ٹیسٹ کے تحت سسٹم کہتے ہیں۔ یہ فرق خاص طور پر اہم ہے ••جب دو مختلف ڈویلپرز کے ذریعہ لکھے گئے کوڈ کے دو ماڈیولز کے مابین انضمام کی جانچ کی جاتی ہے ، جہاں صرف انٹرفیس ٹیسٹ کے لئے بے نقاب ہوتے ہیں۔ ••,سیاہ اور سرمئی باکس کے درمیان فرق کب اہم نہیں ہے؟,True,False
97,314,13,5729296d6aef051400154afa,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر کے کام کرنے کے بنیادی تصورات کو جان کر ، ٹیسٹر سافٹ ویئر کو باہر سے جانچنے کے دوران بہتر طور پر باخبر ٹیسٹنگ کے انتخاب کرتا ہے۔ عام طور پر ، گرے باکس ٹیسٹر کو ڈیٹا بیس کو سیڈنگ کرنے جیسی سرگرمیوں کے ساتھ ••ایک الگ تھلگ ٹیسٹنگ ماحول•• قائم کرنے کی اجازت دی جائے گی۔ ٹیسٹر کچھ اقدامات کرنے کے بعد جانچ کی جانے والی مصنوعات کی حالت کا مشاہدہ کرسکتا ہے جیسے ڈیٹا بیس کے خلاف ایس کیو ایل بیانات پر عملدرآمد کرنا اور پھر اس بات کو یقینی بنانے کے لئے سوالات پر عملدرآمد کرنا کہ متوقع تبدیلیوں کی عکاسی کی گئی ہے۔ گرے باکس ٹیسٹنگ محدود معلومات پر مبنی ذہین ٹیسٹنگ منظرناموں کو نافذ کرتی ہے۔ یہ خاص طور پر ڈیٹا ٹائپ ہینڈلنگ ، استثناء ہینڈلنگ ، اور اسی طرح پر لاگو ہوگا۔,ایک عام گرے باکس ٹیسٹر کیا ڈوپ سیٹ اپ کرتا ہے؟,False,False
98,314,13,5729296d6aef051400154afb,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر کے کام کرنے کے بنیادی تصورات کو جان کر ، ٹیسٹر سافٹ ویئر کو باہر سے جانچنے کے دوران بہتر طور پر باخبر ٹیسٹنگ کے انتخاب کرتا ہے۔ عام طور پر ، گرے باکس ٹیسٹر کو ڈیٹا بیس کو سیڈنگ کرنے جیسی سرگرمیوں کے ساتھ الگ تھلگ ٹیسٹنگ ماحول قائم کرنے کی اجازت دی جائے گی۔ ٹیسٹر کچھ اقدامات کرنے کے بعد جانچ کی جانے والی مصنوعات کی حالت کا مشاہدہ کرسکتا ہے جیسے ڈیٹا بیس کے خلاف ••ایس کیو ایل بیانات•• پر عملدرآمد کرنا اور پھر اس بات کو یقینی بنانے کے لئے سوالات پر عملدرآمد کرنا کہ متوقع تبدیلیوں کی عکاسی کی گئی ہے۔ گرے باکس ٹیسٹنگ محدود معلومات پر مبنی ذہین ٹیسٹنگ منظرناموں کو نافذ کرتی ہے۔ یہ خاص طور پر ڈیٹا ٹائپ ہینڈلنگ ، استثناء ہینڈلنگ ، اور اسی طرح پر لاگو ہوگا۔,کچھ اعمال انجام دیتے وقت ٹیسٹر کیا انجام دیتا ہے؟,False,False
99,314,13,5729296d6aef051400154afc,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر کے کام کرنے کے بارے میں بنیادی تصورات کو جان کر ، ٹیسٹر سافٹ ویئر کو باہر سے جانچتے وقت بہتر طور پر باخبر ٹیسٹنگ کے انتخاب کرتا ہے۔ عام طور پر ، گرے باکس ٹیسٹر کو ڈیٹا بیس کو سیڈنگ جیسی سرگرمیوں کے ساتھ الگ تھلگ ٹیسٹنگ ماحول قائم کرنے کی اجازت دی جائے گی۔ ٹیسٹر کچھ اقدامات کرنے کے بعد جانچ کی جانے والی مصنوعات کی حالت کا مشاہدہ کرسکتا ہے جیسے ڈیٹا بیس کے خلاف ایس کیو ایل بیانات پر عملدرآمد کرنا اور پھر اس بات کو یقینی بنانے کے لئے سوالات پر عملدرآمد کرنا کہ متوقع تبدیلیوں کی عکاسی کی گئی ہے۔ گرے باکس ٹیسٹنگ محدود معلومات پر مبنی ••انٹیلجنٹ ٹیسٹنگ منظرنامے•• کو نافذ کرتی ہے۔ یہ خاص طور پر ڈیٹا ٹائپ ہینڈلنگ ، استثناء ہینڈلنگ ، اور اسی طرح پر لاگو ہوگا۔,جب ان کے پاس محدود معلومات ہوتی ہیں تو گرے باکس ٹیسٹر کیا لاگو کرتا ہے؟,False,False
100,314,13,5a7b8a9421c2de001afea122,سافٹ ویئر_ٹیسٹنگ,"سافٹ ویئر کے کام کرنے کے بنیادی تصورات کو جان کر ، ""ٹیسٹر باہر سے سافٹ ویئر کی جانچ کرتے ہوئے بہتر باخبر جانچ کے انتخاب کرتا ہے۔ عام طور پر ، گرے باکس ٹیسٹر کو ڈیٹا بیس کو سیڈنگ کرنے جیسی سرگرمیوں کے ساتھ الگ تھلگ جانچ کا ماحول قائم کرنے کی اجازت دی جائے گی۔ ٹیسٹر کچھ اقدامات کرنے کے بعد جانچ کی جانے والی مصنوعات کی حالت کا مشاہدہ کرسکتا ہے جیسے ڈیٹا بیس کے خلاف ایس کیو ایل بیانات پر عملدرآمد کرنا اور پھر اس بات کو یقینی بنانے کے لئے سوالات پر عملدرآمد کرنا کہ متوقع تبدیلیوں کی عکاسی کی گئی ہے۔ گرے باکس ٹیسٹنگ محدود معلومات پر مبنی ذہین جانچ کے منظرناموں کو نافذ کرتی ہے۔ یہ خاص طور پر ڈیٹا ٹائپ ہینڈلنگ ، استثناء ہینڈلنگ ، اور اسی طرح پر لاگو ہوگا۔",سافٹ ویئر کے کام کرنے کے بارے میں بنیادی تصورات کو جاننے سے ٹیسٹرز کو کس طرح مدد ملتی ہے؟,True,True
101,314,13,5a7b8a9421c2de001afea123,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر کے کام کرنے کے بنیادی تصورات کو جان کر ، ٹیسٹر سافٹ ویئر کو باہر سے جانچنے کے دوران بہتر طور پر باخبر ٹیسٹنگ کے انتخاب کرتا ہے۔ عام طور پر ، گرے باکس ٹیسٹر کو ڈیٹا بیس کو سیڈنگ کرنے جیسی سرگرمیوں کے ساتھ ایک ••عزلی•• ٹیسٹنگ ماحول قائم کرنے کی اجازت دی جائے گی۔ ٹیسٹر کچھ اقدامات کرنے کے بعد جانچ کی جانے والی مصنوعات کی حالت کا مشاہدہ کرسکتا ہے جیسے ڈیٹا بیس کے خلاف ایس کیو ایل بیانات پر عملدرآمد کرنا اور پھر اس بات کو یقینی بنانے کے لئے سوالات پر عملدرآمد کرنا کہ متوقع تبدیلیوں کی عکاسی کی گئی ہے۔ گرے باکس ٹیسٹنگ محدود معلومات پر مبنی ذہین ٹیسٹنگ منظرناموں کو نافذ کرتی ہے۔ یہ خاص طور پر ڈیٹا ٹائپ ہینڈلنگ ، استثناء ہینڈلنگ ، اور اسی طرح پر لاگو ہوگا۔,ایک بلیک باکس ٹیسٹر عام طور پر کس قسم کے ٹیسٹنگ ماحول کو قائم کرنے کے قابل ہو جائے گا؟,True,False
102,314,13,5a7b8a9421c2de001afea124,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر کے کام کرنے کے بنیادی تصورات کو جان کر ، ٹیسٹر سافٹ ویئر کو باہر سے جانچنے کے دوران بہتر طور پر باخبر ٹیسٹنگ کے انتخاب کرتا ہے۔ عام طور پر ، گرے باکس ٹیسٹر کو ڈیٹا بیس کو سیڈنگ کرنے جیسی سرگرمیوں کے ساتھ الگ تھلگ ٹیسٹنگ ماحول قائم کرنے کی اجازت دی جائے گی۔ ٹیسٹر کچھ اقدامات کرنے کے بعد جانچ کی جانے والی مصنوعات کی حالت کا مشاہدہ کرسکتا ہے جیسے ڈیٹا بیس کے خلاف ••ایس کیو ایل بیانات•• پر عملدرآمد کرنا اور پھر اس بات کو یقینی بنانے کے لئے سوالات پر عملدرآمد کرنا کہ متوقع تبدیلیوں کی عکاسی کی گئی ہے۔ گرے باکس ٹیسٹنگ محدود معلومات پر مبنی ذہین ٹیسٹنگ منظرناموں کو نافذ کرتی ہے۔ یہ خاص طور پر ڈیٹا ٹائپ ہینڈلنگ ، استثناء ہینڈلنگ ، اور اسی طرح پر لاگو ہوگا۔,کچھ سوالات preforming جبکہ ٹیسٹر کیا عملدرآمد کرتا ہے؟,True,False
103,314,13,5a7b8a9421c2de001afea125,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر کے کام کرنے کے بارے میں بنیادی تصورات کو جان کر ، ٹیسٹر سافٹ ویئر کو باہر سے جانچتے وقت بہتر طور پر باخبر ٹیسٹنگ کے انتخاب کرتا ہے۔ عام طور پر ، گرے باکس ٹیسٹر کو ڈیٹا بیس کو سیڈنگ جیسی سرگرمیوں کے ساتھ الگ تھلگ ٹیسٹنگ ماحول قائم کرنے کی اجازت دی جائے گی۔ ٹیسٹر کچھ اقدامات کرنے کے بعد جانچ کی جانے والی مصنوعات کی حالت کا مشاہدہ کرسکتا ہے جیسے ڈیٹا بیس کے خلاف ایس کیو ایل بیانات پر عملدرآمد کرنا اور پھر اس بات کو یقینی بنانے کے لئے سوالات پر عملدرآمد کرنا کہ متوقع تبدیلیوں کی عکاسی کی گئی ہے۔ گرے باکس ٹیسٹنگ محدود معلومات پر مبنی ••انٹیلجنٹ ٹیسٹنگ منظرنامے•• کو نافذ کرتی ہے۔ یہ خاص طور پر ڈیٹا ٹائپ ہینڈلنگ ، استثناء ہینڈلنگ ، اور اسی طرح پر لاگو ہوگا۔,طویل معلومات کی بنیاد پر، گرے باکس ٹیسٹنگ کیا لاگو کرتا ہے؟,True,False
104,314,14,57292a631d04691400779105,سافٹ ویئر_ٹیسٹنگ,عام طور پر ٹیسٹ کی چار تسلیم شدہ سطحیں ہیں: ••یونٹ ٹیسٹنگ ، انٹیگریشن ٹیسٹنگ ، جزو انٹرفیس ٹیسٹنگ ، اور سسٹم ٹیسٹنگ••۔ ٹیسٹ کو اکثر اس کے مطابق گروپ کیا جاتا ہے کہ وہ سافٹ ویئر ڈویلپمنٹ کے عمل میں کہاں شامل کیے جاتے ہیں ، یا ٹیسٹ کی مخصوصیت کی سطح کے مطابق۔ ترقی کے عمل کے دوران اہم سطحیں جیسا کہ SWEBOK گائیڈ کے ذریعہ بیان کیا گیا ہے یونٹ ، انٹیگریشن ، اور سسٹم ٹیسٹنگ ہیں جو ٹیسٹ کے ہدف کے ذریعہ ممتاز ہیں بغیر کسی مخصوص عمل کے ماڈل کا مطلب ہے۔ دیگر ٹیسٹ کی سطحوں کو جانچ کے مقصد کے ذریعہ درجہ بندی کیا جاتا ہے۔,سافٹ ویئر کی جانچ کی چار تسلیم شدہ سطحیں کیا ہیں؟,False,False
105,314,14,57292a631d04691400779106,سافٹ ویئر_ٹیسٹنگ,عام طور پر ٹیسٹ کی چار تسلیم شدہ سطحیں ہیں: یونٹ ٹیسٹنگ ، انضمام ٹیسٹنگ ، جزو انٹرفیس ٹیسٹنگ ، اور سسٹم ٹیسٹنگ۔ ٹیسٹ کو اکثر اس کے مطابق گروپ کیا جاتا ہے کہ وہ ••سافٹ ویئر ڈویلپمنٹ پروسیس ، یا ٹیسٹ کی مخصوصیت کی سطح•• میں کہاں شامل کیے جاتے ہیں۔ ترقی کے عمل کے دوران اہم سطحیں جیسا کہ SWEBOK گائیڈ کے ذریعہ بیان کیا گیا ہے یونٹ ، انضمام ، اور سسٹم ٹیسٹنگ ہیں جو ٹیسٹ کے ہدف کے ذریعہ ممتاز ہیں بغیر کسی مخصوص عمل کے ماڈل کا مطلب ہے۔ دیگر ٹیسٹ کی سطحوں کو جانچ کے مقصد کے ذریعہ درجہ بندی کیا جاتا ہے۔,یہ ٹیسٹ (لیول ٹیسٹنگ) عام طور پر کس کے ذریعہ گروپ کیے جاتے ہیں؟,False,False
106,314,14,57292a631d04691400779107,سافٹ ویئر_ٹیسٹنگ,عام طور پر ٹیسٹ کی چار تسلیم شدہ سطحیں ہیں: یونٹ ٹیسٹنگ ، انضمام ٹیسٹنگ ، جزو انٹرفیس ٹیسٹنگ ، اور سسٹم ٹیسٹنگ۔ ٹیسٹ کو اکثر اس کے مطابق گروپ کیا جاتا ہے کہ وہ سافٹ ویئر ڈویلپمنٹ کے عمل میں کہاں شامل کیے جاتے ہیں ، یا ٹیسٹ کی مخصوصیت کی سطح کے مطابق۔ ترقی کے عمل کے دوران اہم سطحیں جیسا کہ SWEBOK گائیڈ کے ذریعہ بیان کیا گیا ہے ••یونٹ ، انضمام ، اور سسٹم ٹیسٹنگ•• ہیں جو ٹیسٹ کے ہدف کے ذریعہ ممتاز ہیں بغیر کسی مخصوص عمل کے ماڈل کا مطلب ہے۔ دیگر ٹیسٹ کی سطحوں کو جانچ کے مقصد کے ذریعہ درجہ بندی کیا جاتا ہے۔,SWEBOK گائیڈ میں اہم سطحوں کی جانچ کے بارے میں کیا بیان کیا گیا ہے؟,False,False
107,314,14,57292a631d04691400779108,سافٹ ویئر_ٹیسٹنگ,عام طور پر ٹیسٹ کی چار تسلیم شدہ سطحیں ہیں: یونٹ ٹیسٹنگ ، انضمام ٹیسٹنگ ، جزو انٹرفیس ٹیسٹنگ ، اور سسٹم ٹیسٹنگ۔ ٹیسٹ کو اکثر اس کے مطابق گروپ کیا جاتا ہے کہ وہ سافٹ ویئر ڈویلپمنٹ کے عمل میں کہاں شامل کیے جاتے ہیں ، یا ٹیسٹ کی مخصوصیت کی سطح کے مطابق۔ ترقی کے عمل کے دوران اہم سطحیں جیسا کہ SWEBOK گائیڈ کے ذریعہ بیان کیا گیا ہے یونٹ ، انضمام ، اور سسٹم ٹیسٹنگ ہیں جو ٹیسٹ کے ہدف کے ذریعہ ممتاز ہیں بغیر کسی مخصوص عمل کے ماڈل کا مطلب ہے۔ دیگر ٹیسٹ کی سطحوں کو ••ٹیسٹنگ مقصد•• کے ذریعہ درجہ بندی کیا جاتا ہے۔,دیگر سطحوں کی درجہ بندی کس کے مطابق کی جاتی ہے؟,False,False
108,314,14,5a7b8bc121c2de001afea134,سافٹ ویئر_ٹیسٹنگ,عام طور پر ٹیسٹ کی چار تسلیم شدہ سطحیں ہیں: ••یونٹ ٹیسٹنگ ، انٹیگریشن ٹیسٹنگ ، جزو انٹرفیس ٹیسٹنگ ، اور سسٹم ٹیسٹنگ••۔ ٹیسٹ کو اکثر اس کے مطابق گروپ کیا جاتا ہے کہ وہ سافٹ ویئر ڈویلپمنٹ کے عمل میں کہاں شامل کیے جاتے ہیں ، یا ٹیسٹ کی مخصوصیت کی سطح کے مطابق۔ ترقی کے عمل کے دوران اہم سطحیں جیسا کہ SWEBOK گائیڈ کے ذریعہ بیان کیا گیا ہے یونٹ ، انٹیگریشن ، اور سسٹم ٹیسٹنگ ہیں جو ٹیسٹ کے ہدف کے ذریعہ ممتاز ہیں بغیر کسی مخصوص عمل کے ماڈل کا مطلب ہے۔ دیگر ٹیسٹ کی سطحوں کو جانچ کے مقصد کے ذریعہ درجہ بندی کیا جاتا ہے۔,ٹیسٹ کی چار غیر تسلیم شدہ سطحیں کیا ہیں؟,True,False
109,314,14,5a7b8bc121c2de001afea135,سافٹ ویئر_ٹیسٹنگ,عام طور پر ٹیسٹ کی چار تسلیم شدہ سطحیں ہیں: یونٹ ٹیسٹنگ ، انضمام ٹیسٹنگ ، جزو انٹرفیس ٹیسٹنگ ، اور سسٹم ٹیسٹنگ۔ ٹیسٹ کو اکثر ••جس جگہ وہ سافٹ ویئر ڈویلپمنٹ کے عمل میں شامل کیے جاتے ہیں ، یا ٹیسٹ کی مخصوصیت کی سطح کے مطابق•• گروپ کیا جاتا ہے۔ ترقی کے عمل کے دوران اہم سطحیں جیسا کہ SWEBOK گائیڈ کے ذریعہ بیان کیا گیا ہے یونٹ ، انضمام ، اور سسٹم ٹیسٹنگ ہیں جو ٹیسٹ کے ہدف کے ذریعہ ممتاز ہیں بغیر کسی مخصوص عمل کے ماڈل کا مطلب ہے۔ دیگر ٹیسٹ کی سطحوں کو جانچ کے مقصد کے ذریعہ درجہ بندی کیا جاتا ہے۔,ٹیسٹ کو اکثر کس طرح گروپ کیا جاتا ہے؟,True,False
110,314,14,5a7b8bc121c2de001afea136,سافٹ ویئر_ٹیسٹنگ,عام طور پر ٹیسٹ کی چار تسلیم شدہ سطحیں ہیں: یونٹ ٹیسٹنگ ، انضمام ٹیسٹنگ ، جزو انٹرفیس ٹیسٹنگ ، اور سسٹم ٹیسٹنگ۔ ٹیسٹ کو اکثر اس کے مطابق گروپ کیا جاتا ہے کہ وہ سافٹ ویئر ڈویلپمنٹ کے عمل میں کہاں شامل کیے جاتے ہیں ، یا ٹیسٹ کی مخصوصیت کی سطح کے مطابق۔ ترقی کے عمل کے دوران اہم سطحیں جیسا کہ ••SWEBOK گائیڈ•• کے ذریعہ بیان کیا گیا ہے یونٹ ، انضمام ، اور سسٹم ٹیسٹنگ ہیں جو ٹیسٹ کے ہدف کے ذریعہ ممتاز ہیں بغیر کسی مخصوص عمل کے ماڈل کا مطلب ہے۔ دیگر ٹیسٹ کی سطحوں کو جانچ کے مقصد کے ذریعہ درجہ بندی کیا جاتا ہے۔,ترقی کے عمل کی تمام سطحوں کی وضاحت کیا کرتا ہے؟,True,False
111,314,14,5a7b8bc121c2de001afea137,سافٹ ویئر_ٹیسٹنگ,عام طور پر ٹیسٹ کی چار تسلیم شدہ سطحیں ہیں: یونٹ ٹیسٹنگ ، انضمام ٹیسٹنگ ، جزو انٹرفیس ٹیسٹنگ ، اور سسٹم ٹیسٹنگ۔ ٹیسٹ کو اکثر اس کے مطابق گروپ کیا جاتا ہے کہ وہ سافٹ ویئر ڈویلپمنٹ کے عمل میں کہاں شامل کیے جاتے ہیں ، یا ٹیسٹ کی مخصوصیت کی سطح کے مطابق۔ ترقی کے عمل کے دوران اہم سطحیں جیسا کہ SWEBOK گائیڈ کے ذریعہ بیان کیا گیا ہے یونٹ ، انضمام ، اور ••سسٹم ٹیسٹنگ•• ہیں جو ٹیسٹ کے ہدف کے ذریعہ ممتاز ہیں بغیر کسی مخصوص عمل کے ماڈل کا مطلب ہے۔ دیگر ٹیسٹ کی سطحوں کو جانچ کے مقصد کے ذریعہ درجہ بندی کیا جاتا ہے۔,SWEBOK گائیڈ میں شامل سطحیں یونٹ، دوبارہ انضمام، اور کون سی دوسری سطح ہیں؟,True,False
112,314,14,5a7b8bc121c2de001afea138,سافٹ ویئر_ٹیسٹنگ,عام طور پر ٹیسٹ کی چار تسلیم شدہ سطحیں ہیں: یونٹ ٹیسٹنگ ، انضمام ٹیسٹنگ ، جزو انٹرفیس ٹیسٹنگ ، اور سسٹم ٹیسٹنگ۔ ٹیسٹ کو اکثر اس کے مطابق گروپ کیا جاتا ہے کہ وہ سافٹ ویئر ڈویلپمنٹ کے عمل میں کہاں شامل کیے جاتے ہیں ، یا ٹیسٹ کی مخصوصیت کی سطح کے مطابق۔ ترقی کے عمل کے دوران اہم سطحیں جیسا کہ SWEBOK گائیڈ کے ذریعہ بیان کیا گیا ہے یونٹ ، انضمام ، اور سسٹم ٹیسٹنگ ہیں جو ٹیسٹ کے ہدف کے ذریعہ ممتاز ہیں بغیر کسی مخصوص عمل کے ماڈل کا مطلب ہے۔ ••دیگر ٹیسٹ کی سطح•• کو جانچ کے مقصد کے ذریعہ درجہ بندی کیا جاتا ہے۔,پری ٹیسٹنگ مقصد کی طرف سے کیا درجہ بندی کیا جاتا ہے؟,True,False
113,314,15,57292bf71d0469140077910d,سافٹ ویئر_ٹیسٹنگ,یونٹ ٹیسٹنگ ایک سافٹ ویئر ڈویلپمنٹ عمل ہے جس میں ••سافٹ ویئر ڈویلپمنٹ خطرات ، وقت اور اخراجات کو کم کرنے•• کے لئے خرابی کی روک تھام اور پتہ لگانے کی حکمت عملی کے وسیع سپیکٹرم کا ہم آہنگ اطلاق شامل ہے۔ یہ سافٹ ویئر ڈویلپر یا انجینئر کے ذریعہ سافٹ ویئر ڈویلپمنٹ لائف سائیکل کے تعمیراتی مرحلے کے دوران کیا جاتا ہے۔ روایتی کیو اے فوکس کی جگہ لینے کے بجائے ، اس میں اضافہ کرتا ہے۔ یونٹ ٹیسٹنگ کا مقصد کوڈ کو کیو اے کو فروغ دینے سے پہلے تعمیراتی غلطیوں کو ختم کرنا ہے۔ اس حکمت عملی کا مقصد نتیجے میں سافٹ ویئر کے معیار کے ساتھ ساتھ مجموعی ترقی اور کیو اے عمل کی کارکردگی کو بڑھانا ہے۔,یونٹ ٹیسٹنگ کے پیچھے بنیادی استدلال کیا ہے جس میں وسیع سپیکٹرم پر درخواست کی ہم وقت سازی شامل ہے؟,False,False
114,314,15,57292bf71d0469140077910e,سافٹ ویئر_ٹیسٹنگ,یونٹ ٹیسٹنگ ایک سافٹ ویئر ڈویلپمنٹ عمل ہے جس میں سافٹ ویئر ڈویلپمنٹ کے خطرات ، وقت اور اخراجات کو کم کرنے کے لئے خرابی کی روک تھام اور پتہ لگانے کی حکمت عملی کے وسیع سپیکٹرم کا ہم آہنگ اطلاق شامل ہے۔ یہ سافٹ ویئر ڈویلپر یا انجینئر کے ذریعہ سافٹ ویئر ڈویلپمنٹ لائف سائیکل کے تعمیراتی مرحلے کے دوران انجام دیا جاتا ہے۔ روایتی کیو اے فوکس کی جگہ لینے کے بجائے ، اس میں اضافہ کرتا ہے۔ یونٹ ٹیسٹنگ کا مقصد کوڈ کو کیو اے کو فروغ دینے سے پہلے تعمیراتی غلطیوں کو ختم کرنا ہے۔ اس حکمت عملی کا مقصد نتیجے میں سافٹ ویئر کے معیار کے ساتھ ساتھ مجموعی ترقی اور کیو اے عمل کی کارکردگی کو بڑھانا ہے۔,یونٹ ٹیسٹنگ مرحلے کو کون انجام دیتا ہے؟,False,True
115,314,15,57292bf71d0469140077910f,سافٹ ویئر_ٹیسٹنگ,یونٹ ٹیسٹنگ ایک سافٹ ویئر ڈویلپمنٹ عمل ہے جس میں سافٹ ویئر ڈویلپمنٹ کے خطرات ، وقت اور اخراجات کو کم کرنے کے لئے خرابی کی روک تھام اور پتہ لگانے کی حکمت عملی کے وسیع سپیکٹرم کا ہم آہنگ اطلاق شامل ہے۔ یہ سافٹ ویئر ڈویلپر یا انجینئر کے ذریعہ سافٹ ویئر ڈویلپمنٹ لائف سائیکل کے تعمیراتی مرحلے کے دوران کیا جاتا ہے۔ روایتی کیو اے فوکس کی جگہ لینے کے بجائے ، اس میں اضافہ کرتا ہے۔ یونٹ ٹیسٹنگ کا مقصد کوڈ کو کیو اے میں ترقی دینے سے پہلے ••تعمیر کی غلطیاں•• کو ختم کرنا ہے۔ اس حکمت عملی کا مقصد نتیجے میں سافٹ ویئر کے معیار کے ساتھ ساتھ مجموعی ترقی اور کیو اے عمل کی کارکردگی کو بڑھانا ہے۔,یونٹ ٹیسٹنگ کیا ختم کرنے کے لئے لگ رہا ہے؟,False,False
116,314,15,57292bf71d04691400779110,سافٹ ویئر_ٹیسٹنگ,یونٹ ٹیسٹنگ ایک سافٹ ویئر ڈویلپمنٹ عمل ہے جس میں سافٹ ویئر ڈویلپمنٹ کے خطرات ، وقت اور اخراجات کو کم کرنے کے لئے خرابی کی روک تھام اور پتہ لگانے کی حکمت عملی کے وسیع سپیکٹرم کا ہم آہنگ اطلاق شامل ہے۔ یہ سافٹ ویئر ڈویلپر یا انجینئر کے ذریعہ سافٹ ویئر ڈویلپمنٹ لائف سائیکل کے تعمیراتی مرحلے کے دوران کیا جاتا ہے۔ روایتی کیو اے فوکس کی جگہ لینے کے بجائے ، اس میں اضافہ کرتا ہے۔ یونٹ ٹیسٹنگ کا مقصد کوڈ کو کیو اے میں ترقی دینے سے پہلے تعمیراتی غلطیوں کو ختم کرنا ہے۔ اس حکمت عملی کا مقصد ••نتیجہی سافٹ ویئر کا معیار بڑھانا•• کے ساتھ ساتھ مجموعی ترقی اور کیو اے عمل کی کارکردگی کو بڑھانا ہے۔,تعمیراتی غلطیوں کو ختم کرنے سے، متوقع اختتامی نتیجہ کیا ہے؟,False,False
117,314,15,5a7b8d4d21c2de001afea158,سافٹ ویئر_ٹیسٹنگ,"یونٹ ٹیسٹنگ ایک سافٹ ویئر ڈویلپمنٹ عمل ہے جس میں ""سافٹ ویئر ڈویلپمنٹ کے خطرات ، وقت اور اخراجات کو کم کرنے کے لئے نقائص کی روک تھام اور پتہ لگانے کی حکمت عملی کے ایک وسیع سپیکٹرم کا ہم آہنگ اطلاق شامل ہے۔ یہ سافٹ ویئر ڈویلپر یا انجینئر کے ذریعہ سافٹ ویئر ڈویلپمنٹ لائف سائیکل کے تعمیراتی مرحلے کے دوران کیا جاتا ہے۔ روایتی کیو اے فوکس کی جگہ لینے کے بجائے ، اس میں اضافہ کرتا ہے۔ یونٹ ٹیسٹنگ کا مقصد کوڈ کو کیو اے کو فروغ دینے سے پہلے تعمیراتی غلطیوں کو ختم کرنا ہے۔ اس حکمت عملی کا مقصد نتیجے میں سافٹ ویئر کے معیار کے ساتھ ساتھ مجموعی ترقی اور کیو اے عمل کی کارکردگی کو بڑھانا ہے۔",یونٹ ٹیسٹنگ ایک فرم ویئر کی ترقی ہے جس میں کیا شامل ہے؟,True,True
118,314,15,5a7b8d4d21c2de001afea159,سافٹ ویئر_ٹیسٹنگ,یونٹ ٹیسٹنگ ایک سافٹ ویئر ڈویلپمنٹ عمل ہے جس میں سافٹ ویئر ڈویلپمنٹ کے خطرات ، وقت اور اخراجات کو کم کرنے کے لئے خرابی کی روک تھام اور پتہ لگانے کی حکمت عملی کے ایک وسیع سپیکٹرم کا ہم آہنگ اطلاق شامل ہے۔ یہ سافٹ ویئر ڈویلپر یا انجینئر کے ذریعہ سافٹ ویئر ڈویلپمنٹ لائف سائیکل کے تعمیراتی مرحلے کے دوران کیا جاتا ہے۔ روایتی کیو اے فوکس کی جگہ لینے کے بجائے ، اس میں اضافہ کرتا ہے۔ یونٹ ٹیسٹنگ کا مقصد کوڈ کو کیو اے کو فروغ دینے سے پہلے تعمیراتی غلطیوں کو ختم کرنا ہے۔ اس حکمت عملی کا مقصد نتیجے میں سافٹ ویئر کے معیار کے ساتھ ساتھ مجموعی ترقی اور کیو اے عمل کی کارکردگی کو بڑھانا ہے۔,یونٹ ٹیسٹنگ معمار یا کس قسم کے ڈویلپر کی طرف سے preformed ہے؟,True,True
119,314,15,5a7b8d4d21c2de001afea15a,سافٹ ویئر_ٹیسٹنگ,یونٹ ٹیسٹنگ ایک سافٹ ویئر ڈویلپمنٹ عمل ہے جس میں سافٹ ویئر ڈویلپمنٹ کے خطرات ، وقت اور اخراجات کو کم کرنے کے لئے خرابی کی روک تھام اور پتہ لگانے کی حکمت عملی کے ایک وسیع سپیکٹرم کا ہم آہنگ اطلاق شامل ہے۔ یہ سافٹ ویئر ڈویلپر یا انجینئر کے ذریعہ سافٹ ویئر ڈویلپمنٹ لائف سائیکل کے تعمیراتی مرحلے کے دوران کیا جاتا ہے۔ روایتی کیو اے فوکس کی جگہ لینے کے بجائے ، یہ اسے ••بڑھاتا•• ہے۔ یونٹ ٹیسٹنگ کا مقصد کوڈ کو کیو اے کو فروغ دینے سے پہلے تعمیراتی غلطیوں کو ختم کرنا ہے۔ اس حکمت عملی کا مقصد نتیجے میں سافٹ ویئر کے معیار کے ساتھ ساتھ مجموعی ترقی اور کیو اے عمل کی کارکردگی کو بڑھانا ہے۔,روایتی QA فوکس کو کم کرنے کے بجائے، یونٹ ٹیسٹنگ اس کے ساتھ کیا کرتا ہے؟,True,False
120,314,15,5a7b8d4d21c2de001afea15b,سافٹ ویئر_ٹیسٹنگ,یونٹ ٹیسٹنگ ایک سافٹ ویئر ڈویلپمنٹ عمل ہے جس میں سافٹ ویئر ڈویلپمنٹ کے خطرات ، وقت اور اخراجات کو کم کرنے کے لئے خرابی کی روک تھام اور پتہ لگانے کی حکمت عملی کے ایک وسیع سپیکٹرم کا ہم آہنگ اطلاق شامل ہے۔ یہ سافٹ ویئر ڈویلپر یا انجینئر کے ذریعہ سافٹ ویئر ڈویلپمنٹ لائف سائیکل کے تعمیراتی مرحلے کے دوران کیا جاتا ہے۔ روایتی کیو اے فوکس کی جگہ لینے کے بجائے ، اس میں اضافہ کرتا ہے۔ یونٹ ٹیسٹنگ کا مقصد ••کوڈ کو کیو اے میں ترقی دینے•• سے پہلے تعمیراتی غلطیوں کو ختم کرنا ہے۔ اس حکمت عملی کا مقصد نتیجے میں سافٹ ویئر کے معیار کے ساتھ ساتھ مجموعی ترقی اور کیو اے عمل کی کارکردگی کو بڑھانا ہے۔,یونٹ ٹیسٹنگ کیا سے پہلے تعاون کی غلطیوں کو ختم کرنے کی کوشش کرتا ہے؟,True,False
121,314,16,572937f3af94a219006aa1b7,سافٹ ویئر_ٹیسٹنگ,••کمپوننٹ انٹرفیس ٹیسٹنگ•• کے عمل کو ان یونٹوں کے مابین مختلف اکائیوں ، یا ذیلی نظام کے اجزاء کے مابین مکمل انضمام کی جانچ سے آگے ، مختلف اکائیوں ، یا ذیلی نظام کے اجزاء کے مابین گزرنے والے اعداد و شمار کی ہینڈلنگ کی جانچ کرنے کے لئے استعمال کیا جاسکتا ہے۔ گزرنے والے اعداد و شمار کو پیغام پیکٹ کے طور پر سمجھا جاسکتا ہے اور ایک یونٹ سے پیدا ہونے والے اعداد و شمار کے لئے رینج یا ڈیٹا کی اقسام کی جانچ کی جاسکتی ہے ، اور دوسرے یونٹ میں گزرنے سے پہلے توثیق کے لئے جانچ کی جاسکتی ہے۔ انٹرفیس ٹیسٹنگ کے لئے ایک آپشن ڈیٹا آئٹمز کی ایک الگ لاگ فائل رکھنا ہے ، اکثر ٹائم اسٹیمپ کے ساتھ لاگ ان کیا جاتا ہے تاکہ یونٹوں کے مابین ہزاروں معاملات کا تجزیہ کیا جاسکے۔ ٹیسٹ میں کچھ انتہائی ڈیٹا اقدار کی ہینڈلنگ کی جانچ شامل ہوسکتی ہے جبکہ دوسرے انٹرفیس متغیرات کو عام اقدار کے طور پر منتقل کیا جاتا ہے۔ انٹرفیس میں غیر معمولی ڈیٹا اقدار اگلے یونٹ میں غیر متوقع کارکردگی کی وضاحت میں مدد کرسکتے ہیں۔,یونٹس کے درمیان منتقل اعداد و شمار کی جانچ پڑتال کرنے کے لئے یہ کیا کہا جاتا ہے؟,False,False
122,314,16,572937f3af94a219006aa1b8,سافٹ ویئر_ٹیسٹنگ,جزو انٹرفیس ٹیسٹنگ کا عمل مختلف یونٹوں ، یا ذیلی نظام کے اجزاء کے مابین گزرنے والے اعداد و شمار کی ہینڈلنگ کی جانچ کرنے کے لئے استعمال کیا جاسکتا ہے ، ان یونٹوں کے مابین مکمل انضمام کی جانچ سے آگے۔ گزرنے والے اعداد و شمار کو ••پیغام پیکٹ•• کے طور پر سمجھا جاسکتا ہے اور ایک یونٹ سے پیدا ہونے والے اعداد و شمار کے لئے رینج یا ڈیٹا کی اقسام کی جانچ کی جاسکتی ہے ، اور کسی دوسرے یونٹ میں گزرنے سے پہلے توثیق کے لئے جانچ کی جاسکتی ہے۔ انٹرفیس ٹیسٹنگ کا ایک آپشن ڈیٹا آئٹمز کی ایک الگ لاگ فائل رکھنا ہے ، اکثر ٹائم اسٹیمپ کے ساتھ لاگ ان کیا جاتا ہے تاکہ یونٹوں کے مابین ہزاروں معاملات کا تجزیہ کیا جاسکے۔ ٹیسٹ میں کچھ انتہائی ڈیٹا اقدار کی ہینڈلنگ کی جانچ شامل ہوسکتی ہے جبکہ دوسرے انٹرفیس متغیرات کو عام اقدار کے طور پر منتقل کیا جاتا ہے۔ ایک انٹرفیس میں غیر معمولی ڈیٹا اقدار اگلے یونٹ میں غیر متوقع کارکردگی کی وضاحت کرنے میں مدد کرسکتے ہیں۔ جزو انٹرفیس ٹیس ٹیس ٹیسٹنگ بلیک باکس ٹیسٹنگ ہے۔,جب ڈیٹا منتقل کیا جا رہا ہے تو اسے کیا کہا جاتا ہے؟,False,False
123,314,16,572937f3af94a219006aa1b9,سافٹ ویئر_ٹیسٹنگ,جزو انٹرفیس ٹیسٹنگ کا عمل مختلف یونٹوں ، یا ذیلی نظام کے اجزاء کے مابین گزرنے والے اعداد و شمار کی ہینڈلنگ کی جانچ پڑتال کے لئے استعمال کیا جاسکتا ہے ، ان یونٹوں کے مابین مکمل انضمام کی جانچ کے علاوہ۔ گزرنے والے اعداد و شمار کو پیغام پیکٹ کے طور پر سمجھا جاسکتا ہے اور ایک یونٹ سے تیار کردہ اعداد و شمار یا ڈیٹا کی اقسام کی جانچ پڑتال کی جاسکتی ہے ، اور کسی دوسرے یونٹ میں گزرنے سے پہلے توثیق کے لئے جانچ پڑتال کی جاسکتی ہے۔ انٹرفیس ٹیسٹنگ کا ایک آپشن یہ ہے کہ ••ڈیٹا آئٹمز کی علیحدہ لاگ فائل کو الگ الگ رکھنا•• ، اکثر ٹائم اسٹیمپ کے ساتھ لاگ کیا جاتا ہے تاکہ یونٹوں کے مابین ہزاروں معاملات کا تجزیہ کیا جاسکے۔ ٹیسٹ میں کچھ انتہائی ڈیٹا اقدار کی ہینڈلنگ کی جانچ پڑتال شامل ہوسکتی ہے جبکہ دوسرے انٹرفیس متغیرات کو عام اقدار کے طور پر منتقل کیا جاتا ہے۔ ایک انٹرفیس میں غیر معمولی ڈیٹا اقدار اگلے یونٹ میں غیر متوقع کارکردگی کی وضاحت میں مدد کرسکتے ہیں۔ جزو انٹرفیس ٹیس ٹیس ٹیسٹنگ بلیک باکس ٹیسٹنگ ہے۔,پیغام پیکٹ بھیجنے کے دوران استعمال اجزاء انٹرفیس ٹیسٹنگ کا ایک آپشن کیا ہے؟,False,False
124,314,16,572937f3af94a219006aa1ba,سافٹ ویئر_ٹیسٹنگ,جزو انٹرفیس ٹیسٹنگ کا عمل مختلف اکائیوں ، یا ذیلی نظام کے اجزاء کے مابین گزرنے والے اعداد و شمار کی ہینڈلنگ کی جانچ پڑتال کے لئے استعمال کیا جاسکتا ہے۔ ان اکائیوں کے مابین مکمل انضمام کی جانچ کے علاوہ ، گزرنے والے اعداد و شمار کو پیغام پیکٹ کے طور پر سمجھا جاسکتا ہے اور ایک یونٹ سے پیدا ہونے والے اعداد و شمار یا ڈیٹا کی اقسام کی جانچ پڑتال کی جاسکتی ہے ، اور کسی دوسرے یونٹ میں گزرنے سے پہلے توثیق کے لئے جانچ پڑتال کی جاسکتی ہے۔ انٹرفیس ٹیسٹنگ کا ایک آپشن یہ ہے کہ ڈیٹا آئٹمز کی ایک علیحدہ لاگ فائل کو پاس کیا جارہا ہے ، اکثر ٹائم اسٹیمپ کے ساتھ لاگ کیا جاتا ہے تاکہ یونٹوں کے مابین ہزاروں معاملات کا تجزیہ کیا جاسکے۔ ٹیسٹ میں کچھ انتہائی ڈیٹا اقدار کی ہینڈلنگ کی جانچ پڑتال شامل ہوسکتی ہے جبکہ دوسرے انٹرفیس متغیرات کو عام اقدار کے طور پر منتقل کیا جاتا ہے۔ ایک انٹرفیس میں غیر معمولی ڈیٹا اقدار اگلے یونٹ میں غیر متوقع کارکردگی کی وضاحت میں مدد کرسکتے ہیں۔,بلیک باکس ٹیسٹنگ کی ایک تغیر کیا ہے؟,False,True
125,314,16,5a7b8ea821c2de001afea160,سافٹ ویئر_ٹیسٹنگ,••کمپوننٹ انٹرفیس ٹیسٹنگ•• کے عمل کو ان یونٹوں کے مابین مختلف اکائیوں ، یا ذیلی نظام کے اجزاء کے مابین مکمل انضمام کی جانچ سے آگے ، مختلف اکائیوں ، یا ذیلی نظام کے اجزاء کے مابین گزرنے والے اعداد و شمار کی ہینڈلنگ کی جانچ کرنے کے لئے استعمال کیا جاسکتا ہے۔ گزرنے والے اعداد و شمار کو پیغام پیکٹ کے طور پر سمجھا جاسکتا ہے اور ایک یونٹ سے پیدا ہونے والے اعداد و شمار کے لئے رینج یا ڈیٹا کی اقسام کی جانچ کی جاسکتی ہے ، اور دوسرے یونٹ میں گزرنے سے پہلے توثیق کے لئے جانچ کی جاسکتی ہے۔ انٹرفیس ٹیسٹنگ کے لئے ایک آپشن ڈیٹا آئٹمز کی ایک الگ لاگ فائل رکھنا ہے ، اکثر ٹائم اسٹیمپ کے ساتھ لاگ ان کیا جاتا ہے تاکہ یونٹوں کے مابین ہزاروں معاملات کا تجزیہ کیا جاسکے۔ ٹیسٹ میں کچھ انتہائی ڈیٹا اقدار کی ہینڈلنگ کی جانچ شامل ہوسکتی ہے جبکہ دوسرے انٹرفیس متغیرات کو عام اقدار کے طور پر منتقل کیا جاتا ہے۔ انٹرفیس میں غیر معمولی ڈیٹا اقدار اگلے یونٹ میں غیر متوقع کارکردگی کی وضاحت میں مدد کرسکتے ہیں۔,یونٹس کے درمیان منتقل ڈیٹا بیس کی جانچ پڑتال کرنے کے لئے کیا استعمال کیا جا سکتا ہے؟,True,False
126,314,16,5a7b8ea821c2de001afea161,سافٹ ویئر_ٹیسٹنگ,جزو انٹرفیس ٹیسٹنگ کا عمل مختلف یونٹوں ، یا ذیلی نظام کے اجزاء کے مابین گزرنے والے اعداد و شمار کی ہینڈلنگ کی جانچ کرنے کے لئے استعمال کیا جاسکتا ہے ، ان یونٹوں کے مابین مکمل انضمام کی جانچ سے آگے۔ گزرنے والے اعداد و شمار کو ••پیغام پیکٹ•• کے طور پر سمجھا جاسکتا ہے اور ایک یونٹ سے پیدا ہونے والے اعداد و شمار کے لئے رینج یا ڈیٹا کی اقسام کی جانچ کی جاسکتی ہے ، اور کسی دوسرے یونٹ میں گزرنے سے پہلے توثیق کے لئے جانچ کی جاسکتی ہے۔ انٹرفیس ٹیسٹنگ کا ایک آپشن ڈیٹا آئٹمز کی ایک الگ لاگ فائل رکھنا ہے ، اکثر ٹائم اسٹیمپ کے ساتھ لاگ ان کیا جاتا ہے تاکہ یونٹوں کے مابین ہزاروں معاملات کا تجزیہ کیا جاسکے۔ ٹیسٹ میں کچھ انتہائی ڈیٹا اقدار کی ہینڈلنگ کی جانچ شامل ہوسکتی ہے جبکہ دوسرے انٹرفیس متغیرات کو عام اقدار کے طور پر منتقل کیا جاتا ہے۔ ایک انٹرفیس میں غیر معمولی ڈیٹا اقدار اگلے یونٹ میں غیر متوقع کارکردگی کی وضاحت کرنے میں مدد کرسکتے ہیں۔ جزو انٹرفیس ٹیس ٹیس ٹیسٹنگ بلیک باکس ٹیسٹنگ ہے۔,اس ڈیٹا کا ایک اور نام کیا ہے جس پر قبضہ کیا جا رہا ہے؟,True,False
127,314,16,5a7b8ea821c2de001afea162,سافٹ ویئر_ٹیسٹنگ,جزو انٹرفیس ٹیسٹنگ کا عمل ان یونٹوں کے مابین مختلف اکائیوں ، یا ذیلی نظام کے اجزاء کے مابین مکمل انٹیگریشن ٹیسٹنگ سے باہر ، مختلف اکائیوں ، یا ذیلی نظام کے اجزاء کے مابین گزرنے والے اعداد و شمار کی ہینڈلنگ کی جانچ کرنے کے لئے استعمال کیا جاسکتا ہے۔ گزرنے والے اعداد و شمار کو پیغام پیکٹ کے طور پر سمجھا جاسکتا ہے اور ایک یونٹ سے پیدا ہونے والے اعداد و شمار یا ڈیٹا کی اقسام کی جانچ کی جاسکتی ہے ، اور کسی دوسرے یونٹ میں گزرنے سے پہلے توثیق کے لئے جانچ کی جاسکتی ہے۔ انٹرفیس ٹیسٹنگ کے لئے ایک آپشن یہ ہے کہ ••ڈیٹا آئٹمز کی علیحدہ لاگ فائل کو الگ الگ رکھا جائے ، اکثر ٹائم اسٹیمپ کے ساتھ لاگ ان کیا جائے تاکہ یونٹوں کے مابین ہزاروں معاملات کا تجزیہ کیا جاسکے••۔ ٹیسٹ میں کچھ انتہائی ڈیٹا اقدار کی ہینڈلنگ کی جانچ شامل ہوسکتی ہے جبکہ دوسرے انٹرفیس متغیرات کو عام اقدار کے طور پر منتقل کیا جاتا ہے۔ ایک انٹرفیس میں غیر معمولی ڈیٹا اقدار اگلے یونٹ میں غیر متوقع کارکردگی کی وضاحت میں مدد کرسکتے ہیں۔,انٹرفیس انضمام کے لئے ایک آپشن کیا ہے؟,True,False
128,314,16,5a7b8ea821c2de001afea163,سافٹ ویئر_ٹیسٹنگ,جزو انٹرفیس ٹیسٹنگ کا عمل مختلف یونٹوں ، یا ذیلی نظام کے اجزاء کے مابین گزرنے والے اعداد و شمار کی ہینڈلنگ کی جانچ پڑتال کے لئے استعمال کیا جاسکتا ہے ، ان یونٹوں کے مابین مکمل انضمام کی جانچ کے علاوہ۔ گزرنے والے اعداد و شمار کو پیغام پیکٹ کے طور پر سمجھا جاسکتا ہے اور ایک یونٹ سے پیدا ہونے والے اعداد و شمار یا ڈیٹا کی اقسام کی جانچ پڑتال کی جاسکتی ہے ، اور کسی دوسرے یونٹ میں گزرنے سے پہلے توثیق کے لئے جانچ پڑتال کی جاسکتی ہے۔ انٹرفیس ٹیسٹنگ کا ایک آپشن یہ ہے کہ ڈیٹا آئٹمز کی ایک الگ لاگ فائل رکھی جائے ، اکثر ٹائم اسٹیمپ کے ساتھ لاگ ان کیا جاتا ہے تاکہ یونٹوں کے مابین ہزاروں معاملات کا تجزیہ کیا جاسکے۔ ٹیسٹ میں کچھ انتہائی ڈیٹا اقدار کی ہینڈلنگ کی جانچ پڑتال شامل ہوسکتی ہے جبکہ دوسرے انٹرفیس متغیرات کو عام اقدار کے طور پر منتقل کیا جاتا ہے۔ انٹرفیس میں غیر معمولی ڈیٹا اقدار ••اگندہ یونٹ میں غیر متوقع کارکردگی•• کی وضاحت میں مدد کرسکتے ہیں۔,ایک انٹرفیس میں عام اعداد و شمار کی اقدار کیا وضاحت کرنے کے لئے استعمال کیا جا سکتا ہے؟,True,False
129,314,16,5a7b8ea821c2de001afea164,سافٹ ویئر_ٹیسٹنگ,جزو انٹرفیس ٹیسٹنگ کا عمل مختلف اکائیوں ، یا ذیلی نظام کے اجزاء کے مابین گزرنے والے اعداد و شمار کی ہینڈلنگ کی جانچ پڑتال کے لئے استعمال کیا جاسکتا ہے۔ ان اکائیوں کے مابین مکمل انضمام کی جانچ کے علاوہ ، گزرنے والے اعداد و شمار کو پیغام پیکٹ کے طور پر سمجھا جاسکتا ہے اور ایک یونٹ سے پیدا ہونے والے اعداد و شمار یا ڈیٹا کی اقسام کی جانچ پڑتال کی جاسکتی ہے ، اور کسی دوسرے یونٹ میں گزرنے سے پہلے توثیق کے لئے جانچ پڑتال کی جاسکتی ہے۔ انٹرفیس ٹیسٹنگ کا ایک آپشن یہ ہے کہ ڈیٹا آئٹمز کی ایک علیحدہ لاگ فائل کو پاس کیا جارہا ہے ، اکثر ٹائم اسٹیمپ کے ساتھ لاگ کیا جاتا ہے تاکہ یونٹوں کے مابین ہزاروں معاملات کا تجزیہ کیا جاسکے۔ ٹیسٹ میں کچھ انتہائی ڈیٹا اقدار کی ہینڈلنگ کی جانچ پڑتال شامل ہوسکتی ہے جبکہ دوسرے انٹرفیس متغیرات کو عام اقدار کے طور پر منتقل کیا جاتا ہے۔ ایک انٹرفیس میں غیر معمولی ڈیٹا اقدار اگلے یونٹ میں غیر متوقع کارکردگی کی وضاحت میں مدد کرسکتے ہیں۔,بلیک باکسنگ ٹیسٹنگ کی ایک قسم کیا ہے؟,True,True
130,314,17,572938f31d04691400779187,سافٹ ویئر_ٹیسٹنگ,••آپریشنل قبولیت•• کا استعمال کوالٹی مینجمنٹ سسٹم کے حصے کے طور پر کسی پروڈکٹ ، سروس یا سسٹم کی آپریشنل تیاری (پری ریلیز) کرنے کے لئے کیا جاتا ہے۔ او اے ٹی ایک عام قسم کی غیر فنکشنل سافٹ ویئر ٹیسٹنگ ہے ، جو بنیادی طور پر سافٹ ویئر ڈویلپمنٹ اور سافٹ ویئر مینٹیننس منصوبوں میں استعمال ہوتی ہے۔ اس قسم کی ٹیسٹنگ سسٹم کی آپریشنل تیاری پر توجہ دیتی ہے ، اور / یا پروڈکشن ماحول کا حصہ بننے کے لئے۔ لہذا ، اسے آپریشنل تیاری ٹیسٹنگ (او آر ٹی) یا آپریشنز تیاری اور یقین دہانی (او آر اینڈ اے) ٹیسٹنگ کے نام سے بھی جانا جاتا ہے۔ او اے ٹی کے اندر فنکشنل ٹیسٹنگ ان ٹیسٹوں تک محدود ہے۔,پری ریلیز کے دوران سافٹ ویئر کی جانچ کے لئے استعمال ہونے والی اصطلاح کیا ہے؟,False,False
131,314,17,572938f31d04691400779188,سافٹ ویئر_ٹیسٹنگ,آپریشنل قبولیت کا استعمال پروڈکٹ ، سروس یا سسٹم کی آپریشنل تیاری (پری ریلیز) کو کوالٹی مینجمنٹ سسٹم کے حصے کے طور پر انجام دینے کے لئے کیا جاتا ہے۔ او اے ٹی ایک عام قسم کی غیر فنکشنل سافٹ ویئر ٹیسٹنگ ہے ، جو بنیادی طور پر سافٹ ویئر ڈویلپمنٹ اور سافٹ ویئر مینٹیننس منصوبوں میں استعمال ہوتی ہے۔ اس قسم کی ٹیسٹنگ ••سسٹم کی آپریشنل تیاری•• پر توجہ دیتی ہے جس کی حمایت کی جائے ، اور / یا پروڈکشن ماحول کا حصہ بن جائے۔ لہذا ، اسے آپریشنل تیاری ٹیسٹنگ (او آر ٹی) یا آپریشنز تیاری اور یقین دہانی (او آر اینڈ اے) ٹیسٹنگ کے نام سے بھی جانا جاتا ہے۔ او اے ٹی کے اندر فنکشنل ٹیسٹنگ ان ٹیسٹوں تک محدود ہے۔,آپریشنل قبولیت پر کیا توجہ مرکوز کرتا ہے؟,False,False
132,314,17,572938f31d04691400779189,سافٹ ویئر_ٹیسٹنگ,آپریشنل قبولیت کا استعمال پروڈکٹ ، سروس یا سسٹم کی آپریشنل تیاری (پری ریلیز) کو کوالٹی مینجمنٹ سسٹم کے حصے کے طور پر انجام دینے کے لئے کیا جاتا ہے۔ او اے ٹی ایک عام قسم کی غیر فنکشنل سافٹ ویئر ٹیسٹنگ ہے ، جو بنیادی طور پر سافٹ ویئر ڈویلپمنٹ اور سافٹ ویئر مینٹیننس منصوبوں میں استعمال ہوتی ہے۔ اس قسم کی ٹیسٹنگ سسٹم کی آپریشنل تیاری پر توجہ دیتی ہے ، اور / یا پروڈکشن ماحول کا حصہ بننے کے لئے۔ لہذا ، اسے آپریشنل تیاری ٹیسٹنگ (او آر ٹی) یا آپریشنز تیاری اور یقین دہانی (او آر اینڈ اے) ٹیسٹنگ کے نام سے بھی جانا جاتا ہے۔ او اے ٹی کے اندر فنکشنل ٹیسٹنگ ••ان ٹیسٹ تک محدود ہے جو سسٹم کے غیر فنکشنل پہلوؤں کی تصدیق کے لئے درکار ہیں۔••,ٹیسٹ کے دوران آپریشنل قبولیت کس چیز تک محدود ہے؟,False,False
133,314,17,5a7b906021c2de001afea16a,سافٹ ویئر_ٹیسٹنگ,آپریشنل قبولیت کا استعمال ••ایک پروڈکٹ ، سروس یا سسٹم کی آپریشنل تیاری (پری ریلیز) کو کوالٹی مینجمنٹ سسٹم کے حصے کے طور پر انجام دینے کے لئے•• کیا جاتا ہے۔ او اے ٹی ایک عام قسم کی غیر فنکشنل سافٹ ویئر ٹیسٹنگ ہے ، جو بنیادی طور پر سافٹ ویئر ڈویلپمنٹ اور سافٹ ویئر مینٹیننس منصوبوں میں استعمال ہوتی ہے۔ اس قسم کی ٹیسٹنگ سسٹم کی آپریشنل تیاری پر توجہ دیتی ہے ، اور / یا پروڈکشن ماحول کا حصہ بننے کے لئے۔ لہذا ، اسے آپریشنل تیاری ٹیسٹنگ (او آر ٹی) یا آپریشنز تیاری اور یقین دہانی (او آر اینڈ اے) ٹیسٹنگ کے نام سے بھی جانا جاتا ہے۔ او اے ٹی کے اندر فنکشنل ٹیسٹنگ ان ٹیسٹوں تک محدود ہے۔,Occupational Acceptance کا استعمال کس چیز کے لیے کیا جاتا ہے؟,True,False
134,314,17,5a7b906021c2de001afea16b,سافٹ ویئر_ٹیسٹنگ,آپریشنل قبولیت کا استعمال پروڈکٹ ، سروس یا سسٹم کی آپریشنل تیاری (پری ریلیز) کو کوالٹی مینجمنٹ سسٹم کے حصے کے طور پر انجام دینے کے لئے کیا جاتا ہے۔ ••او اے ٹی•• ایک عام قسم کی غیر فنکشنل سافٹ ویئر ٹیسٹنگ ہے ، جو بنیادی طور پر سافٹ ویئر ڈویلپمنٹ اور سافٹ ویئر مینٹیننس منصوبوں میں استعمال ہوتی ہے۔ اس قسم کی ٹیسٹنگ سسٹم کی آپریشنل تیاری پر توجہ دیتی ہے ، اور / یا پروڈکشن ماحول کا حصہ بننے کے لئے۔ لہذا ، اسے آپریشنل تیاری ٹیسٹنگ (او آر ٹی) یا آپریشنز تیاری اور یقین دہانی (او آر اینڈ اے) ٹیسٹنگ کے نام سے بھی جانا جاتا ہے۔ او اے ٹی کے اندر فنکشنل ٹیسٹنگ ان ٹیسٹوں تک محدود ہے۔,فنکشنل سافٹ ویئر ٹیسٹنگ کی ایک غیر معمولی قسم کیا ہے؟,True,False
135,314,17,5a7b906021c2de001afea16c,سافٹ ویئر_ٹیسٹنگ,آپریشنل قبولیت کا استعمال پروڈکٹ ، سروس یا سسٹم کی آپریشنل تیاری (پری ریلیز) کو کوالٹی مینجمنٹ سسٹم کے حصے کے طور پر انجام دینے کے لئے کیا جاتا ہے۔ او اے ٹی ایک عام قسم کی غیر فنکشنل سافٹ ویئر ٹیسٹنگ ہے ، جو بنیادی طور پر سافٹ ویئر ڈویلپمنٹ اور سافٹ ویئر مینٹیننس منصوبوں میں استعمال ہوتی ہے۔ اس قسم کی ٹیسٹنگ سسٹم کی آپریشنل تیاری پر توجہ دیتی ہے ، اور / یا پروڈکشن ماحول کا حصہ بننے کے لئے۔ لہذا ، اسے آپریشنل تیاری ٹیسٹنگ (او آر ٹی) یا آپریشنز تیاری اور یقین دہانی (او آر اینڈ اے) ٹیسٹنگ کے نام سے بھی جانا جاتا ہے۔ او اے ٹی کے اندر فنکشنل ٹیسٹنگ ••ان ٹیسٹ تک محدود ہے جو سسٹم کے غیر فنکشنل پہلوؤں کی تصدیق کے لئے درکار ہیں۔ ••,آپریشنل قبولیت چلانے کے دوران کیا محدود ہے؟,True,False
136,314,17,5a7b906021c2de001afea16d,سافٹ ویئر_ٹیسٹنگ,آپریشنل قبولیت کا استعمال پروڈکٹ ، سروس یا سسٹم کی آپریشنل تیاری (پری ریلیز) کو کوالٹی مینجمنٹ سسٹم کے حصے کے طور پر کرنے کے لئے کیا جاتا ہے۔ او اے ٹی ایک عام قسم کی غیر فنکشنل سافٹ ویئر ٹیسٹنگ ہے ، جو بنیادی طور پر سافٹ ویئر ڈویلپمنٹ اور سافٹ ویئر مینٹیننس منصوبوں میں استعمال ہوتی ہے۔ اس قسم کی ٹیسٹنگ ••سسٹم کی آپریشنل تیاری پر توجہ دیتی ہے جس کی حمایت کی جائے ، اور / یا پروڈکشن ماحول کا حصہ بن جائے۔•• لہذا ، اسے آپریشنل تیاری ٹیسٹنگ (او آر ٹی) یا آپریشنز تیاری اور یقین دہانی (او آر اینڈ اے) ٹیسٹنگ کے نام سے بھی جانا جاتا ہے۔ او اے ٹی کے اندر فنکشنل ٹیسٹنگ ان ٹیسٹوں تک محدود ہے۔,OAT کس چیز پر کم سے کم توجہ مرکوز کرتا ہے؟,True,False
137,314,18,57293bee1d046914007791a5,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر کی ناکامی کی ایک عام وجہ (حقیقی یا سمجھی گئی) اس کے ••دوسرے ایپلی کیشن سافٹ ویئر•• ، آپریٹنگ سسٹم (یا آپریٹنگ سسٹم ورژن ، پرانے یا نئے) کے ساتھ مطابقت کی کمی ہے ، یا ہدف کے ماحول جو اصل سے بہت مختلف ہیں (جیسے ڈیسک ٹاپ پر چلانے کے لئے تیار کردہ ٹرمینل یا جی یو آئی ایپلی کیشن کو اب ویب ایپلی کیشن بننے کی ضرورت ہے ، جسے ویب براؤزر میں رینڈر کرنا چاہئے۔ مثال کے طور پر ، پیچھے کی مطابقت کی کمی کی صورت میں ، یہ اس وجہ سے ہوسکتا ہے کہ پروگرامر صرف ہدف ماحول کے تازہ ترین ورژن پر سافٹ ویئر تیار اور ٹیسٹ کرتے ہیں ، جو تمام صارفین نہیں چل رہے ہیں۔ اس کے نتیجے میں غیر مقصود نتیجہ یہ ہوتا ہے کہ تازہ ترین کام ہدف ماحول کے پہلے ورژن پر کام نہیں کرسکتا ہے ، یا پرانے ہارڈ ویئر پر جو ہدف ماحول کے پہلے ورژن استعمال کرنے کے قابل تھا۔ بعض اوقات اس طرح کے مسائل کو ایک علیحدہ پروگرام ماڈیول یا لائبریری میں فعال طور پر خلاصہ کیا جاسکتا ہے۔,سافٹ ویئر کی خرابی کی سب سے عام وجہ کیا ہے؟,False,False
138,314,18,57293bee1d046914007791a6,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر کی ناکامی کی ایک عام وجہ (حقیقی یا سمجھی گئی) دوسرے ایپلی کیشن سافٹ ویئر ، آپریٹنگ سسٹم (یا آپریٹنگ سسٹم ورژن ، پرانے یا نئے) کے ساتھ اس کی مطابقت کی کمی ہے ، یا ہدف کے ماحول جو اصل سے بہت مختلف ہیں (جیسے ڈیسک ٹاپ پر چلانے کے لئے تیار کردہ ٹرمینل یا جی یو آئی ایپلی کیشن کو اب ویب ایپلی کیشن بننے کی ضرورت ہے ، جسے ویب براؤزر میں رینڈر کرنا چاہئے۔) مثال کے طور پر ، ••پیچھے مطابقت کی کمی•• کی صورت میں ، یہ اس وجہ سے ہوسکتا ہے کہ پروگرامر صرف ہدف ماحول کے تازہ ترین ورژن پر سافٹ ویئر تیار اور ٹیسٹ کرتے ہیں ، جو تمام صارفین نہیں چل رہے ہیں۔ اس کے نتیجے میں غیر مقصود نتیجہ یہ ہوتا ہے کہ تازہ ترین کام ہدف ماحول کے پہلے ورژن پر کام نہیں کرسکتا ہے ، یا پرانے ہارڈ ویئر پر جو ہدف ماحول کے پہلے ورژن استعمال کرنے کے قابل تھا۔ بعض اوقات اس طرح کے مسائل کو ایک علیحدہ پروگرام ماڈیول یا لائبریری میں فعال طور پر خلاصہ کیا جاسکتا ہے۔,سافٹ ویئر بنانے والے عام طور پر کیا کرتے ہیں جب وہ ایسا سافٹ ویئر بناتے ہیں جو ناکامی کا باعث بن سکتا ہے؟,False,False
139,314,18,57293d646aef051400154bd0,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر کی ناکامی کی ایک عام وجہ (حقیقی یا سمجھی گئی) ••دیگر ایپلی کیشن سافٹ ویئر کے ساتھ اس کی مطابقت کی کمی•• ، آپریٹنگ سسٹم (یا آپریٹنگ سسٹم کے ورژن ، پرانے یا نئے) ، یا ہدف کے ماحول ہیں جو اصل سے بہت مختلف ہیں (جیسے ڈیسک ٹاپ پر چلانے کے لئے تیار کردہ ٹرمینل یا جی یو آئی ایپلی کیشن کو اب ویب ایپلی کیشن بننے کی ضرورت ہے ، جسے ویب براؤزر میں رینڈر کرنا چاہئے۔ مثال کے طور پر ، پیچھے کی مطابقت کی کمی کی صورت میں ، یہ اس وجہ سے ہوسکتا ہے کہ پروگرامر صرف ہدف ماحول کے تازہ ترین ورژن پر سافٹ ویئر تیار اور ٹیسٹ کرتے ہیں ، جو تمام صارفین نہیں چل رہے ہیں۔ اس کے نتیجے میں غیر مقصود نتیجہ یہ ہوتا ہے کہ تازہ ترین کام ہدف ماحول کے پہلے ورژن پر کام نہیں کرسکتا ہے ، یا پرانے ہارڈ ویئر پر جو ہدف ماحول کے پہلے ورژن استعمال کرنے کے قابل تھا۔ بعض اوقات اس طرح کے مسائل کو ایک علیحدہ پروگرام ماڈیول یا لائبریری میں فعال طور پر خلاصہ کیا جاسکتا ہے۔,سافٹ ویئر کی خرابی کی سب سے عام وجہ کیا ہے؟,False,False
140,314,18,57293d646aef051400154bd1,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر کی ناکامی کی ایک عام وجہ (حقیقی یا سمجھی گئی) دوسرے ایپلی کیشن سافٹ ویئر ، آپریٹنگ سسٹم (یا آپریٹنگ سسٹم ورژن ، پرانے یا نئے) کے ساتھ اس کی مطابقت کی کمی ہے ، یا ہدف کے ماحول جو اصل سے بہت مختلف ہیں (جیسے ڈیسک ٹاپ پر چلانے کے لئے تیار کردہ ٹرمینل یا جی یو آئی ایپلی کیشن کو اب ویب ایپلی کیشن بننے کی ضرورت ہے ، جسے ویب براؤزر میں رینڈر کرنا چاہئے۔) مثال کے طور پر ، ••پیچھے مطابقت کی کمی•• کے معاملے میں ، یہ اس وجہ سے ہوسکتا ہے کہ پروگرامر صرف ہدف ماحول کے تازہ ترین ورژن پر سافٹ ویئر تیار اور ٹیسٹ کرتے ہیں ، جو تمام صارفین نہیں چل رہے ہیں۔ اس کے نتیجے میں غیر مقصود نتیجہ یہ ہوتا ہے کہ تازہ ترین کام ہدف ماحول کے پہلے ورژن پر کام نہیں کرسکتا ہے ، یا پرانے ہارڈ ویئر پر جو ہدف ماحول کے پہلے ورژن استعمال کرنے کے قابل تھا۔ بعض اوقات اس طرح کے مسائل کو ایک علیحدہ پروگرام ماڈیول یا لائبریری میں فعال طور پر خلاصہ کیا جاسکتا ہے۔,جب یہ جاری کیا جاتا ہے تو سافٹ ویئر میں اکثر کیا کمی ہوتی ہے جو بالآخر غلطیوں کا باعث بن سکتی ہے؟,False,False
141,314,18,57293d646aef051400154bd2,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر کی ناکامی کی ایک عام وجہ (حقیقی یا سمجھی گئی) دوسرے ایپلی کیشن سافٹ ویئر ، آپریٹنگ سسٹم (یا آپریٹنگ سسٹم ورژن ، پرانے یا نئے) ، یا ہدف کے ماحول کے ساتھ اس کی مطابقت کی کمی ہے جو اصل سے بہت مختلف ہے (جیسے ڈیسک ٹاپ پر چلانے کے لئے تیار کردہ ٹرمینل یا جی یو آئی ایپلی کیشن کو اب ویب ایپلی کیشن بننے کی ضرورت ہے ، جسے ویب براؤزر میں رینڈر کرنا چاہئے۔ مثال کے طور پر ، پیچھے کی مطابقت کی کمی کی صورت میں ، یہ اس وجہ سے ہوسکتا ہے کہ پروگرامر ترقی کرتے ہیں اور ••ٹیسٹ سافٹ ویئر صرف ہدف ماحول کے تازہ ترین ورژن پر•• چلاتے ہیں۔ اس کے نتیجے میں غیر متوقع نتیجہ یہ ہوتا ہے کہ تازہ ترین کام ہدف ماحول کے پہلے ورژن پر کام نہیں کرسکتا ہے ، یا پرانے ہارڈ ویئر پر جو ہدف ماحول کے پہلے ورژن استعمال کرنے کے قابل تھا۔ بعض اوقات اس طرح کے مسائل کو ایک علیحدہ پروگرام ماڈیول یا لائبریری میں فعال طور پر خلاصہ کرکے طے کیا جاسکتا ہے۔,پیچھے کی مطابقت ہمیشہ ایک رہائی کے بعد غلطیوں اور کیڑے کی وجہ سے لگتا ہے کیا کرتا ہے؟,False,False
142,314,18,5a7b93f321c2de001afea172,سافٹ ویئر_ٹیسٹنگ,••سافٹ ویئر کی ناکامی•• کی ایک عام وجہ (حقیقی یا سمجھی گئی) دوسرے ایپلی کیشن سافٹ ویئر ، آپریٹنگ سسٹم (یا آپریٹنگ سسٹم ورژن ، پرانے یا نئے) کے ساتھ اس کی مطابقت کا فقدان ہے ، یا ہدف کے ماحول جو اصل سے بہت مختلف ہیں (جیسے ڈیسک ٹاپ پر چلانے کے لئے تیار کردہ ٹرمینل یا جی یو آئی ایپلی کیشن کو اب ویب ایپلی کیشن بننے کی ضرورت ہے ، جسے ویب براؤزر میں رینڈر کرنا چاہئے۔ مثال کے طور پر ، پیچھے کی مطابقت کی کمی کی صورت میں ، یہ اس وجہ سے ہوسکتا ہے کہ پروگرامر صرف ہدف ماحول کے تازہ ترین ورژن پر سافٹ ویئر تیار اور ٹیسٹ کرتے ہیں ، جو تمام صارفین نہیں چل رہے ہیں۔ اس کے نتیجے میں غیر مقصود نتیجہ یہ ہوتا ہے کہ تازہ ترین کام ہدف ماحول کے پہلے ورژن پر کام نہیں کرسکتا ہے ، یا پرانے ہارڈ ویئر پر جو ہدف ماحول کے پہلے ورژن استعمال کرنے کے قابل تھا۔ بعض اوقات اس طرح کے مسائل کو ایک علیحدہ پروگرام ماڈیول یا لائبریری میں۔,دوسرے ایپلی کیشن سافٹ ویئر کے ساتھ مطابقت کی کمی کس چیز کی ایک غیر معمولی وجہ ہے؟,True,False
143,314,18,5a7b93f321c2de001afea173,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر کی ناکامی کی ایک عام وجہ (حقیقی یا سمجھی گئی) دوسرے ایپلی کیشن سافٹ ویئر ، آپریٹنگ سسٹم (یا آپریٹنگ سسٹم ورژن ، پرانے یا نئے) کے ساتھ اس کی مطابقت کی کمی ہے ، یا ہدف کے ماحول جو اصل سے بہت مختلف ہیں (جیسے ڈیسک ٹاپ پر چلانے کے لئے تیار کردہ ٹرمینل یا جی یو آئی ایپلی کیشن کو اب ویب ایپلی کیشن بننے کی ضرورت ہے ، جسے ویب براؤزر میں رینڈر کرنا چاہئے۔ مثال کے طور پر ، پیچھے کی مطابقت کی کمی کی صورت میں ، یہ اس وجہ سے ہوسکتا ہے کہ پروگرامر صرف ••ہدف•• ماحول کے تازہ ترین ورژن پر سافٹ ویئر تیار اور ٹیسٹ کرتے ہیں۔ جس میں تمام صارفین نہیں چل رہے ہیں۔ اس کے نتیجے میں غیر مقصود نتیجہ یہ ہوتا ہے کہ تازہ ترین کام ہدف ماحول کے پہلے ورژن پر کام نہیں کرسکتا ہے ، یا پرانے ہارڈ ویئر پر جو ہدف ماحول کے پہلے ورژن استعمال کرنے کے قابل تھا۔ بعض اوقات اس طرح کے مسائل کو ایک علیحدہ پروگرام ماڈیول یا لائبریری میں فعال طور پر خلاصہ کیا جاسکتا ہے۔,پروگرامر کس ماحول کے ابتدائی ورژن پر سافٹ ویئر تیار کرتے ہیں؟,True,False
144,314,18,5a7b93f321c2de001afea174,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر کی ناکامی کی ایک عام وجہ (حقیقی یا سمجھی گئی) اس کے ••دوسرے ایپلی کیشن سافٹ ویئر•• ، آپریٹنگ سسٹم (یا آپریٹنگ سسٹم ورژن ، پرانے یا نئے) کے ساتھ مطابقت کی کمی ہے ، یا ہدف کے ماحول جو اصل سے بہت مختلف ہیں (جیسے ڈیسک ٹاپ پر چلانے کے لئے تیار کردہ ٹرمینل یا جی یو آئی ایپلی کیشن کو اب ویب ایپلی کیشن بننے کی ضرورت ہے ، جسے ویب براؤزر میں رینڈر کرنا چاہئے۔ مثال کے طور پر ، پیچھے کی مطابقت کی کمی کی صورت میں ، یہ اس وجہ سے ہوسکتا ہے کہ پروگرامر صرف ہدف ماحول کے تازہ ترین ورژن پر سافٹ ویئر تیار اور ٹیسٹ کرتے ہیں ، جو تمام صارفین نہیں چل رہے ہیں۔ اس کے نتیجے میں غیر مقصود نتیجہ یہ ہوتا ہے کہ تازہ ترین کام ہدف ماحول کے پہلے ورژن پر کام نہیں کرسکتا ہے ، یا پرانے ہارڈ ویئر پر جو ہدف ماحول کے پہلے ورژن استعمال کرنے کے قابل تھا۔ بعض اوقات اس طرح کے مسائل کو ایک علیحدہ پروگرام ماڈیول یا لائبریری میں فعال طور پر خلاصہ کیا جاسکتا ہے۔,سافٹ ویئر کی خرابی کی سب سے غیر معمولی وجہ کیا ہے؟,True,False
145,314,18,5a7b93f321c2de001afea175,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر کی ناکامی کی ایک عام وجہ (حقیقی یا سمجھی گئی) دوسرے ایپلی کیشن سافٹ ویئر ، آپریٹنگ سسٹم (یا آپریٹنگ سسٹم ورژن ، پرانے یا نئے) کے ساتھ اس کی مطابقت کی کمی ہے ، یا ہدف کے ماحول جو ••اصل•• سے بہت مختلف ہیں (جیسے ڈیسک ٹاپ پر چلانے کے لئے تیار کردہ ٹرمینل یا جی یو آئی ایپلی کیشن کو اب ویب ایپلی کیشن بننے کی ضرورت ہے ، جسے ویب براؤزر میں رینڈر کرنا چاہئے۔ مثال کے طور پر ، پیچھے کی مطابقت کی کمی کی صورت میں ، یہ اس وجہ سے ہوسکتا ہے کہ پروگرامر صرف ہدف ماحول کے تازہ ترین ورژن پر سافٹ ویئر تیار اور ٹیسٹ کرتے ہیں ، جو تمام صارفین نہیں چل رہے ہیں۔ اس کے نتیجے میں غیر مقصود نتیجہ یہ ہوتا ہے کہ تازہ ترین کام ہدف ماحول کے پہلے ورژن پر کام نہیں کرسکتا ہے ، یا پرانے ہارڈ ویئر پر جو ہدف ماحول کے پہلے ورژن استعمال کرنے کے قابل تھا۔ بعض اوقات اس طرح کے مسائل کو فعال طور پر الگ الگ آپریٹنگ سسٹم کی فعالیت کو ماڈیول یا پروگرام لائبریری میں ٹھیک کیا جاسکتا ہے۔,ہدف کے ماحول شاذ و نادر ہی کیا سے بہت مختلف ہیں؟,True,False
146,314,19,572940641d046914007791f9,سافٹ ویئر_ٹیسٹنگ,••ریگریشن ٹیسٹنگ•• ایک بڑی کوڈ تبدیلی کے بعد نقائص تلاش کرنے پر مرکوز ہے۔ خاص طور پر ، یہ سافٹ ویئر ریگریشن کو بے نقاب کرنے کی کوشش کرتا ہے ، جیسے خراب یا کھوئے ہوئے خصوصیات ، بشمول پرانے کیڑے جو واپس آئے ہیں۔ اس طرح کی ریگریشن اس وقت ہوتی ہے جب سافٹ ویئر کی فعالیت جو پہلے صحیح طریقے سے کام کر رہی تھی ، ارادے کے مطابق کام کرنا چھوڑ دیتی ہے۔ عام طور پر ، ریگریشن پروگرام کی تبدیلیوں کے غیر مقصود نتیجہ کے طور پر ہوتی ہے ، جب سافٹ ویئر کا نیا تیار کردہ حصہ پہلے سے موجود کوڈ سے ٹکرا جاتا ہے۔ ریگریشن ٹیسٹنگ کے عام طریقوں میں ٹیسٹ کیسز کے پچھلے سیٹ کو دوبارہ چلانا اور یہ چیک کرنا شامل ہے۔ جانچ کی گہرائی ریلیز کے عمل میں مرحلے اور شامل کردہ خصوصیات کے خطرے پر منحصر ہے۔ وہ یا تو مکمل ہوسکتے ہیں ، ریلیز میں دیر سے شامل کردہ تبدیلیوں کے لئے یا خطرناک سمجھا جاتا ہے ، یا بہت ہی سطحی ہوسکتے ہیں ، ہر خصوصیت پر مثبت ٹیسٹ پر مشتمل ہوتا ہے ، اگر تبدیلیاں ریلیز میں ابتدائی ہیں یا کم خطرہ سمجھا جاتا ہے۔ ریگریشن ٹیسٹنگ عام طور پر تجارتی سافٹ ویئر ڈویلپمنٹ میں سب سے بڑی جانچ کی کوشش ہے ، کیونکہ پہلے کے سافٹ ویئر کی خصوصیات میں متعدد تفصیلات کی جانچ پڑتال کی جاتی ہے ، اور یہاں تک کہ نیا سافٹ ویئر تیار کیا جاسکتا ہے جبکہ کچھ پرانے ٹیسٹ کیسز کا استعمال کرتے ہوئے نئے ڈیزائن کے حصوں کی جانچ کی تصدیق کی جاتی ہے۔,کوڈ میں ایک بار تبدیلی ہونے کے بعد نقائص تلاش کرنا کیا کہا جاتا ہے؟,False,False
147,314,19,572940641d046914007791fa,سافٹ ویئر_ٹیسٹنگ,"ریگریشن ٹیسٹنگ ایک بڑی کوڈ تبدیلی کے بعد نقائص تلاش کرنے پر مرکوز ہے۔ خاص طور پر ، یہ سافٹ ویئر ریگریشن کو بے نقاب کرنے کی کوشش کرتا ہے ، جیسے خراب یا کھوئے ہوئے خصوصیات ، بشمول پرانے کیڑے جو واپس آئے ہیں۔ اس طرح کی ریگریشن اس وقت ہوتی ہے جب سافٹ ویئر کی فعالیت جو پہلے صحیح طریقے سے کام کر رہی تھی ، ""منصوبہ کے مطابق کام کرنا چھوڑ دیتی ہے۔ عام طور پر ، ریگریشن پروگرام کی تبدیلیوں کے غیر مقصود نتیجہ کے طور پر ہوتی ہے ، جب سافٹ ویئر کا نیا تیار کردہ حصہ پہلے سے موجود کوڈ سے ٹکرا جاتا ہے۔ ریگریشن ٹیسٹنگ کے عام طریقوں میں ٹیسٹ کیسز کے پچھلے سیٹ کو دوبارہ چلانا اور یہ چیک کرنا شامل ہے۔ جانچ کی گہرائی ریلیز کے عمل میں مرحلے اور شامل کردہ خصوصیات کے خطرے پر منحصر ہے۔ وہ یا تو مکمل ہوسکتے ہیں ، ریلیز میں دیر سے شامل کردہ تبدیلیوں کے لئے یا خطرناک سمجھا جاتا ہے ، یا بہت ہی سطحی ہوسکتے ہیں ، ہر خصوصیت پر مثبت ٹیسٹ پر مشتمل ہوتا ہے ، اگر تبدیلیاں ریلیز میں ابتدائی ہیں یا کم خطرہ سمجھا جاتا ہے۔ ریگریشن ٹیسٹنگ عام طور پر تجارتی سافٹ ویئر ڈویلپمنٹ میں سب سے بڑی جانچ کی کوشش ہے ، کیونکہ پہلے کے سافٹ ویئر کی خصوصیات میں متعدد تفصیلات کی جانچ پڑتال کی جاتی ہے ، اور یہاں تک کہ نیا سافٹ ویئر تیار کیا جاسکتا ہے جبکہ کچھ پرانے ٹیسٹ کیسز کا استعمال کرتے ہوئے نئے ڈیزائن کے حصوں کی جانچ کی تصدیق کی جاتی ہے۔",کوڈ میں ایک بڑی تبدیلی کے بعد سافٹ ویئر کے ساتھ کیا ہوتا ہے جو رجعت کی طرف جاتا ہے؟,False,True
148,314,19,572940641d046914007791fb,سافٹ ویئر_ٹیسٹنگ,ریگریشن ٹیسٹنگ ایک بڑی کوڈ تبدیلی کے بعد نقائص تلاش کرنے پر مرکوز ہے۔ خاص طور پر ، یہ سافٹ ویئر ریگریشن کو بے نقاب کرنے کی کوشش کرتا ہے ، جیسے خراب یا کھوئے ہوئے خصوصیات ، بشمول پرانے کیڑے جو واپس آئے ہیں۔ اس طرح کی ریگریشن اس وقت ہوتی ہے جب سافٹ ویئر کی فعالیت جو پہلے صحیح طریقے سے کام کر رہی تھی ، مقصد کے مطابق کام کرنا چھوڑ دیتی ہے۔ عام طور پر ، ریگریشن پروگرام کی تبدیلیوں کے غیر مقصود نتیجہ کے طور پر ہوتی ہے ، جب سافٹ ویئر کا نیا تیار کردہ حصہ پہلے سے موجود کوڈ سے ٹکرا جاتا ہے۔ ریگریشن ٹیسٹنگ کے عام طریقوں میں ••ٹیسٹ کیسز کے پچھلے سیٹ کو دوبارہ چلانا•• اور یہ چیک کرنا شامل ہے۔ جانچ کی گہرائی ریلیز کے عمل میں مرحلے اور شامل کردہ خصوصیات کے خطرے پر منحصر ہے۔ وہ یا تو مکمل ہوسکتے ہیں ، ریلیز میں دیر سے شامل کردہ تبدیلیوں کے لئے یا خطرناک سمجھا جاتا ہے ، یا بہت ہی سطحی ہوسکتے ہیں ، ہر خصوصیت پر مثبت ٹیسٹ پر مشتمل ہوتا ہے ، اگر تبدیلیاں ریلیز میں ابتدائی ہیں یا کم خطرہ سمجھا جاتا ہے۔ ریگریشن ٹیسٹنگ عام طور پر تجارتی سافٹ ویئر ڈویلپمنٹ میں سب سے بڑی جانچ کی کوشش ہے ، کیونکہ پہلے کے سافٹ ویئر کی خصوصیات میں متعدد تفصیلات کی جانچ پڑتال کی جاتی ہے ، اور یہاں تک کہ نیا سافٹ ویئر تیار کیا جاسکتا ہے جبکہ کچھ پرانے ٹیسٹ کیسز کا استعمال کرتے ہوئے نئے ڈیزائن کے حصوں کی جانچ کی تصدیق کی جاتی ہے۔,ریگریشن ٹیسٹ کے دوران استعمال ہونے والا ایک عام طریقہ کیا ہے؟,False,False
149,314,19,572940641d046914007791fc,سافٹ ویئر_ٹیسٹنگ,ریگریشن ٹیسٹنگ ایک بڑی کوڈ تبدیلی کے بعد نقائص تلاش کرنے پر مرکوز ہے۔ خاص طور پر ، یہ سافٹ ویئر ریگریشن کو بے نقاب کرنے کی کوشش کرتا ہے ، جیسے خراب یا کھوئے ہوئے خصوصیات ، بشمول پرانے کیڑے جو واپس آئے ہیں۔ اس طرح کی ریگریشن اس وقت ہوتی ہے جب سافٹ ویئر کی فعالیت جو پہلے صحیح طریقے سے کام کر رہی تھی ، مقصد کے مطابق کام کرنا چھوڑ دیتی ہے۔ عام طور پر ، ریگریشن پروگرام کی تبدیلیوں کے غیر مقصود نتیجہ کے طور پر ہوتی ہے ، جب سافٹ ویئر کا نیا تیار کردہ حصہ پہلے سے موجود کوڈ سے ٹکرا جاتا ہے۔ ریگریشن ٹیسٹنگ کے عام طریقوں میں ٹیسٹ کیسز کے پچھلے سیٹ کو دوبارہ چلانا اور یہ چیک کرنا شامل ہے۔ جانچ کی گہرائی ••ریلیز کے عمل میں مرحلے اور اضافی خصوصیات کے خطرے•• پر منحصر ہے۔ وہ یا تو مکمل ہوسکتے ہیں ، ریلیز میں دیر سے شامل ہونے والی تبدیلیوں کے لئے یا خطرناک سمجھا جاتا ہے ، یا بہت ہی سطحی ہوسکتے ہیں ، ہر خصوصیت پر مثبت ٹیسٹ پر مشتمل ہوتا ہے ، اگر تبدیلیاں ریلیز میں ابتدائی ہیں یا کم خطرہ سمجھا جاتا ہے۔ ریگریشن ٹیسٹنگ عام طور پر تجارتی سافٹ ویئر ڈویلپمنٹ میں سب سے بڑی جانچ کی کوشش ہے ، کیونکہ پہلے کے سافٹ ویئر کی خصوصیات میں متعدد تفصیلات کی جانچ پڑتال کی جاتی ہے ، اور یہاں تک کہ نیا سافٹ ویئر تیار کیا جاسکتا ہے جبکہ کچھ پرانے ٹیسٹ کیسز کا استعمال کرتے ہوئے نئے ڈیزائن کے حصوں کی جانچ کی تصدیق کی جاتی ہے۔,کیا تعین کرتا ہے کہ ایک ٹیسٹر ریگریشن کے دوران کتنا گہرا جائے گا؟,False,False
150,314,19,572940641d046914007791fd,سافٹ ویئر_ٹیسٹنگ,ریگریشن ٹیسٹنگ ایک بڑی کوڈ تبدیلی کے بعد نقائص تلاش کرنے پر مرکوز ہے۔ خاص طور پر ، یہ سافٹ ویئر ریگریشن کو بے نقاب کرنے کی کوشش کرتا ہے ، جیسے خراب یا کھوئے ہوئے خصوصیات ، بشمول پرانے کیڑے جو واپس آئے ہیں۔ اس طرح کی ریگریشن اس وقت ہوتی ہے جب سافٹ ویئر کی فعالیت جو پہلے صحیح طریقے سے کام کر رہی تھی ، مقصد کے مطابق کام کرنا چھوڑ دیتی ہے۔ عام طور پر ، ریگریشن پروگرام کی تبدیلیوں کے غیر مقصود نتیجہ کے طور پر ہوتی ہے ، جب سافٹ ویئر کا نیا تیار کردہ حصہ پہلے سے موجود کوڈ سے ٹکرا جاتا ہے۔ ریگریشن ٹیسٹنگ کے عام طریقوں میں ٹیسٹ کیسز کے پچھلے سیٹ کو دوبارہ چلانا اور یہ چیک کرنا شامل ہے۔ جانچ کی گہرائی ریلیز کے عمل میں مرحلے اور شامل کردہ خصوصیات کے خطرے پر منحصر ہے۔ وہ یا تو مکمل ہوسکتے ہیں ، ریلیز میں دیر سے شامل کردہ تبدیلیوں کے لئے یا خطرناک سمجھا جاتا ہے ، یا بہت ہی سطحی ہوسکتے ہیں ، ہر خصوصیت پر مثبت ٹیسٹ پر مشتمل ہوتا ہے ، اگر تبدیلیاں ریلیز میں ابتدائی ہیں یا کم خطرہ سمجھا جاتا ہے۔ ریگریشن ٹیسٹنگ ••عام طور پر تجارتی سافٹ ویئر ڈویلپمنٹ میں سب سے بڑی جانچ کی کوشش ہے•• ، کیونکہ پہلے کے سافٹ ویئر کی خصوصیات میں متعدد تفصیلات کی جانچ پڑتال کی جاتی ہے ، اور یہاں تک کہ نئے سافٹ ویئر کو کچھ پرانے ٹیسٹ کیسز کا استعمال کرتے ہوئے تیار کیا جاسکتا ہے تاکہ پہلے کی فعالیت کو یقینی بنایا جاسکے۔,اگر ریگریشن ٹیسٹنگ کے ساتھ سافٹ ویئر کی ابتدائی رہائی کے دوران تبدیلیوں کی ضرورت ہو تو اس کا ٹیم پر کتنا اثر پڑتا ہے جیسا کہ دوسرے ٹیسٹنگ سے متعلق ہے؟,False,False
151,314,19,5a7b95b321c2de001afea17a,سافٹ ویئر_ٹیسٹنگ,••ریگریشن ٹیسٹنگ•• ایک بڑی کوڈ تبدیلی کے بعد نقائص تلاش کرنے پر مرکوز ہے۔ خاص طور پر ، یہ سافٹ ویئر ریگریشن کو بے نقاب کرنے کی کوشش کرتا ہے ، جیسے خراب یا کھوئے ہوئے خصوصیات ، بشمول پرانے کیڑے جو واپس آئے ہیں۔ اس طرح کی ریگریشن اس وقت ہوتی ہے جب سافٹ ویئر کی فعالیت جو پہلے صحیح طریقے سے کام کر رہی تھی ، ارادے کے مطابق کام کرنا چھوڑ دیتی ہے۔ عام طور پر ، ریگریشن پروگرام کی تبدیلیوں کے غیر مقصود نتیجہ کے طور پر ہوتی ہے ، جب سافٹ ویئر کا نیا تیار کردہ حصہ پہلے سے موجود کوڈ سے ٹکرا جاتا ہے۔ ریگریشن ٹیسٹنگ کے عام طریقوں میں ٹیسٹ کیسز کے پچھلے سیٹ کو دوبارہ چلانا اور یہ چیک کرنا شامل ہے۔ جانچ کی گہرائی ریلیز کے عمل میں مرحلے اور شامل کردہ خصوصیات کے خطرے پر منحصر ہے۔ وہ یا تو مکمل ہوسکتے ہیں ، ریلیز میں دیر سے شامل کردہ تبدیلیوں کے لئے یا خطرناک سمجھا جاتا ہے ، یا بہت ہی سطحی ہوسکتے ہیں ، ہر خصوصیت پر مثبت ٹیسٹ پر مشتمل ہوتا ہے ، اگر تبدیلیاں ریلیز میں ابتدائی ہیں یا کم خطرہ سمجھا جاتا ہے۔ ریگریشن ٹیسٹنگ عام طور پر تجارتی سافٹ ویئر ڈویلپمنٹ میں سب سے بڑی جانچ کی کوشش ہے ، کیونکہ پہلے کے سافٹ ویئر کی خصوصیات میں متعدد تفصیلات کی جانچ پڑتال کی جاتی ہے ، اور یہاں تک کہ نیا سافٹ ویئر تیار کیا جاسکتا ہے جبکہ کچھ پرانے ٹیسٹ کیسز کا استعمال کرتے ہوئے نئے ڈیزائن کے حصوں کی جانچ کی تصدیق کی جاتی ہے۔,معمولی کوڈ کی تبدیلیوں کے بعد نقائص تلاش کرنے کے لئے کس قسم کی جانچ کا استعمال کیا جاتا ہے؟,True,False
152,314,19,5a7b95b321c2de001afea17b,سافٹ ویئر_ٹیسٹنگ,ریگریشن ٹیسٹنگ ایک بڑی کوڈ تبدیلی کے بعد نقائص تلاش کرنے پر مرکوز ہے۔ خاص طور پر ، یہ سافٹ ویئر ریگریشن کو بے نقاب کرنے کی کوشش کرتا ہے ، ••جیسے خراب یا کھوئے ہوئے خصوصیات•• ، بشمول پرانے کیڑے جو واپس آئے ہیں۔ اس طرح کی ریگریشن اس وقت ہوتی ہے جب سافٹ ویئر کی فعالیت جو پہلے صحیح طریقے سے کام کر رہی تھی ، مقصد کے مطابق کام کرنا چھوڑ دیتی ہے۔ عام طور پر ، ریگریشن پروگرام کی تبدیلیوں کے غیر مقصود نتیجہ کے طور پر ہوتی ہے ، جب سافٹ ویئر کا نیا تیار کردہ حصہ پہلے سے موجود کوڈ سے ٹکرا جاتا ہے۔ ریگریشن ٹیسٹنگ کے عام طریقوں میں ٹیسٹ کیسز کے پچھلے سیٹ کو دوبارہ چلانا اور یہ چیک کرنا شامل ہے۔ جانچ کی گہرائی ریلیز کے عمل میں مرحلے اور شامل کردہ خصوصیات کے خطرے پر منحصر ہے۔ وہ یا تو مکمل ہوسکتے ہیں ، ریلیز میں دیر سے شامل کردہ تبدیلیوں کے لئے یا خطرناک سمجھا جاتا ہے ، یا بہت ہی سطحی ہوسکتے ہیں ، ہر خصوصیت پر مثبت ٹیسٹ پر مشتمل ہوتا ہے ، اگر تبدیلیاں ریلیز میں ابتدائی ہیں یا کم خطرہ سمجھا جاتا ہے۔ ریگریشن ٹیسٹنگ عام طور پر تجارتی سافٹ ویئر ڈویلپمنٹ میں سب سے بڑی جانچ کی کوشش ہے ، کیونکہ پہلے کے سافٹ ویئر کی خصوصیات میں متعدد تفصیلات کی جانچ پڑتال کی جاتی ہے ، اور یہاں تک کہ نیا سافٹ ویئر تیار کیا جاسکتا ہے جبکہ کچھ پرانے ٹیسٹ کیسز کا استعمال کرتے ہوئے نئے ڈیزائن کے حصوں کی جانچ کی تصدیق کی جاتی ہے۔,ریگریشن ٹیسٹنگ بحالی سافٹ ویئر ریگریشن کو کس طرح درجہ بندی کرتی ہے؟,True,False
153,314,19,5a7b95b321c2de001afea17c,سافٹ ویئر_ٹیسٹنگ,ریگریشن ٹیسٹنگ ایک بڑی کوڈ تبدیلی کے بعد نقائص تلاش کرنے پر توجہ مرکوز کرتی ہے۔ خاص طور پر ، یہ سافٹ ویئر ریگریشن کو بے نقاب کرنے کی کوشش کرتا ہے ، جیسے خراب یا کھوئے ہوئے خصوصیات ، بشمول پرانے کیڑے جو واپس آئے ہیں۔ اس طرح کی ریگریشن اس وقت ہوتی ہے جب سافٹ ویئر کی فعالیت جو پہلے صحیح طریقے سے کام کر رہی تھی ، مقصد کے مطابق کام کرنا چھوڑ دیتی ہے۔ عام طور پر ، ریگریشن ••پروگرام تبدیلیوں•• کے غیر مقصود نتیجہ کے طور پر ہوتی ہے ، جب سافٹ ویئر کا نیا تیار کردہ حصہ پہلے سے موجود کوڈ سے ٹکرا جاتا ہے۔ ریگریشن ٹیسٹنگ کے عام طریقوں میں ٹیسٹ کیسز کے پچھلے سیٹ کو دوبارہ چلانا اور یہ چیک کرنا شامل ہے۔ جانچ کی گہرائی ریلیز کے عمل میں مرحلے اور شامل کردہ خصوصیات کے خطرے پر منحصر ہے۔ وہ یا تو مکمل ہوسکتے ہیں ، ریلیز میں دیر سے شامل کردہ تبدیلیوں کے لئے یا خطرناک سمجھا جاتا ہے ، یا بہت ہی سطحی ہوسکتے ہیں ، ہر خصوصیت پر مثبت ٹیسٹ پر مشتمل ہوتا ہے ، اگر تبدیلیاں ریلیز میں ابتدائی ہیں یا کم خطرہ سمجھا جاتا ہے۔ ریگریشن ٹیسٹنگ عام طور پر تجارتی سافٹ ویئر ڈویلپمنٹ میں سب سے بڑی جانچ کی کوشش ہے ، کیونکہ پہلے کے سافٹ ویئر کی خصوصیات میں متعدد تفصیلات کی جانچ پڑتال کی جاتی ہے ، اور یہاں تک کہ نیا سافٹ ویئر تیار کیا جاسکتا ہے جبکہ کچھ پرانے ٹیسٹ کیسز کا استعمال کرتے ہوئے نئے ڈیزائن کے حصوں کی جانچ کی تصدیق کی جاتی ہے۔,عام طور پر رجعتیں کس چیز کے مطلوبہ نتیجے کے طور پر ہوتی ہیں؟,True,False
154,314,19,5a7b95b321c2de001afea17d,سافٹ ویئر_ٹیسٹنگ,ریگریشن ٹیسٹنگ ایک بڑی کوڈ تبدیلی کے بعد نقائص تلاش کرنے پر توجہ مرکوز کرتی ہے۔ خاص طور پر ، یہ سافٹ ویئر ریگریشن کو بے نقاب کرنے کی کوشش کرتا ہے ، جیسے خراب یا کھوئے ہوئے خصوصیات ، بشمول پرانے کیڑے جو واپس آئے ہیں۔ اس طرح کی ریگریشن اس وقت ہوتی ہے جب سافٹ ویئر کی فعالیت جو پہلے صحیح طریقے سے کام کر رہی تھی ، مقصد کے مطابق کام کرنا چھوڑ دیتی ہے۔ عام طور پر ، ریگریشن پروگرام کی تبدیلیوں کے غیر مقصود نتیجہ کے طور پر ہوتی ہے ، جب سافٹ ویئر کا نیا تیار کردہ حصہ پہلے سے موجود کوڈ سے ٹکرا جاتا ہے۔ ریگریشن ٹیسٹنگ کے عام طریقوں میں ••ٹیسٹ کیسز کے پچھلے سیٹ کو دوبارہ چلانا اور چیک کرنا شامل ہے۔•• جانچ کی گہرائی ریلیز کے عمل میں مرحلے اور شامل کردہ خصوصیات کے خطرے پر منحصر ہے۔ وہ یا تو مکمل ہوسکتے ہیں ، ریلیز میں دیر سے شامل کردہ تبدیلیوں کے لئے یا خطرناک سمجھا جاتا ہے ، یا بہت ہی سطحی ہوسکتے ہیں ، ہر خصوصیت پر مثبت ٹیسٹ پر مشتمل ہوتا ہے ، اگر تبدیلیاں ریلیز میں ابتدائی ہیں یا کم خطرہ سمجھا جاتا ہے۔ ریگریشن ٹیسٹنگ عام طور پر تجارتی سافٹ ویئر ڈویلپمنٹ میں سب سے بڑی جانچ کی کوشش ہے ، کیونکہ پہلے کے سافٹ ویئر کی خصوصیات میں متعدد تفصیلات کی جانچ پڑتال کی جاتی ہے ، اور یہاں تک کہ نیا سافٹ ویئر تیار کیا جاسکتا ہے جبکہ کچھ پرانے ٹیسٹ کیسز کا استعمال کرتے ہوئے نئے ڈیزائن کے حصوں کی جانچ کی تصدیق کی جاتی ہے۔,ریگریشن کوڈنگ کے عام طریقے کیا ہیں؟,True,False
155,314,19,5a7b95b321c2de001afea17e,سافٹ ویئر_ٹیسٹنگ,ریگریشن ٹیسٹنگ ایک بڑی کوڈ تبدیلی کے بعد نقائص تلاش کرنے پر مرکوز ہے۔ خاص طور پر ، یہ سافٹ ویئر ریگریشن کو بے نقاب کرنے کی کوشش کرتا ہے ، جیسے خراب یا کھوئے ہوئے خصوصیات ، بشمول پرانے کیڑے جو واپس آئے ہیں۔ اس طرح کی ریگریشن اس وقت ہوتی ہے جب سافٹ ویئر کی فعالیت جو پہلے صحیح طریقے سے کام کر رہی تھی ، مقصد کے مطابق کام کرنا چھوڑ دیتی ہے۔ عام طور پر ، ریگریشن پروگرام کی تبدیلیوں کے غیر مقصود نتیجہ کے طور پر ہوتی ہے ، جب سافٹ ویئر کا نیا تیار کردہ حصہ پہلے سے موجود کوڈ سے ٹکرا جاتا ہے۔ ریگریشن ٹیسٹنگ کے عام طریقوں میں ٹیسٹ کیسز کے پچھلے سیٹ کو دوبارہ چلانا اور یہ چیک کرنا شامل ہے۔ جانچ کی گہرائی ریلیز کے عمل میں مرحلے اور شامل کردہ خصوصیات کے خطرے پر منحصر ہے۔ وہ یا تو مکمل ہوسکتے ہیں ، ریلیز میں دیر سے شامل کردہ تبدیلیوں کے لئے یا خطرناک سمجھا جاتا ہے ، یا بہت ہی سطحی ہوسکتے ہیں ، ہر خصوصیت پر مثبت ٹیسٹ پر مشتمل ہوتا ہے ، اگر تبدیلیاں ریلیز میں ابتدائی ہیں یا کم خطرہ سمجھا جاتا ہے۔ ••ریگریشن ٹیسٹنگ•• عام طور پر تجارتی سافٹ ویئر ڈویلپمنٹ میں سب سے بڑی جانچ کی کوشش ہے ، کیونکہ پہلے کے سافٹ ویئر کی خصوصیات میں متعدد تفصیلات کی جانچ پڑتال کی جاتی ہے ، اور یہاں تک کہ نیا سافٹ ویئر تیار کیا جاسکتا ہے جبکہ کچھ پرانے ٹیسٹ کیسز کا استعمال کرتے ہوئے نئے ڈیزائن کے حصوں کی جانچ کی تصدیق کی جاتی ہے۔,ذاتی سافٹ ویئر ڈویلپمنٹ میں عام طور پر سب سے بڑی جانچ کی کوشش کیا ہے؟,True,False
156,314,20,5729410f6aef051400154c04,سافٹ ویئر_ٹیسٹنگ,••بیٹا ٹیسٹنگ•• الفا ٹیسٹنگ کے بعد آتی ہے اور اسے بیرونی صارف کی قبولیت کی جانچ کی ایک شکل سمجھا جاسکتا ہے۔ سافٹ ویئر کے ورژن ، جسے بیٹا ورژن کے نام سے جانا جاتا ہے ، کو پروگرامنگ ٹیم کے باہر محدود سامعین کے لئے جاری کیا جاتا ہے جسے بیٹا ٹیسٹرز کے نام سے جانا جاتا ہے۔ سافٹ ویئر لوگوں کے گروپوں کے لئے جاری کیا جاتا ہے تاکہ مزید جانچ سے یہ یقینی بنایا جاسکے کہ مصنوع میں کم غلطیاں یا کیڑے ہیں۔ بیٹا ورژن مستقبل کے صارفین کی زیادہ سے زیادہ تعداد میں فیڈ بیک فیلڈ کو بڑھانے اور پہلے ، توسیع شدہ یا یہاں تک کہ غیر معینہ مدت کے لئے قدر فراہم کرنے کے لئے کھلی عوام کے لئے دستیاب کیا جاسکتا ہے۔ [ حوالہ کی ضرورت ہے ],سافٹ ویئر کی ترقی اور جانچ میں الفا مرحلے کے بعد عام طور پر کیا آتا ہے؟,False,False
157,314,20,5729410f6aef051400154c05,سافٹ ویئر_ٹیسٹنگ,بیٹا ٹیسٹنگ الفا ٹیسٹنگ کے بعد آتی ہے اور اسے بیرونی صارف کی قبولیت کی جانچ کی ایک شکل سمجھا جاسکتا ہے۔ سافٹ ویئر کے ورژن ، جسے بیٹا ورژن کے نام سے جانا جاتا ہے ، کو ••پروگرامنگ سے باہر محدود سامعین•• ٹیم کے لئے جاری کیا جاتا ہے جسے بیٹا ٹیسٹرز کے نام سے جانا جاتا ہے۔ سافٹ ویئر لوگوں کے گروپوں کے لئے جاری کیا جاتا ہے تاکہ مزید جانچ سے یہ یقینی بنایا جاسکے کہ مصنوع میں کم غلطیاں یا کیڑے ہیں۔ بیٹا ورژن مستقبل کے صارفین کی زیادہ سے زیادہ تعداد میں فیڈ بیک فیلڈ کو بڑھانے اور پہلے ، توسیع شدہ یا یہاں تک کہ غیر معینہ مدت کے لئے قدر فراہم کرنے کے لئے کھلی عوام کے لئے دستیاب کیا جاسکتا ہے۔ [ حوالہ کی ضرورت ہے ],بیٹا ٹیسٹنگ کس کے لئے جاری کی جاتی ہے؟,False,False
158,314,20,5729410f6aef051400154c06,سافٹ ویئر_ٹیسٹنگ,بیٹا ٹیسٹنگ الفا ٹیسٹنگ کے بعد آتی ہے اور اسے بیرونی صارف کی قبولیت کی جانچ کی ایک شکل سمجھا جاسکتا ہے۔ سافٹ ویئر کے ورژن ، جسے بیٹا ورژن کے نام سے جانا جاتا ہے ، کو پروگرامنگ ٹیم کے باہر محدود سامعین کے لئے جاری کیا جاتا ہے جسے بیٹا ٹیسٹرز کے نام سے جانا جاتا ہے۔ سافٹ ویئر لوگوں کے گروپوں کے لئے جاری کیا جاتا ہے تاکہ مزید جانچ سے یہ یقینی بنایا جاسکے کہ مصنوع میں کم غلطیاں یا کیڑے ہیں۔ بیٹا ورژن کو مستقبل کے صارفین کی زیادہ سے زیادہ تعداد میں فیڈ بیک فیلڈ کو بڑھانے اور پہلے ، طویل یا یہاں تک کہ غیر معینہ مدت کے لئے (••مستقل بیٹا••) کے لئے کھلی عوام کے لئے دستیاب کیا جاسکتا ہے۔ [ حوالہ کی ضرورت ہے ],جب ایک عوامی ٹیسٹ غیر معینہ مدت تک جاری رہتا ہے تو اسے کیا کہا جاتا ہے؟,False,False
159,314,20,5a7b96bd21c2de001afea184,سافٹ ویئر_ٹیسٹنگ,••بیٹا ٹیسٹنگ•• الفا ٹیسٹنگ کے بعد آتی ہے اور اسے بیرونی صارف کی قبولیت کی جانچ کی ایک شکل سمجھا جاسکتا ہے۔ سافٹ ویئر کے ورژن ، جسے بیٹا ورژن کے نام سے جانا جاتا ہے ، کو پروگرامنگ ٹیم کے باہر محدود سامعین کے لئے جاری کیا جاتا ہے جسے بیٹا ٹیسٹرز کے نام سے جانا جاتا ہے۔ سافٹ ویئر لوگوں کے گروپوں کے لئے جاری کیا جاتا ہے تاکہ مزید جانچ سے یہ یقینی بنایا جاسکے کہ مصنوع میں کم غلطیاں یا کیڑے ہیں۔ بیٹا ورژن مستقبل کے صارفین کی زیادہ سے زیادہ تعداد میں فیڈ بیک فیلڈ کو بڑھانے اور پہلے ، توسیع شدہ یا یہاں تک کہ غیر معینہ مدت کے لئے قدر فراہم کرنے کے لئے کھلی عوام کے لئے دستیاب کیا جاسکتا ہے۔ [ حوالہ کی ضرورت ہے ],الفا ٹیسٹنگ سے پہلے کس قسم کا ٹیسٹنگ ہوتا ہے؟,True,False
160,314,20,5a7b96bd21c2de001afea185,سافٹ ویئر_ٹیسٹنگ,بیٹا ٹیسٹنگ الفا ٹیسٹنگ کے بعد آتی ہے اور اسے بیرونی صارف کی قبولیت کی جانچ کی ایک شکل سمجھا جاسکتا ہے۔ سافٹ ویئر کے ورژن ، جسے بیٹا ورژن کے نام سے جانا جاتا ہے ، کو پروگرامنگ ٹیم کے باہر محدود سامعین کے لئے جاری کیا جاتا ہے جسے ••بیٹا ٹیسٹر•• کہا جاتا ہے۔ سافٹ ویئر لوگوں کے گروپوں کے لئے جاری کیا جاتا ہے تاکہ مزید جانچ سے یہ یقینی بنایا جاسکے کہ مصنوع میں کم غلطیاں یا کیڑے ہیں۔ بیٹا ورژن مستقبل کے صارفین کی زیادہ سے زیادہ تعداد میں فیڈ بیک فیلڈ کو بڑھانے اور پہلے ، طویل یا یہاں تک کہ غیر معینہ مدت کے لئے قدر فراہم کرنے کے لئے کھلی عوام کے لئے دستیاب کیا جاسکتا ہے۔ [ حوالہ کی ضرورت ہے ],بیٹا ورژن ایک وسیع سامعین کے لئے جاری کیا جاتا ہے کیا کے طور پر جانا جاتا ہے؟,True,False
161,314,20,5a7b96bd21c2de001afea186,سافٹ ویئر_ٹیسٹنگ,بیٹا ٹیسٹنگ الفا ٹیسٹنگ کے بعد آتی ہے اور اسے بیرونی صارف کی قبولیت کی جانچ کی ایک شکل سمجھا جاسکتا ہے۔ سافٹ ویئر کے ورژن ، جسے بیٹا ورژن کے نام سے جانا جاتا ہے ، کو پروگرامنگ ٹیم کے باہر محدود سامعین کے لئے جاری کیا جاتا ہے جسے بیٹا ٹیسٹرز کے نام سے جانا جاتا ہے۔ سافٹ ویئر لوگوں کے گروپوں کے لئے جاری کیا جاتا ہے تاکہ مزید جانچ سے یہ یقینی بنایا جاسکے کہ مصنوع میں کم غلطیاں یا کیڑے ہیں۔ بیٹا ورژن کو کھلی عوام کے لئے دستیاب کیا جاسکتا ہے ••مستقبل کے صارفین کی زیادہ سے زیادہ تعداد میں فیڈ بیک فیلڈ کو بڑھانے اور پہلے قدر فراہم کرنے کے لئے•• ، ایک طویل یا یہاں تک کہ غیر معینہ مدت کے لئے (مستقل بیٹا) ۔ [ حوالہ کی ضرورت ہے ],الفا ورژن عوام کے لئے دستیاب کیوں بنائے گئے ہیں؟,True,False
162,314,20,5a7b96bd21c2de001afea187,سافٹ ویئر_ٹیسٹنگ,بیٹا ٹیسٹنگ الفا ٹیسٹنگ کے بعد آتی ہے اور اسے بیرونی صارف کی قبولیت کی جانچ کی ایک شکل سمجھا جاسکتا ہے۔ سافٹ ویئر کے ورژن ، جسے بیٹا ورژن کے نام سے جانا جاتا ہے ، کو پروگرامنگ ٹیم کے باہر محدود سامعین کے لئے جاری کیا جاتا ہے جسے بیٹا ٹیسٹرز کے نام سے جانا جاتا ہے۔ سافٹ ویئر لوگوں کے گروپوں کے لئے جاری کیا جاتا ہے تاکہ مزید جانچ سے یہ یقینی بنایا جاسکے کہ مصنوع میں کم غلطیاں یا کیڑے ہیں۔ بیٹا ورژن کو مستقبل کے صارفین کی زیادہ سے زیادہ تعداد میں فیڈ بیک فیلڈ کو بڑھانے اور پہلے ، طویل یا یہاں تک کہ غیر معینہ مدت کے لئے (••مستقل بیٹا••) کے لئے کھلی عوام کے لئے دستیاب کیا جاسکتا ہے۔ [ حوالہ کی ضرورت ہے ],عوامی ٹیسٹ کے لئے اصطلاح کیا ہے جو ایک مخصوص وقت کے لئے جاری ہے؟,True,False
163,314,21,5729429a6aef051400154c18,سافٹ ویئر_ٹیسٹنگ,••تخریبی ٹیسٹنگ•• سافٹ ویئر یا ایک ذیلی نظام کو ناکام بنانے کی کوشش کرتا ہے۔ یہ تصدیق کرتا ہے کہ سافٹ ویئر درست طریقے سے کام کرتا ہے یہاں تک کہ جب اسے غلط یا غیر متوقع ان پٹ موصول ہوتا ہے ، اس طرح ان پٹ کی توثیق اور غلطی کے انتظام کے معمولات کی مضبوطی قائم ہوتی ہے۔ سافٹ ویئر کی خرابی انجکشن ، فوزنگ کی شکل میں ، خرابی کی جانچ کی ایک مثال ہے۔ مختلف تجارتی غیر فنکشنل ٹیسٹنگ ٹولز کو سافٹ ویئر کی خرابی انجکشن صفحے سے منسلک کیا گیا ہے۔ بہت سے اوپن سورس اور مفت سافٹ ویئر ٹولز بھی دستیاب ہیں جو تباہ کن جانچ کرتے ہیں۔,کسی نظام کو ناکام بنانے کے لئے کس طریقہ کار کا استعمال کیا جاتا ہے؟,False,False
164,314,21,5729429a6aef051400154c19,سافٹ ویئر_ٹیسٹنگ,تباہ کن ٹیسٹنگ سافٹ ویئر یا ایک ذیلی نظام کو ناکام بنانے کی کوشش کرتی ہے۔ یہ تصدیق کرتا ہے کہ ••سافٹ ویئر درست طریقے سے کام کرتا ہے یہاں تک کہ جب اسے غلط یا غیر متوقع ان پٹ ملتے ہیں•• ، اس طرح ان پٹ کی توثیق اور غلطی کے انتظام کے معمولات کی مضبوطی قائم ہوتی ہے۔ سافٹ ویئر کی خرابی انجیکشن ، فوزنگ کی شکل میں ، خرابی کی جانچ کی ایک مثال ہے۔ مختلف تجارتی غیر فنکشنل ٹیسٹنگ ٹولز سافٹ ویئر کی خرابی انجیکشن صفحے سے منسلک ہیں۔ بہت سے اوپن سورس اور مفت سافٹ ویئر ٹولز بھی دستیاب ہیں جو تباہ کن ٹیسٹنگ انجام دیتے ہیں۔,تباہ کن ٹیسٹ کیا تصدیق کرتا ہے؟,False,False
165,314,21,5729429a6aef051400154c1a,سافٹ ویئر_ٹیسٹنگ,تباہ کن ٹیسٹنگ سافٹ ویئر یا ذیلی نظام کو ناکام بنانے کی کوشش کرتی ہے۔ یہ تصدیق کرتا ہے کہ سافٹ ویئر درست طریقے سے کام کرتا ہے یہاں تک کہ جب اسے غلط یا غیر متوقع ان پٹ موصول ہوتا ہے ، اس طرح ان پٹ کی توثیق اور غلطی کے انتظام کے معمولات کی مضبوطی قائم ہوتی ہے۔ ••سافٹ ویئر فالٹ انجیکشن•• ، فوزنگ کی شکل میں ، ناکامی کی جانچ کی ایک مثال ہے۔ مختلف تجارتی غیر فنکشنل ٹیسٹنگ ٹولز کو سافٹ ویئر فالٹ انجیکشن پیج سے لنک کیا گیا ہے۔ بہت سے اوپن سورس اور مفت سافٹ ویئر ٹولز بھی دستیاب ہیں جو تباہ کن ٹیسٹنگ انجام دیتے ہیں۔,ناکامی کی جانچ کی ایک مثال کیا ہے؟,False,False
166,314,21,5a7b97a121c2de001afea18c,سافٹ ویئر_ٹیسٹنگ,"تباہ کن ٹیسٹنگ ""سافٹ ویئر یا ذیلی نظام کو ناکام بنانے کی کوشش کرتا ہے۔ یہ تصدیق کرتا ہے کہ سافٹ ویئر درست طریقے سے کام کرتا ہے یہاں تک کہ جب اسے غلط یا غیر متوقع ان پٹ موصول ہوتا ہے ، اس طرح ان پٹ کی توثیق اور غلطی کے انتظام کے معمولات کی مضبوطی قائم ہوتی ہے۔ سافٹ ویئر کی خرابی انجکشن ، فوزنگ کی شکل میں ، خرابی کی جانچ کی ایک مثال ہے۔ مختلف تجارتی غیر فنکشنل ٹیسٹنگ ٹولز کو سافٹ ویئر کی خرابی انجکشن صفحے سے لنک کیا گیا ہے۔ بہت سے اوپن سورس اور مفت سافٹ ویئر ٹولز بھی دستیاب ہیں جو تباہ کن ٹیسٹنگ انجام دیتے ہیں۔",تباہی کا ٹیسٹ کیا کرتا ہے؟,True,True
167,314,21,5a7b97a121c2de001afea18d,سافٹ ویئر_ٹیسٹنگ,تباہ کن ٹیسٹنگ سافٹ ویئر یا ایک ذیلی نظام کو ناکام بنانے کی کوشش کرتی ہے۔ یہ تصدیق کرتا ہے کہ ••سافٹ ویئر درست طریقے سے کام کرتا ہے یہاں تک کہ جب اسے غلط یا غیر متوقع ان پٹ ملتے ہیں ،•• اس طرح ان پٹ کی توثیق اور غلطی کے انتظام کے معمولات کی مضبوطی قائم ہوتی ہے۔ سافٹ ویئر کی خرابی انجیکشن ، فوزنگ کی شکل میں ، خرابی کی جانچ کی ایک مثال ہے۔ مختلف تجارتی غیر فنکشنل ٹیسٹنگ ٹولز سافٹ ویئر کی خرابی انجیکشن صفحے سے منسلک ہیں۔ بہت سے اوپن سورس اور مفت سافٹ ویئر ٹولز بھی دستیاب ہیں جو تباہ کن ٹیسٹنگ انجام دیتے ہیں۔,تباہی کا ٹیسٹ کیا تصدیق کرتا ہے؟,True,False
168,314,21,5a7b97a121c2de001afea18e,سافٹ ویئر_ٹیسٹنگ,تباہ کن ٹیسٹنگ سافٹ ویئر یا ایک ذیلی نظام کو ناکام بنانے کی کوشش کرتی ہے۔ یہ تصدیق کرتا ہے کہ سافٹ ویئر درست طریقے سے کام کرتا ہے یہاں تک کہ جب اسے غلط یا غیر متوقع ان پٹ موصول ہوتا ہے ، اس طرح ان پٹ کی توثیق اور غلطی کے انتظام کے معمولات کی مضبوطی قائم ہوتی ہے۔ سافٹ ویئر فالٹ انجکشن ، ••فوزنگ•• کی شکل میں ، فالٹ ٹیسٹنگ کی ایک مثال ہے۔ مختلف تجارتی غیر فنکشنل ٹیسٹنگ ٹولز سافٹ ویئر فالٹ انجکشن پیج سے منسلک ہیں۔ بہت سے اوپن سورس اور مفت سافٹ ویئر ٹولز بھی دستیاب ہیں جو تباہ کن ٹیسٹنگ انجام دیتے ہیں۔,سافٹ ویئر کی خرابی انجکشن کی ایک مثال کیا ہے؟,True,False
169,314,21,5a7b97a121c2de001afea18f,سافٹ ویئر_ٹیسٹنگ,تباہ کن ٹیسٹنگ سافٹ ویئر یا ایک ذیلی نظام کو ناکام بنانے کی کوشش کرتی ہے۔ یہ اس بات کی تصدیق کرتی ہے کہ سافٹ ویئر درست طریقے سے کام کرتا ہے یہاں تک کہ جب اسے غلط یا غیر متوقع ان پٹ ملتے ہیں ، اس طرح ان پٹ کی توثیق اور غلطی کے انتظام کے معمولات کی مضبوطی قائم ہوتی ہے۔ سافٹ ویئر کی خرابی انجکشن ، فوزنگ کی شکل میں ، خرابی کی جانچ کی ایک مثال ہے۔ مختلف تجارتی غیر فنکشنل ٹیسٹنگ ٹولز کو سافٹ ویئر کی خرابی انجکشن صفحے سے منسلک کیا گیا ہے۔ بہت سے اوپن سورس اور مفت سافٹ ویئر ٹولز بھی دستیاب ہیں جو ••تباہ کن ٹیسٹنگ انجام دیتے ہیں۔••,بہت کم اوپن سورس اور مفت ٹولز ہیں جو کیا کرتے ہیں؟,True,False
170,314,22,57294dae6aef051400154c7e,سافٹ ویئر_ٹیسٹنگ,••لوڈ ٹیسٹنگ•• بنیادی طور پر اس بات کی جانچ سے متعلق ہے کہ سسٹم ایک مخصوص بوجھ کے تحت کام کرنا جاری رکھ سکتا ہے ، چاہے وہ بڑی مقدار میں ڈیٹا یا صارفین کی بڑی تعداد ہو۔ اسے عام طور پر سافٹ ویئر اسکیل ایبلٹی کہا جاتا ہے۔ جب غیر فنکشنل سرگرمی کے طور پر انجام دی جاتی ہے تو اس سے متعلقہ بوجھ ٹیسٹنگ کی سرگرمی کو اکثر برداشت ٹیسٹنگ کہا جاتا ہے۔ حجم ٹیسٹنگ سافٹ ویئر کے افعال کی جانچ کرنے کا ایک طریقہ ہے یہاں تک کہ جب کچھ اجزاء (مثال کے طور پر ایک فائل یا ڈیٹا بیس) سائز میں بنیادی طور پر بڑھ جاتے ہیں۔ سٹریس ٹیسٹنگ غیر متوقع یا نایاب کام کے بوجھ کے تحت وشوسنییتا کی جانچ کرنے کا ایک طریقہ ہے۔ استحکام ٹیسٹنگ (جس کو اکثر بوجھ یا برداشت ٹیسٹنگ کہا جاتا ہے) یہ دیکھنے کے لئے چیک کرتا ہے کہ آیا سافٹ ویئر مستقل طور پر قابل قبول مدت میں یا اس سے زیادہ کام کرسکتا ہے۔,ایک مخصوص بوجھ کے تحت سافٹ ویئر کی جانچ کرنے کے لئے کون سا طریقہ استعمال کیا جاتا ہے؟,False,False
171,314,22,57294dae6aef051400154c7f,سافٹ ویئر_ٹیسٹنگ,لوڈ ٹیسٹنگ بنیادی طور پر اس بات کی جانچ سے متعلق ہے کہ سسٹم ایک مخصوص بوجھ کے تحت کام کرنا جاری رکھ سکتا ہے ، چاہے وہ بڑی مقدار میں ••ڈیٹا یا صارفین کی بڑی تعداد•• ہو۔ اسے عام طور پر سافٹ ویئر اسکیل ایبلٹی کہا جاتا ہے۔ جب غیر فنکشنل سرگرمی کے طور پر انجام دی جاتی ہے تو اس سے متعلقہ لوڈ ٹیسٹنگ کی سرگرمی کو اکثر برداشت ٹیسٹنگ کہا جاتا ہے۔ حجم ٹیسٹنگ سافٹ ویئر کے افعال کی جانچ کرنے کا ایک طریقہ ہے یہاں تک کہ جب کچھ اجزاء (مثال کے طور پر ایک فائل یا ڈیٹا بیس) سائز میں بنیادی طور پر بڑھ جاتے ہیں۔ تناؤ ٹیسٹنگ غیر متوقع یا نایاب کام کے بوجھ کے تحت وشوسنییتا کی جانچ کرنے کا ایک طریقہ ہے۔ استحکام ٹیسٹنگ (اکثر بوجھ یا برداشت ٹیسٹنگ کے طور پر کہا جاتا ہے) یہ دیکھنے کے لئے چیک کرتا ہے کہ آیا سافٹ ویئر مسلسل قابل قبول مدت میں یا اس سے زیادہ کام کرسکتا ہے۔,لوڈ ٹیسٹنگ کا استعمال کرتے وقت کون سے دو طریقوں کا استعمال کیا جا سکتا ہے؟,False,False
172,314,22,57294dae6aef051400154c80,سافٹ ویئر_ٹیسٹنگ,لوڈ ٹیسٹنگ بنیادی طور پر اس بات کی جانچ سے متعلق ہے کہ سسٹم کسی مخصوص بوجھ کے تحت کام جاری رکھ سکتا ہے ، چاہے وہ بڑی مقدار میں ڈیٹا یا صارفین کی بڑی تعداد ہو۔ اسے عام طور پر سافٹ ویئر اسکیل ایبلٹی کہا جاتا ہے۔ جب غیر فنکشنل سرگرمی کے طور پر انجام دی جاتی ہے تو اس سے متعلقہ لوڈ ٹیسٹنگ کی سرگرمی کو اکثر برداشت ٹیسٹنگ کہا جاتا ہے۔ ••مقدار ٹیسٹنگ•• سافٹ ویئر کے افعال کی جانچ کرنے کا ایک طریقہ ہے یہاں تک کہ جب کچھ اجزاء (مثال کے طور پر ایک فائل یا ڈیٹا بیس) سائز میں بنیادی طور پر بڑھ جاتے ہیں۔ تناؤ ٹیسٹنگ غیر متوقع یا نایاب کام کے بوجھ کے تحت وشوسنییتا کی جانچ کرنے کا ایک طریقہ ہے۔ استحکام ٹیسٹنگ (جس کو اکثر بوجھ یا برداشت ٹیسٹنگ کہا جاتا ہے) یہ دیکھنے کے لئے چیک کرتا ہے کہ آیا سافٹ ویئر مستقل طور پر قابل قبول مدت میں یا اس سے زیادہ کام کرسکتا ہے۔,سافٹ ویئر کے افعال کی جانچ کرنے کے لئے کیا کہا جاتا ہے جب کچھ اجزاء کی طرف سے اضافہ ہوتا ہے؟,False,False
173,314,22,57294dae6aef051400154c81,سافٹ ویئر_ٹیسٹنگ,لوڈ ٹیسٹنگ بنیادی طور پر اس بات کی جانچ سے متعلق ہے کہ سسٹم ایک مخصوص بوجھ کے تحت کام کرنا جاری رکھ سکتا ہے ، چاہے وہ بڑی مقدار میں ڈیٹا یا صارفین کی بڑی تعداد ہو۔ اسے عام طور پر سافٹ ویئر اسکیل ایبلٹی کہا جاتا ہے۔ جب غیر فنکشنل سرگرمی کے طور پر انجام دی جاتی ہے تو اس سے متعلقہ لوڈ ٹیسٹنگ کی سرگرمی کو اکثر برداشت ٹیسٹنگ کہا جاتا ہے۔ حجم ٹیسٹنگ سافٹ ویئر کے افعال کی جانچ کرنے کا ایک طریقہ ہے یہاں تک کہ جب کچھ اجزاء (مثال کے طور پر ایک فائل یا ڈیٹا بیس) سائز میں بنیادی طور پر بڑھ جاتے ہیں۔ تناؤ ٹیسٹنگ غیر متوقع یا نایاب کام کے بوجھ کے تحت وشوسنییتا کی جانچ کرنے کا ایک طریقہ ہے۔ استحکام ٹیسٹنگ (جس کو اکثر بوجھ یا ••برداشت ٹیسٹنگ•• کہا جاتا ہے) یہ دیکھنے کے لئے چیک کرتا ہے کہ آیا سافٹ ویئر مستقل طور پر قابل قبول مدت میں یا اس سے زیادہ کام کرسکتا ہے۔,مستحکم ٹیسٹنگ کو کیا بھی کہا جاتا ہے؟,False,False
174,314,22,57294dae6aef051400154c82,سافٹ ویئر_ٹیسٹنگ,لوڈ ٹیسٹنگ بنیادی طور پر اس بات کی جانچ سے متعلق ہے کہ سسٹم ایک مخصوص بوجھ کے تحت کام کرنا جاری رکھ سکتا ہے ، چاہے وہ بڑی مقدار میں ڈیٹا یا صارفین کی بڑی تعداد ہو۔ اسے عام طور پر سافٹ ویئر اسکیل ایبلٹی کہا جاتا ہے۔ جب غیر فنکشنل سرگرمی کے طور پر انجام دی جاتی ہے تو اس سے متعلقہ لوڈ ٹیسٹنگ کی سرگرمی کو اکثر برداشت ٹیسٹنگ کہا جاتا ہے۔ حجم ٹیسٹنگ سافٹ ویئر کے افعال کی جانچ کرنے کا ایک طریقہ ہے یہاں تک کہ جب کچھ اجزاء (مثال کے طور پر ایک فائل یا ڈیٹا بیس) سائز میں بنیادی طور پر بڑھ جاتے ہیں۔ ••سٹریس ٹیسٹنگ•• غیر متوقع یا نایاب ورک بوجھ کے تحت وشوسنییتا کی جانچ کرنے کا ایک طریقہ ہے۔ استحکام ٹیسٹنگ (جس کو اکثر بوجھ یا برداشت ٹیسٹنگ کے طور پر کہا جاتا ہے) یہ دیکھنے کے لئے چیک کرتا ہے کہ آیا سافٹ ویئر مستقل طور پر قابل قبول مدت میں یا اس سے زیادہ کام کرسکتا ہے۔,غیر متوقع کام کے بوجھ کے تحت اجزاء کی جانچ کرنے کے لئے کون سا طریقہ استعمال کیا جاتا ہے؟,False,False
175,314,22,5a7b98f621c2de001afea194,سافٹ ویئر_ٹیسٹنگ,••لوڈ ٹیسٹنگ•• بنیادی طور پر اس بات کی جانچ سے متعلق ہے کہ سسٹم ایک مخصوص بوجھ کے تحت کام کرنا جاری رکھ سکتا ہے ، چاہے وہ بڑی مقدار میں ڈیٹا یا صارفین کی بڑی تعداد ہو۔ اسے عام طور پر سافٹ ویئر اسکیل ایبلٹی کہا جاتا ہے۔ جب غیر فنکشنل سرگرمی کے طور پر انجام دی جاتی ہے تو اس سے متعلقہ بوجھ ٹیسٹنگ کی سرگرمی کو اکثر برداشت ٹیسٹنگ کہا جاتا ہے۔ حجم ٹیسٹنگ سافٹ ویئر کے افعال کی جانچ کرنے کا ایک طریقہ ہے یہاں تک کہ جب کچھ اجزاء (مثال کے طور پر ایک فائل یا ڈیٹا بیس) سائز میں بنیادی طور پر بڑھ جاتے ہیں۔ سٹریس ٹیسٹنگ غیر متوقع یا نایاب کام کے بوجھ کے تحت وشوسنییتا کی جانچ کرنے کا ایک طریقہ ہے۔ استحکام ٹیسٹنگ (جس کو اکثر بوجھ یا برداشت ٹیسٹنگ کہا جاتا ہے) یہ دیکھنے کے لئے چیک کرتا ہے کہ آیا سافٹ ویئر مستقل طور پر قابل قبول مدت میں یا اس سے زیادہ کام کرسکتا ہے۔,ایک مخصوص بوجھ کے تحت فرم ویئر کی جانچ کرنے کے لئے کیا طریقہ استعمال کیا جاتا ہے؟,True,False
176,314,22,5a7b98f621c2de001afea195,سافٹ ویئر_ٹیسٹنگ,لوڈ ٹیسٹنگ بنیادی طور پر اس بات کی جانچ سے متعلق ہے کہ سسٹم ایک مخصوص بوجھ کے تحت کام کرنا جاری رکھ سکتا ہے ، چاہے وہ بڑی مقدار میں ••ڈیٹا یا صارفین کی بڑی تعداد•• ہو۔ اسے عام طور پر سافٹ ویئر اسکیل ایبلٹی کہا جاتا ہے۔ جب غیر فنکشنل سرگرمی کے طور پر انجام دی جاتی ہے تو اس سے متعلقہ لوڈ ٹیسٹنگ کی سرگرمی کو اکثر برداشت ٹیسٹنگ کہا جاتا ہے۔ حجم ٹیسٹنگ سافٹ ویئر کے افعال کی جانچ کرنے کا ایک طریقہ ہے یہاں تک کہ جب کچھ اجزاء (مثال کے طور پر ایک فائل یا ڈیٹا بیس) سائز میں بنیادی طور پر بڑھ جاتے ہیں۔ تناؤ ٹیسٹنگ غیر متوقع یا نایاب کام کے بوجھ کے تحت وشوسنییتا کی جانچ کرنے کا ایک طریقہ ہے۔ استحکام ٹیسٹنگ (اکثر بوجھ یا برداشت ٹیسٹنگ کے طور پر کہا جاتا ہے) یہ دیکھنے کے لئے چیک کرتا ہے کہ آیا سافٹ ویئر مسلسل قابل قبول مدت میں یا اس سے زیادہ کام کرسکتا ہے۔,لوڈ ٹیسٹنگ کا استعمال کرتے وقت کون سے دو طریقوں کا استعمال نہیں کیا جا سکتا؟,True,False
177,314,22,5a7b98f621c2de001afea196,سافٹ ویئر_ٹیسٹنگ,"لوڈ ٹیسٹنگ بنیادی طور پر اس بات کی جانچ سے متعلق ہے کہ سسٹم کسی مخصوص بوجھ کے تحت کام جاری رکھ سکتا ہے ، چاہے وہ بڑی مقدار میں ڈیٹا یا صارفین کی بڑی تعداد ہو۔ اسے عام طور پر سافٹ ویئر اسکیل ایبلٹی کہا جاتا ہے۔ جب غیر فنکشنل سرگرمی کے طور پر انجام دی جاتی ہے تو اس سے متعلقہ لوڈ ٹیسٹنگ کی سرگرمی کو اکثر برداشت ٹیسٹنگ کہا جاتا ہے۔ حجم ٹیسٹنگ سافٹ ویئر کے افعال کو جانچنے کا ایک طریقہ ہے یہاں تک کہ ""جب کچھ اجزاء (مثال کے طور پر ایک فائل یا ڈیٹا بیس) سائز میں بنیادی طور پر بڑھ جاتے ہیں۔ تناؤ ٹیسٹنگ غیر متوقع یا نایاب کام کے بوجھ کے تحت قابل اعتماد کو جانچنے کا ایک طریقہ ہے۔ استحکام ٹیسٹنگ (جس کو اکثر بوجھ یا برداشت ٹیسٹنگ کے طور پر کہا جاتا ہے) یہ دیکھنے کے لئے چیک کرتا ہے کہ آیا سافٹ ویئر مستقل طور پر قابل قبول مدت میں یا اس سے زیادہ کام کرسکتا ہے۔",حجم ٹیسٹنگ فرم ویئر کی جانچ کرنے کا ایک طریقہ ہے جب؟,True,True
178,314,22,5a7b98f621c2de001afea197,سافٹ ویئر_ٹیسٹنگ,لوڈ ٹیسٹنگ بنیادی طور پر اس بات کی جانچ سے متعلق ہے کہ سسٹم ایک مخصوص بوجھ کے تحت کام کرنا جاری رکھ سکتا ہے ، چاہے وہ بڑی مقدار میں ڈیٹا یا صارفین کی بڑی تعداد ہو۔ اسے عام طور پر سافٹ ویئر اسکیل ایبلٹی کہا جاتا ہے۔ جب غیر فنکشنل سرگرمی کے طور پر انجام دی جاتی ہے تو اس سے متعلقہ لوڈ ٹیسٹنگ کی سرگرمی کو اکثر برداشت ٹیسٹنگ کہا جاتا ہے۔ حجم ٹیسٹنگ سافٹ ویئر کے افعال کی جانچ کرنے کا ایک طریقہ ہے یہاں تک کہ جب کچھ اجزاء (مثال کے طور پر ایک فائل یا ڈیٹا بیس) سائز میں بنیادی طور پر بڑھ جاتے ہیں۔ ••سٹریس ٹیسٹنگ•• غیر متوقع یا نایاب ورک بوجھ کے تحت وشوسنییتا کی جانچ کرنے کا ایک طریقہ ہے۔ استحکام ٹیسٹنگ (جس کو اکثر بوجھ یا برداشت ٹیسٹنگ کے طور پر کہا جاتا ہے) یہ دیکھنے کے لئے چیک کرتا ہے کہ آیا سافٹ ویئر مستقل طور پر قابل قبول مدت میں یا اس سے زیادہ کام کرسکتا ہے۔,متوقع یا نایاب کام کے بوجھ کے تحت وشوسنییتا کی جانچ پڑتال کیا کہا جاتا ہے؟,True,False
179,314,23,57294ea7af94a219006aa27f,سافٹ ویئر_ٹیسٹنگ,••ڈویلپمنٹ ٹیسٹنگ•• ایک سافٹ ویئر ڈویلپمنٹ عمل ہے جس میں سافٹ ویئر ڈویلپمنٹ کے خطرات ، وقت اور اخراجات کو کم کرنے کے لئے نقائص کی روک تھام اور پتہ لگانے کی حکمت عملی کے وسیع سپیکٹرم کا ہم آہنگ اطلاق شامل ہے۔ یہ سافٹ ویئر ڈویلپر یا انجینئر کے ذریعہ سافٹ ویئر ڈویلپمنٹ لائف سائیکل کے تعمیراتی مرحلے کے دوران انجام دیا جاتا ہے۔ روایتی کیو اے فوکس کی جگہ لینے کے بجائے ، اس میں اضافہ کرتا ہے۔ ڈویلپمنٹ ٹیسٹنگ کا مقصد کوڈ کو کیو اے کو فروغ دینے سے پہلے تعمیراتی غلطیوں کو ختم کرنا ہے۔ اس حکمت عملی کا مقصد نتیجے میں سافٹ ویئر کے معیار کے ساتھ ساتھ مجموعی ترقی اور کیو اے عمل کی کارکردگی کو بڑھانا ہے۔,کون سا طریقہ استعمال کیا جاتا ہے جس میں ایک درخواست کی ہم وقت سازی شامل ہے؟,False,False
180,314,23,57294ea7af94a219006aa280,سافٹ ویئر_ٹیسٹنگ,ڈویلپمنٹ ٹیسٹنگ ایک سافٹ ویئر ڈویلپمنٹ کا عمل ہے جس میں سافٹ ویئر ڈویلپمنٹ کے خطرات ، وقت اور اخراجات کو کم کرنے کے لئے نقائص کی روک تھام اور پتہ لگانے کی حکمت عملی کے ایک وسیع سپیکٹرم کا ہم آہنگ اطلاق شامل ہے۔ یہ سافٹ ویئر ڈویلپر یا انجینئر کے ذریعہ ••سافٹ ویئر ڈویلپمنٹ لائف سائیکل کے تعمیراتی مرحلے•• کے دوران کیا جاتا ہے۔ روایتی کیو اے فوکس کی جگہ لینے کے بجائے ، اس میں اضافہ کرتا ہے۔ ڈویلپمنٹ ٹیسٹنگ کا مقصد کوڈ کو کیو اے کو فروغ دینے سے پہلے تعمیراتی غلطیوں کو ختم کرنا ہے۔ اس حکمت عملی کا مقصد نتیجے میں سافٹ ویئر کے معیار کے ساتھ ساتھ مجموعی ترقی اور کیو اے عمل کی کارکردگی کو بڑھانا ہے۔,ترقیاتی ٹیسٹنگ کب استعمال کی جاتی ہے؟,False,False
181,314,23,57294ea7af94a219006aa281,سافٹ ویئر_ٹیسٹنگ,ڈویلپمنٹ ٹیسٹنگ ایک سافٹ ویئر ڈویلپمنٹ کا عمل ہے جس میں سافٹ ویئر ڈویلپمنٹ کے خطرات ، وقت اور اخراجات کو کم کرنے کے لئے نقائص کی روک تھام اور پتہ لگانے کی حکمت عملی کے وسیع سپیکٹرم کا ہم آہنگ اطلاق شامل ہے۔ یہ سافٹ ویئر ڈویلپر یا انجینئر کے ذریعہ سافٹ ویئر ڈویلپمنٹ لائف سائیکل کے تعمیراتی مرحلے کے دوران کیا جاتا ہے۔ روایتی کیو اے فوکس کی جگہ لینے کے بجائے ، اس میں اضافہ کرتا ہے۔ ڈویلپمنٹ ٹیسٹنگ کا مقصد کوڈ کو کیو اے میں ترقی دینے سے پہلے ••تعمیراتی غلطیاں•• کو ختم کرنا ہے۔ اس حکمت عملی کا مقصد نتیجے میں سافٹ ویئر کے معیار کے ساتھ ساتھ مجموعی ترقی اور کیو اے عمل کی کارکردگی کو بڑھانا ہے۔,ڈویلپمنٹ ٹیسٹنگ کیا ختم کرنے کی کوشش کرتی ہے؟,False,False
182,314,23,5a7b9a8521c2de001afea1a6,سافٹ ویئر_ٹیسٹنگ,••ڈویلپمنٹ ٹیسٹنگ•• ایک سافٹ ویئر ڈویلپمنٹ عمل ہے جس میں سافٹ ویئر ڈویلپمنٹ کے خطرات ، وقت اور اخراجات کو کم کرنے کے لئے نقائص کی روک تھام اور پتہ لگانے کی حکمت عملی کے وسیع سپیکٹرم کا ہم آہنگ اطلاق شامل ہے۔ یہ سافٹ ویئر ڈویلپر یا انجینئر کے ذریعہ سافٹ ویئر ڈویلپمنٹ لائف سائیکل کے تعمیراتی مرحلے کے دوران انجام دیا جاتا ہے۔ روایتی کیو اے فوکس کی جگہ لینے کے بجائے ، اس میں اضافہ کرتا ہے۔ ڈویلپمنٹ ٹیسٹنگ کا مقصد کوڈ کو کیو اے کو فروغ دینے سے پہلے تعمیراتی غلطیوں کو ختم کرنا ہے۔ اس حکمت عملی کا مقصد نتیجے میں سافٹ ویئر کے معیار کے ساتھ ساتھ مجموعی ترقی اور کیو اے عمل کی کارکردگی کو بڑھانا ہے۔,کس طریقہ کار کا استعمال کیا جاتا ہے جس میں ایک درخواست کی مطابقت پذیری شامل ہے؟,True,False
183,314,23,5a7b9a8521c2de001afea1a7,سافٹ ویئر_ٹیسٹنگ,ڈویلپمنٹ ٹیسٹنگ ایک سافٹ ویئر ڈویلپمنٹ کا عمل ہے جس میں سافٹ ویئر ڈویلپمنٹ کے خطرات ، وقت اور اخراجات کو کم کرنے کے لئے نقائص کی روک تھام اور پتہ لگانے کی حکمت عملی کے ایک وسیع سپیکٹرم کا ہم آہنگ اطلاق شامل ہے۔ یہ سافٹ ویئر ڈویلپر یا انجینئر کے ذریعہ ••سافٹ ویئر ڈویلپمنٹ لائف سائیکل کے تعمیراتی مرحلے•• کے دوران کیا جاتا ہے۔ روایتی کیو اے فوکس کی جگہ لینے کے بجائے ، اس میں اضافہ کرتا ہے۔ ڈویلپمنٹ ٹیسٹنگ کا مقصد کوڈ کو کیو اے کو فروغ دینے سے پہلے تعمیراتی غلطیوں کو ختم کرنا ہے۔ اس حکمت عملی کا مقصد نتیجے میں سافٹ ویئر کے معیار کے ساتھ ساتھ مجموعی ترقی اور کیو اے عمل کی کارکردگی کو بڑھانا ہے۔,ترقیاتی ٹیسٹ کب استعمال نہیں کیا جاتا ہے؟,True,False
184,314,23,5a7b9a8521c2de001afea1a8,سافٹ ویئر_ٹیسٹنگ,ڈویلپمنٹ ٹیسٹنگ ایک سافٹ ویئر ڈویلپمنٹ کا عمل ہے جس میں سافٹ ویئر ڈویلپمنٹ کے خطرات ، وقت اور اخراجات کو کم کرنے کے لئے خرابی کی روک تھام اور پتہ لگانے کی حکمت عملی کے وسیع سپیکٹرم کا ہم آہنگ اطلاق شامل ہے۔ یہ سافٹ ویئر ڈویلپر یا انجینئر کے ذریعہ سافٹ ویئر ڈویلپمنٹ لائف سائیکل کے تعمیراتی مرحلے کے دوران کیا جاتا ہے۔ روایتی کیو اے فوکس کی جگہ لینے کے بجائے ، اس میں اضافہ کرتا ہے۔ ڈویلپمنٹ ٹیسٹنگ کا مقصد کوڈ کو ••کیو اے•• میں ترقی دینے سے پہلے تعمیراتی غلطیوں کو ختم کرنا ہے۔ اس حکمت عملی کا مقصد نتیجہ خیز سافٹ ویئر کے معیار کے ساتھ ساتھ ساتھ مجموعی ترقی اور کیو اے عمل کی کارکردگی کو بڑھانا ہے۔,کوڈ کو فروغ دینے سے پہلے ہدایات کی غلطیوں کو ختم کرنے کے لئے ترقی کی جانچ کی کوششیں کہاں؟,True,False
185,314,23,5a7b9a8521c2de001afea1a9,سافٹ ویئر_ٹیسٹنگ,ڈویلپمنٹ ٹیسٹنگ ایک سافٹ ویئر ڈویلپمنٹ کا عمل ہے جس میں سافٹ ویئر ڈویلپمنٹ کے خطرات ، وقت اور اخراجات کو کم کرنے کے لئے نقائص کی روک تھام اور پتہ لگانے کی حکمت عملی کے وسیع سپیکٹرم کا ہم آہنگ اطلاق شامل ہے۔ یہ سافٹ ویئر ڈویلپر یا انجینئر کے ذریعہ سافٹ ویئر ڈویلپمنٹ لائف سائیکل کے تعمیراتی مرحلے کے دوران انجام دیا جاتا ہے۔ روایتی کیو اے فوکس کی جگہ لینے کے بجائے ، اس میں اضافہ کرتا ہے۔ ڈویلپمنٹ ٹیسٹنگ کا مقصد کوڈ کو کیو اے کو فروغ دینے سے پہلے تعمیراتی غلطیوں کو ختم کرنا ہے۔ اس حکمت عملی کا مقصد نتیجے میں سافٹ ویئر کے معیار کے ساتھ ساتھ مجموعی ترقی اور کیو اے عمل کی کارکردگی کو بڑھانا ہے۔,ڈویلپمنٹ ٹیسٹنگ کس نے ڈیزائن کی ہے؟,True,True
186,314,24,57295082af94a219006aa295,سافٹ ویئر_ٹیسٹنگ,اس کے برعکس ، کچھ ابھرتی ہوئی سافٹ ویئر مضامین جیسے ••انتہائی پروگرامنگ اور ایجیل سافٹ ویئر ڈویلپمنٹ•• تحریک ، ٹیسٹ سے چلنے والے سافٹ ویئر ڈویلپمنٹ ماڈل پر عمل پیرا ہیں۔ اس عمل میں ، یونٹ ٹیسٹ پہلے سافٹ ویئر انجینئرز کے ذریعہ لکھے جاتے ہیں (اکثر انتہائی پروگرامنگ طریقہ کار میں جوڑی پروگرامنگ کے ساتھ) ۔ یقینا these یہ ٹیسٹ ابتدائی طور پر ناکام ہوجاتے ہیں۔ پھر جب کوڈ لکھا جاتا ہے تو یہ ٹیسٹ سویٹس کے بتدریج بڑے حصوں سے گزرتا ہے۔ ٹیسٹ سویٹس کو مسلسل اپ ڈیٹ کیا جاتا ہے کیونکہ نئی ناکامی کی شرائط اور کونے کے معاملات دریافت ہوتے ہیں ، اور وہ کسی بھی رجعت ٹیسٹ کے ساتھ مربوط ہوتے ہیں۔ یونٹ ٹیسٹ کو باقی سافٹ ویئر سورس کوڈ کے ساتھ برقرار رکھا جاتا ہے اور عام طور پر تعمیراتی عمل میں ضم کیا جاتا ہے (جس میں جزوی طور پر دستی تعمیر قبولیت کے عمل میں منتقل کیا جاتا ہے۔) اس ٹیسٹ عمل کا حتمی مقصد مسلسل سافٹ ویئر انضمام کو حاصل کرنا ہے جہاں اکثر عوام کو اپ ڈیٹ شائع کیا جاسکتا ہے۔,"کون سی دو موجودہ تحریکیں ""ٹیسٹ ڈرائیو سافٹ ویئر ڈویلپمنٹ"" پر عمل پیرا ہیں؟",False,False
187,314,24,57295082af94a219006aa296,سافٹ ویئر_ٹیسٹنگ,اس کے برعکس ، کچھ ابھرتی ہوئی سافٹ ویئر مضامین جیسے انتہائی پروگرامنگ اور ایجیل سافٹ ویئر ڈویلپمنٹ موومنٹ ، ٹیسٹ سے چلنے والے سافٹ ویئر ڈویلپمنٹ ماڈل پر عمل پیرا ہیں۔ اس عمل میں ، سافٹ ویئر انجینئرز کے ذریعہ ••یونٹ ٹیسٹ پہلے لکھے جاتے ہیں•• (اکثر انتہائی پروگرامنگ طریقہ کار میں جوڑی پروگرامنگ کے ساتھ) ۔ یقینا these یہ ٹیسٹ ابتدائی طور پر ناکام ہوجاتے ہیں۔ پھر جب کوڈ لکھا جاتا ہے تو یہ ٹیسٹ سویٹس کے بتدریج بڑے حصوں سے گزرتا ہے۔ ٹیسٹ سویٹس کو مسلسل اپ ڈیٹ کیا جاتا ہے کیونکہ نئی ناکامی کی شرائط اور کونے کے معاملات دریافت ہوتے ہیں ، اور وہ کسی بھی رجعت ٹیسٹ کے ساتھ مربوط ہوتے ہیں۔ یونٹ ٹیسٹ کو باقی سافٹ ویئر سورس کوڈ کے ساتھ برقرار رکھا جاتا ہے اور عام طور پر تعمیراتی عمل میں شامل کیا جاتا ہے (جس میں جزوی طور پر دستی تعمیر قبولیت کے عمل میں منتقل کیا جاتا ہے۔ اس ٹیسٹ عمل کا حتمی مقصد مسلسل انضمام ہے جہاں سافٹ ویئر اپ ڈیٹس کو اکثر عوام کے لئے شائع کیا جاسکتا ہے۔,چست سافٹ ویئر کی ترقی اور انتہائی پروگرامنگ کے تحت سب سے پہلے کیا لکھا جاتا ہے؟,False,False
188,314,24,57295082af94a219006aa297,سافٹ ویئر_ٹیسٹنگ,"اس کے برعکس ، کچھ ابھرتی ہوئی سافٹ ویئر مضامین جیسے انتہائی پروگرامنگ اور ایجیل سافٹ ویئر ڈویلپمنٹ موومنٹ ، ٹیسٹ سے چلنے والے سافٹ ویئر ڈویلپمنٹ ماڈل پر عمل پیرا ہیں۔ اس عمل میں ، یونٹ ٹیسٹ سب سے پہلے سافٹ ویئر انجینئرز کے ذریعہ لکھے جاتے ہیں (اکثر انتہائی پروگرامنگ طریقہ کار میں جوڑی پروگرامنگ کے ساتھ) ۔ یقینا these یہ ٹیسٹ ابتدائی طور پر ناکام ہوجاتے ہیں۔ پھر جب کوڈ لکھا جاتا ہے تو یہ ٹیسٹ سویٹس کے بتدریج بڑے حصوں سے گزرتا ہے۔ ٹیسٹ سویٹس کو مسلسل اپ ڈیٹ کیا جاتا ہے کیونکہ نئی ناکامی کے حالات اور کونے کے معاملات دریافت ہوتے ہیں ، اور وہ کسی بھی رجعت ٹیسٹ کے ساتھ مربوط ہوتے ہیں۔ یونٹ ٹیسٹ باقی سافٹ ویئر سورس کوڈ کے ساتھ برقرار رکھے جاتے ہیں اور عام طور پر تعمیراتی عمل میں ضم ہوجاتے ہیں (جس میں جزوی طور پر انٹرایکٹو ٹیسٹ کو جزوی طور پر دستی تعمیر قبولیت کے عمل میں منتقل کردیا جاتا ہے۔) اس ٹیسٹ عمل کا حتمی مقصد ""مسلسل سافٹ ویئر انضمام کو حاصل کرنا ہے جہاں اکثر عوام کو شائع کیا جاسکتا ہے۔",یونٹ ٹیسٹنگ کا مقصد کیا ہے؟,False,True
189,314,24,5a7b9b6521c2de001afea1ae,سافٹ ویئر_ٹیسٹنگ,اس کے برعکس ، کچھ ابھرتی ہوئی سافٹ ویئر مضامین جیسے ••انتہائی پروگرامنگ اور ایجیل سافٹ ویئر ڈویلپمنٹ•• تحریک ، ٹیسٹ سے چلنے والے سافٹ ویئر ڈویلپمنٹ ماڈل پر عمل پیرا ہیں۔ اس عمل میں ، یونٹ ٹیسٹ پہلے سافٹ ویئر انجینئرز کے ذریعہ لکھے جاتے ہیں (اکثر انتہائی پروگرامنگ طریقہ کار میں جوڑی پروگرامنگ کے ساتھ) ۔ یقینا these یہ ٹیسٹ ابتدائی طور پر ناکام ہوجاتے ہیں۔ پھر جب کوڈ لکھا جاتا ہے تو یہ ٹیسٹ سویٹس کے بتدریج بڑے حصوں سے گزرتا ہے۔ ٹیسٹ سویٹس کو مسلسل اپ ڈیٹ کیا جاتا ہے کیونکہ نئی ناکامی کی شرائط اور کونے کے معاملات دریافت ہوتے ہیں ، اور وہ کسی بھی رجعت ٹیسٹ کے ساتھ مربوط ہوتے ہیں۔ یونٹ ٹیسٹ کو باقی سافٹ ویئر سورس کوڈ کے ساتھ برقرار رکھا جاتا ہے اور عام طور پر تعمیراتی عمل میں ضم کیا جاتا ہے (جس میں جزوی طور پر دستی تعمیر قبولیت کے عمل میں منتقل کیا جاتا ہے۔) اس ٹیسٹ عمل کا حتمی مقصد مسلسل سافٹ ویئر انضمام کو حاصل کرنا ہے جہاں اکثر عوام کو اپ ڈیٹ شائع کیا جاسکتا ہے۔,"کون سی دو پرانی تحریکیں ""ٹیسٹ ڈرائیو سافٹ ویئر ڈویلپمنٹ"" کی پاسداری کرتی ہیں؟",True,False
190,314,24,5a7b9b6521c2de001afea1af,سافٹ ویئر_ٹیسٹنگ,اس کے برعکس ، کچھ ابھرتی ہوئی سافٹ ویئر مضامین جیسے انتہائی پروگرامنگ اور ایجیل سافٹ ویئر ڈویلپمنٹ موومنٹ ، ٹیسٹ سے چلنے والے سافٹ ویئر ڈویلپمنٹ ماڈل پر عمل پیرا ہیں۔ اس عمل میں ، سافٹ ویئر انجینئرز کے ذریعہ ••یونٹ ٹیسٹ پہلے لکھے جاتے ہیں•• (اکثر انتہائی پروگرامنگ طریقہ کار میں جوڑی پروگرامنگ کے ساتھ) ۔ یقینا these یہ ٹیسٹ ابتدائی طور پر ناکام ہوجاتے ہیں۔ پھر جب کوڈ لکھا جاتا ہے تو یہ ٹیسٹ سویٹس کے بتدریج بڑے حصوں سے گزرتا ہے۔ ٹیسٹ سویٹس کو مسلسل اپ ڈیٹ کیا جاتا ہے کیونکہ نئی ناکامی کی شرائط اور کونے کے معاملات دریافت ہوتے ہیں ، اور وہ کسی بھی رجعت ٹیسٹ کے ساتھ مربوط ہوتے ہیں۔ یونٹ ٹیسٹ کو باقی سافٹ ویئر سورس کوڈ کے ساتھ برقرار رکھا جاتا ہے اور عام طور پر تعمیراتی عمل میں شامل کیا جاتا ہے (جس میں جزوی طور پر دستی تعمیر قبولیت کے عمل میں منتقل کیا جاتا ہے۔ اس ٹیسٹ عمل کا حتمی مقصد مسلسل انضمام ہے جہاں سافٹ ویئر اپ ڈیٹس کو اکثر عوام کے لئے شائع کیا جاسکتا ہے۔,نازک سافٹ ویئر کی ترقی اور انتہائی پروگرامنگ کے تحت سب سے پہلے کیا لکھا جاتا ہے؟,True,False
191,314,24,5a7b9b6521c2de001afea1b0,سافٹ ویئر_ٹیسٹنگ,اس کے برعکس ، کچھ ابھرتی ہوئی سافٹ ویئر مضامین جیسے انتہائی پروگرامنگ اور ایجیل سافٹ ویئر ڈویلپمنٹ موومنٹ ، ٹیسٹ سے چلنے والے سافٹ ویئر ڈویلپمنٹ ماڈل پر عمل پیرا ہیں۔ اس عمل میں ، یونٹ ٹیسٹ سب سے پہلے سافٹ ویئر انجینئرز کے ذریعہ لکھے جاتے ہیں (اکثر انتہائی پروگرامنگ طریقہ کار میں جوڑی پروگرامنگ کے ساتھ) ۔ یقینا these یہ ٹیسٹ ابتدائی طور پر ناکام ہوجاتے ہیں۔ پھر جب کوڈ لکھا جاتا ہے تو یہ ٹیسٹ سویٹس کے بتدریج بڑے حصوں سے گزرتا ہے۔ ٹیسٹ سویٹس کو مسلسل اپ ڈیٹ کیا جاتا ہے کیونکہ نئی ناکامی کے حالات اور کونے کے معاملات دریافت ہوتے ہیں ، اور وہ کسی بھی رجعت ٹیسٹ کے ساتھ مربوط ہوتے ہیں۔ یونٹ ٹیسٹ باقی سافٹ ویئر سورس کوڈ کے ساتھ برقرار رکھے جاتے ہیں اور عام طور پر بلڈ عمل میں شامل ہوتے ہیں (جس میں جزوی طور پر انٹرایکٹو ٹیسٹ کو جزوی طور پر دستی بلڈ قبولیت کے عمل میں منتقل کردیا جاتا ہے۔ اس ٹیسٹ عمل کا حتمی مقصد مسلسل انضمام حاصل کرنا ہے جہاں سافٹ ویئر اپ ڈیٹ کو اکثر ••عوام کو شائع•• کیا جاسکتا ہے۔,یونٹ ٹیسٹنگ کا مقصد وقفے وقفے سے انضمام حاصل کرنا ہے جہاں سافٹ ویئر اپ ڈیٹس کیا ہو سکتے ہیں؟,True,False
192,314,25,5729525c6aef051400154cdc,سافٹ ویئر_ٹیسٹنگ,نیچے سے اوپر ٹیسٹنگ مربوط ٹیسٹنگ کے لئے ایک نقطہ نظر ہے جہاں سب سے کم سطح کے اجزاء (••ماڈیولز ، طریقہ کار ، اور افعال••) کو پہلے ٹیسٹ کیا جاتا ہے ، پھر مربوط کیا جاتا ہے اور اعلی سطح کے اجزاء کی جانچ کو آسان بنانے کے لئے استعمال کیا جاتا ہے۔ کم سطح کے مربوط ماڈیولز کی انضمام ٹیسٹنگ کے بعد ، ماڈیولز کی اگلی سطح تشکیل دی جائے گی اور انضمام ٹیسٹنگ کے لئے استعمال کی جاسکتی ہے۔ یہ عمل اس وقت تک دہرایا جاتا ہے جب تک کہ درجہ بندی کے اوپری حصے کی جانچ نہ کی جائے۔ یہ نقطہ نظر صرف اس وقت مددگار ہوتا ہے جب ایک ہی ترقیاتی سطح کے تمام یا زیادہ تر ماڈیولز تیار ہوں۔ یہ طریقہ سافٹ ویئر تیار کردہ سطحوں کا تعین کرنے میں بھی مدد کرتا ہے اور فیصد کی شکل میں جانچ کی پیشرفت کی اطلاع دینا آسان بناتا ہے۔ [ حوالہ کی ضرورت ہے ],کون سے تین اجزاء نیچے سے اوپر کی جانچ کو تشکیل دیتے ہیں؟,False,False
193,314,25,5729525c6aef051400154cdd,سافٹ ویئر_ٹیسٹنگ,نیچے سے اوپر ٹیسٹنگ مربوط ٹیسٹنگ کے لئے ایک نقطہ نظر ہے جہاں سب سے کم سطح کے اجزاء (ماڈیولز ، طریقہ کار اور افعال) کو پہلے ٹیسٹ کیا جاتا ہے ، پھر مربوط کیا جاتا ہے اور ••اعلی سطح کے اجزاء کی جانچ•• کی سہولت کے لئے استعمال کیا جاتا ہے۔ کم سطح کے مربوط ماڈیولز کی انضمام ٹیسٹنگ کے بعد ، ماڈیولز کی اگلی سطح تشکیل دی جائے گی اور انضمام ٹیسٹنگ کے لئے استعمال کی جاسکتی ہے۔ اس عمل کو اس وقت تک دہرایا جاتا ہے جب تک کہ درجہ بندی کے اوپری حصے کی جانچ نہ کی جائے۔ یہ نقطہ نظر صرف اس وقت مددگار ہوتا ہے جب ایک ہی ترقیاتی سطح کے تمام یا زیادہ تر ماڈیولز تیار ہوں۔ یہ طریقہ سافٹ ویئر تیار کرنے کی سطح کا تعین کرنے میں بھی مدد کرتا ہے اور فیصد کی شکل میں جانچ کی پیشرفت کی اطلاع دینا آسان بناتا ہے۔ [ حوالہ کی ضرورت ہے ],نیچے سے اوپر کی جانچ کس چیز کی جانچ کو آسان بنانے میں مدد کرتی ہے؟,False,False
194,314,25,5729525c6aef051400154cde,سافٹ ویئر_ٹیسٹنگ,نیچے سے اوپر ٹیسٹنگ مربوط ٹیسٹنگ کا ایک نقطہ نظر ہے جہاں سب سے کم سطح کے اجزاء (ماڈیولز ، طریقہ کار اور افعال) کو پہلے ٹیسٹ کیا جاتا ہے ، پھر مربوط کیا جاتا ہے اور اعلی سطح کے اجزاء کی جانچ کو آسان بنانے کے لئے استعمال کیا جاتا ہے۔ کم سطح کے مربوط ماڈیولز کی انضمام ٹیسٹنگ کے بعد ، ماڈیولز کی اگلی سطح تشکیل دی جائے گی اور انضمام ٹیسٹنگ کے لئے استعمال کی جاسکتی ہے۔ اس عمل کو اس وقت تک دہرایا جاتا ہے جب تک کہ درجہ بندی کے اوپری حصے کی جانچ نہ کی جائے۔ یہ نقطہ نظر صرف اس وقت مددگار ہوتا ہے جب ایک ہی ترقیاتی سطح کے تمام یا زیادہ تر ماڈیولز تیار ہوں۔ یہ طریقہ سافٹ ویئر تیار کردہ سطحوں کا تعین کرنے میں بھی مدد کرتا ہے اور ••فیصد کی شکل میں جانچ کی پیشرفت کی اطلاع دینا آسان بناتا ہے۔ ••,ایک بار جب اس عمل کو تمام سطحوں پر بار بار دہرایا گیا ہے تو نیچے سے اوپر کی جانچ سے کیا مدد ملتی ہے؟,False,False
195,314,25,5a7b9cdb21c2de001afea1be,سافٹ ویئر_ٹیسٹنگ,••بٹم اپ ٹیسٹنگ•• مربوط ٹیسٹنگ کا ایک نقطہ نظر ہے جہاں سب سے کم سطح کے اجزاء (ماڈیولز ، طریقہ کار اور افعال) کو پہلے ٹیسٹ کیا جاتا ہے ، پھر مربوط کیا جاتا ہے اور اعلی سطح کے اجزاء کی جانچ کو آسان بنانے کے لئے استعمال کیا جاتا ہے۔ کم سطح کے مربوط ماڈیولز کی انضمام ٹیسٹنگ کے بعد ، ماڈیولز کی اگلی سطح تشکیل دی جائے گی اور انضمام ٹیسٹنگ کے لئے استعمال کی جاسکتی ہے۔ اس عمل کو اس وقت تک دہرایا جاتا ہے جب تک کہ درجہ بندی کے اوپری حصے کی جانچ نہ کی جائے۔ یہ نقطہ نظر صرف اس وقت مددگار ہوتا ہے جب ایک ہی ترقیاتی سطح کے تمام یا زیادہ تر ماڈیولز تیار ہوں۔ یہ طریقہ سافٹ ویئر تیار کرنے کی سطح کا تعین کرنے میں بھی مدد کرتا ہے اور فیصد کی شکل میں جانچ کی پیشرفت کی اطلاع دینا آسان بناتا ہے۔ [ حوالہ درکار ],جب سب سے زیادہ سطح کے اجزاء سب سے پہلے ٹیسٹ کیا جاتا ہے، جانچ کے عمل کو کیا کہا جاتا ہے؟,True,False
196,314,25,5a7b9cdb21c2de001afea1bf,سافٹ ویئر_ٹیسٹنگ,نیچے سے اوپر ٹیسٹنگ مربوط ٹیسٹنگ کے لئے ایک نقطہ نظر ہے جہاں سب سے کم سطح کے اجزاء (••ماڈیولز ، طریقہ کار ، اور افعال••) کو پہلے ٹیسٹ کیا جاتا ہے ، پھر مربوط کیا جاتا ہے اور اعلی سطح کے اجزاء کی جانچ کو آسان بنانے کے لئے استعمال کیا جاتا ہے۔ کم سطح کے مربوط ماڈیولز کی انضمام ٹیسٹنگ کے بعد ، ماڈیولز کی اگلی سطح تشکیل دی جائے گی اور انضمام ٹیسٹنگ کے لئے استعمال کی جاسکتی ہے۔ یہ عمل اس وقت تک دہرایا جاتا ہے جب تک کہ درجہ بندی کے اوپری حصے کی جانچ نہ کی جائے۔ یہ نقطہ نظر صرف اس وقت مددگار ہوتا ہے جب ایک ہی ترقیاتی سطح کے تمام یا زیادہ تر ماڈیولز تیار ہوں۔ یہ طریقہ سافٹ ویئر تیار کردہ سطحوں کا تعین کرنے میں بھی مدد کرتا ہے اور فیصد کی شکل میں جانچ کی پیشرفت کی اطلاع دینا آسان بناتا ہے۔ [ حوالہ کی ضرورت ہے ],کون سے تین اجزاء نیچے سے نیچے ٹیسٹنگ بناتے ہیں؟,True,False
197,314,25,5a7b9cdb21c2de001afea1c0,سافٹ ویئر_ٹیسٹنگ,نیچے سے اوپر ٹیسٹنگ مربوط ٹیسٹنگ کا ایک نقطہ نظر ہے جہاں سب سے کم سطح کے اجزاء (ماڈیولز ، طریقہ کار اور افعال) کو پہلے ٹیسٹ کیا جاتا ہے ، پھر مربوط کیا جاتا ہے اور اعلی سطح کے اجزاء کی جانچ کو آسان بنانے کے لئے استعمال کیا جاتا ہے۔ کم سطح کے مربوط ماڈیولز کی انضمام ٹیسٹنگ کے بعد ، ماڈیولز کی اگلی سطح تشکیل دی جائے گی اور انضمام ٹیسٹنگ کے لئے استعمال کی جاسکتی ہے۔ یہ عمل اس وقت تک دہرایا جاتا ہے جب تک کہ درجہ بندی کے اوپری حصے کی جانچ نہ کی جائے۔ یہ نقطہ نظر صرف اس وقت مددگار ہوتا ہے جب ایک ہی ••ترقیاتی سطح•• کے تمام یا زیادہ تر ماڈیولز تیار ہوں۔ یہ طریقہ سافٹ ویئر تیار کردہ سطح کا تعین کرنے میں بھی مدد کرتا ہے اور فیصد کی شکل میں جانچ کی پیشرفت کی اطلاع دینا آسان بناتا ہے۔ [ حوالہ کی ضرورت ہے ],یہ نقطہ نظر صرف کام کرتا ہے جب ایک ہی کے ماڈیولز کی نصف کیا تیار ہیں؟,True,False
198,314,25,5a7b9cdb21c2de001afea1c1,سافٹ ویئر_ٹیسٹنگ,نیچے سے اوپر ٹیسٹنگ مربوط ٹیسٹنگ کا ایک نقطہ نظر ہے جہاں سب سے کم سطح کے اجزاء (ماڈیولز ، طریقہ کار اور افعال) کو پہلے ٹیسٹ کیا جاتا ہے ، پھر مربوط کیا جاتا ہے اور اعلی سطح کے اجزاء کی جانچ کو آسان بنانے کے لئے استعمال کیا جاتا ہے۔ کم سطح کے مربوط ماڈیولز کی انضمام ٹیسٹنگ کے بعد ، ماڈیولز کی اگلی سطح تشکیل دی جائے گی اور انضمام ٹیسٹنگ کے لئے استعمال کی جاسکتی ہے۔ اس عمل کو اس وقت تک دہرایا جاتا ہے جب تک کہ درجہ بندی کے اوپری حصے کی جانچ نہ کی جائے۔ یہ نقطہ نظر صرف اس وقت مددگار ہوتا ہے جب ایک ہی ترقیاتی سطح کے تمام یا زیادہ تر ماڈیولز تیار ہوں۔ یہ طریقہ سافٹ ویئر تیار کردہ سطحوں کا تعین کرنے میں بھی مدد کرتا ہے اور ••فیصد کی شکل میں جانچ کی پیشرفت کی اطلاع دینا•• آسان بناتا ہے۔ [ حوالہ درکار ],نیچے سے اوپر ٹیسٹنگ سافٹ ویئر تیار کی سطح کا تعین کرنے میں مدد ملتی ہے اور یہ کیا مکمل کرنے کے لئے مشکل بناتا ہے؟,True,False
199,314,26,572954a83f37b31900478261,سافٹ ویئر_ٹیسٹنگ,یہ ثابت کیا گیا ہے کہ ہر کلاس کو اگلے میں سختی سے شامل کیا گیا ہے۔ مثال کے طور پر ، جب ہم یہ فرض کرتے ہیں کہ ٹیسٹ کے تحت عملدرآمد کے رویے کو ان پٹ اور آؤٹ پٹ کے کچھ معروف محدود سیٹوں کے لئے ایک متعین محدود ریاست مشین کے ذریعہ اشارہ کیا جاسکتا ہے اور کچھ معلوم تعداد میں ریاستوں کے ساتھ کلاس I (اور تمام بعد کی کلاسوں) سے تعلق رکھتا ہے۔ تاہم ، اگر ریاستوں کی تعداد معلوم نہیں ہے تو ، پھر یہ صرف ••کلاس II•• سے تمام کلاسوں سے تعلق رکھتا ہے۔ اگر ٹیسٹ کے تحت عملدرآمد ایک واحد ٹریس (اور اس کے تسلسل) کے لئے وضاحت میں ناکام ہونے والی ایک متعین محدود ریاست مشین ہونی چاہئے ، اور اس کی ریاستوں کی تعداد نامعلوم ہے ، تو یہ صرف کلاس III سے تعلق رکھتا ہے۔ ٹیسٹنگ ٹائم مشینیں جہاں منتقلی کو متحرک کیا جاتا ہے اگر کچھ حقیقی محدود وقفے کے اندر اندر ان پٹ تیار کیے جاتے ہیں تو صرف کلاس IV سے کلاسوں سے تعلق رکھتا ہے ، جبکہ بہت سے غیر متعین نظاموں کی جانچ صرف کلاس V سے تعلق رکھتا ہے (لیکن تمام نہیں ، اور کچھ کلاس I سے بھی تعلق رکھتے ہیں۔) کلاس I میں شامل کرنے کے لئے فرض کردہ حساب کتاب کے ماڈل کی سادگی کی ضرورت نہیں ہے ، کیونکہ کسی بھی پروگرامنگ زبان میں لکھے گئے نفاذ کو شامل کرنے والے کچھ ٹیسٹنگ کیسز ، اور مسلسل طول و عرض پر منحصر مشینوں کے طور پر بیان کردہ ٹیسٹنگ نفاذ ، کلاس I میں ثابت ہوئے ہیں۔ دوسرے تفصیلی معاملات ، جیسے لازمی معنویت کے تحت میتھیو ہینسی کے ذریعہ ٹیسٹنگ فریم ورک ، اور عقلی ٹائم آؤٹ کے ساتھ ٹائم مشینیں ، کلاس II سے تعلق رکھتے ہیں۔,اگر ریاستوں کی تعداد نامعلوم ہے، تو یہ کس گروپ میں آتا ہے؟,False,False
200,314,26,572954a83f37b31900478262,سافٹ ویئر_ٹیسٹنگ,یہ ثابت کیا گیا ہے کہ ••ہر کلاس اگلے میں سختی سے شامل ہے••۔ مثال کے طور پر ، جب ہم یہ فرض کرتے ہیں کہ ٹیسٹ کے تحت عملدرآمد کے رویے کو ان پٹ اور آؤٹ پٹ کے کچھ معروف محدود سیٹوں کے لئے ایک تعیناتی محدود ریاست مشین کے ذریعہ اشارہ کیا جاسکتا ہے اور کچھ معلوم تعداد میں ریاستوں کے ساتھ کلاس I (اور تمام بعد کی کلاسوں) سے تعلق رکھتا ہے۔ تاہم ، اگر حالتوں کی تعداد معلوم نہیں ہے ، تو پھر یہ صرف کلاس II سے تمام کلاسوں سے تعلق رکھتا ہے۔ اگر ٹیسٹ کے تحت عملدرآمد ایک واحد ٹریس (اور اس کے تسلسل) کے لئے وضاحت میں ناکام ہونے والی ایک تعیناتی محدود ریاست مشین ہونی چاہئے ، اور اس کی حالتوں کی تعداد نامعلوم ہے ، تو یہ صرف کلاس III سے تعلق رکھتا ہے۔ ٹیسٹنگ ٹائم مشینیں جہاں منتقلی کو متحرک کیا جاتا ہے اگر کچھ حقیقی محدود وقفے کے اندر اندر ان پٹ تیار کیے جاتے ہیں تو صرف کلاس IV سے کلاسوں سے تعلق رکھتا ہے ، جبکہ بہت سے غیر متعین نظاموں کی جانچ صرف کلاس V سے تعلق رکھتا ہے (لیکن تمام نہیں ، اور کچھ کلاس I سے بھی تعلق رکھتے ہیں۔) کلاس I میں شامل کرنے کے لئے فرض کردہ حساب کتاب کے ماڈل کی سادگی کی ضرورت نہیں ہے ، کیونکہ کسی بھی پروگرامنگ زبان میں لکھے گئے نفاذ کو شامل کرنے والے کچھ ٹیسٹنگ کیسز ، اور مسلسل طول و عرض پر منحصر مشینوں کے طور پر بیان کردہ ٹیسٹنگ نفاذ ، کلاس I میں ثابت ہوئے ہیں۔ دوسرے تفصیلی معاملات ، جیسے لازمی معنویت کے تحت میتھیو ہینسی کے ذریعہ ٹیسٹنگ فریم ورک ، اور عقلی ٹائم آؤٹ کے ساتھ ٹائم مشینیں ، کلاس II سے تعلق رکھتے ہیں۔,تین کلاسیں ہیں، تمام کلاسوں کے لئے کیا نتیجہ اخذ کیا گیا ہے اور ثابت کیا گیا ہے؟,False,False
201,314,26,572954a83f37b31900478263,سافٹ ویئر_ٹیسٹنگ,یہ ثابت کیا گیا ہے کہ ہر کلاس کو اگلے میں سختی سے شامل کیا گیا ہے۔ مثال کے طور پر ، جب ہم یہ فرض کرتے ہیں کہ ٹیسٹ کے تحت عملدرآمد کے رویے کو ان پٹ اور آؤٹ پٹ کے کچھ معروف محدود سیٹوں کے لئے ایک متعین محدود ریاست مشین کے ذریعہ اشارہ کیا جاسکتا ہے اور کچھ معلوم تعداد میں ریاستوں کے ساتھ کلاس I (اور تمام بعد کی کلاسوں) سے تعلق رکھتا ہے۔ تاہم ، اگر ریاستوں کی تعداد معلوم نہیں ہے تو ، پھر یہ صرف کلاس II سے تمام کلاسوں سے تعلق رکھتا ہے۔ اگر ٹیسٹ کے تحت عملدرآمد ایک واحد ٹریس (اور اس کے تسلسل) کے لئے وضاحت میں ناکام ہونے والی ایک متعین محدود ریاست مشین ہونی چاہئے ، اور اس کی ریاستوں کی تعداد نامعلوم ہے تو ، تو یہ صرف ••کلاس III•• سے تعلق رکھتا ہے۔ ٹیسٹنگ ٹائم مشینیں جہاں منتقلی کو متحرک کیا جاتا ہے اگر کچھ حقیقی محدود وقفے کے اندر اندر ان پٹ تیار کیے جاتے ہیں تو صرف کلاس IV سے کلاسوں سے تعلق رکھتا ہے ، جبکہ بہت سے غیر متعین نظاموں کی جانچ صرف کلاس V سے تعلق رکھتا ہے (لیکن تمام نہیں ، اور کچھ کلاس I سے بھی تعلق رکھتے ہیں۔) کلاس I میں شامل کرنے کے لئے فرض کردہ حساب کتاب کے ماڈل کی سادگی کی ضرورت نہیں ہے ، کیونکہ کسی بھی پروگرامنگ زبان میں لکھے گئے نفاذ کو شامل کرنے والے کچھ ٹیسٹنگ کیسز ، اور مسلسل طول و عرض پر منحصر مشینوں کے طور پر بیان کردہ ٹیسٹنگ نفاذ ، کلاس I میں ثابت ہوئے ہیں۔ دوسرے تفصیلی معاملات ، جیسے لازمی معنویت کے تحت میتھیو ہینسی کے ذریعہ ٹیسٹنگ فریم ورک ، اور عقلی ٹائم آؤٹ کے ساتھ ٹائم مشینیں ، کلاس II سے تعلق رکھتے ہیں۔,اگر ریاستوں کی تعداد نامعلوم ہے اور مشین کی محدود حالت ایک واحد ٹریس کے لئے ناکام ہو رہی ہے، تو یہ کس گروپ میں آتا ہے؟,False,False
202,314,26,5a7b9e5821c2de001afea1ce,سافٹ ویئر_ٹیسٹنگ,یہ ثابت کیا گیا ہے کہ ہر کلاس کو سختی سے ••اگلے•• میں شامل کیا گیا ہے۔ مثال کے طور پر ، جب ہم یہ فرض کرتے ہیں کہ ٹیسٹ کے تحت عمل درآمد کے رویے کو ان پٹ اور آؤٹ پٹ کے کچھ معروف محدود سیٹ کے لئے ایک تعیناتی محدود ریاست مشین کے ذریعہ اشارہ کیا جاسکتا ہے اور کچھ معلوم تعداد میں ریاستوں کے ساتھ کلاس I (اور تمام بعد کی کلاسوں) سے تعلق رکھتا ہے۔ تاہم ، اگر حالتوں کی تعداد معلوم نہیں ہے تو ، پھر یہ صرف کلاس II سے تمام کلاسوں سے تعلق رکھتا ہے۔ اگر ٹیسٹ کے تحت عمل درآمد ایک واحد ٹریس (اور اس کے تسلسل) کے لئے وضاحت میں ناکام ہونے والی ایک تعیناتی محدود ریاست مشین ہونی چاہئے ، اور اس کی حالتوں کی تعداد نامعلوم ہے ، تو یہ صرف کلاس III سے تعلق رکھتا ہے۔ ٹیسٹنگ ٹائم مشینیں جہاں منتقلی کو متحرک کیا جاتا ہے اگر کچھ حقیقی محدود وقفے کے اندر اندر ان پٹ تیار کیے جاتے ہیں تو صرف کلاس IV سے کلاسوں سے تعلق رکھتا ہے ، جبکہ بہت سے غیر متعین نظاموں کی جانچ صرف کلاس V سے تعلق رکھتا ہے (لیکن تمام نہیں ، اور کچھ کلاس I سے بھی تعلق رکھتے ہیں۔) کلاس I میں شامل کرنے کے لئے فرض کردہ حساب کتاب کے ماڈل کی سادگی کی ضرورت نہیں ہے ، کیونکہ کسی بھی پروگرامنگ زبان میں لکھے گئے نفاذ کو شامل کرنے والے کچھ ٹیسٹنگ کیسز ، اور مسلسل طول و عرض پر منحصر مشینوں کے طور پر بیان کردہ ٹیسٹنگ نفاذ ، کلاس I میں ثابت ہوئے ہیں۔ دوسرے تفصیلی معاملات ، جیسے لازمی معنویت کے تحت میتھیو ہینسی کے ذریعہ ٹیسٹنگ فریم ورک ، اور عقلی ٹائم آؤٹ کے ساتھ ٹائم مشینیں ، کلاس II سے تعلق رکھتے ہیں۔,یہ مسترد کیا گیا ہے کہ ہر طبقے میں کیا شامل ہے؟,True,False
203,314,26,5a7b9e5821c2de001afea1cf,سافٹ ویئر_ٹیسٹنگ,یہ ثابت کیا گیا ہے کہ ہر کلاس کو اگلے میں سختی سے شامل کیا گیا ہے۔ مثال کے طور پر ، جب ہم یہ فرض کرتے ہیں کہ ٹیسٹ کے تحت عملدرآمد کے رویے کو ان پٹ اور آؤٹ پٹ کے کچھ معروف محدود سیٹ کے لئے ایک متعین محدود ریاست مشین کے ذریعہ اشارہ کیا جاسکتا ہے اور کچھ معلوم تعداد میں ریاستوں کے ساتھ ••کلاس I•• (اور تمام بعد کی کلاسوں) سے تعلق رکھتا ہے۔ تاہم ، اگر ریاستوں کی تعداد معلوم نہیں ہے تو ، پھر یہ صرف کلاس II سے تمام کلاسوں سے تعلق رکھتا ہے۔ اگر ٹیسٹ کے تحت عملدرآمد ایک واحد ٹریس (اور اس کے تسلسل) کے لئے وضاحت میں ناکام ہونے والی ایک متعین محدود ریاست مشین ہونی چاہئے ، اور اس کی ریاستوں کی تعداد نامعلوم ہے ، تو یہ صرف کلاس III سے تعلق رکھتا ہے۔ ٹیسٹنگ ٹائم مشینیں جہاں منتقلی کو متحرک کیا جاتا ہے اگر کچھ حقیقی محدود وقفے کے اندر اندر ان پٹ تیار کیے جاتے ہیں تو صرف کلاس IV سے کلاسوں سے تعلق رکھتا ہے ، جبکہ بہت سے غیر متعین نظاموں کی جانچ صرف کلاس V سے تعلق رکھتا ہے (لیکن تمام نہیں ، اور کچھ کلاس I سے بھی تعلق رکھتے ہیں۔) کلاس I میں شامل کرنے کے لئے فرض کردہ حساب کتاب کے ماڈل کی سادگی کی ضرورت نہیں ہے ، کیونکہ کسی بھی پروگرامنگ زبان میں لکھے گئے نفاذ کو شامل کرنے والے کچھ ٹیسٹنگ کیسز ، اور مسلسل طول و عرض پر منحصر مشینوں کے طور پر بیان کردہ ٹیسٹنگ نفاذ ، کلاس I میں ثابت ہوئے ہیں۔ دوسرے تفصیلی معاملات ، جیسے لازمی معنویت کے تحت میتھیو ہینسی کے ذریعہ ٹیسٹنگ فریم ورک ، اور عقلی ٹائم آؤٹ کے ساتھ ٹائم مشینیں ، کلاس II سے تعلق رکھتے ہیں۔,اگر ان پٹ اور آؤٹ پٹ کے لامحدود سیٹ ہیں، تو ریاستیں کس کلاس سے تعلق رکھتی ہیں؟,True,False
204,314,26,5a7b9e5821c2de001afea1d0,سافٹ ویئر_ٹیسٹنگ,یہ ثابت کیا گیا ہے کہ ہر کلاس کو اگلے میں سختی سے شامل کیا گیا ہے۔ مثال کے طور پر ، جب ہم یہ فرض کرتے ہیں کہ ٹیسٹ کے تحت عملدرآمد کے رویے کو ان پٹ اور آؤٹ پٹ کے کچھ معروف محدود سیٹوں کے لئے ایک متعین محدود ریاست مشین کے ذریعہ اشارہ کیا جاسکتا ہے اور کچھ معلوم تعداد میں ریاستوں کے ساتھ کلاس I (اور تمام بعد کی کلاسوں) سے تعلق رکھتا ہے۔ تاہم ، اگر ریاستوں کی تعداد معلوم نہیں ہے تو ، پھر یہ صرف کلاس II سے تمام کلاسوں سے تعلق رکھتا ہے۔ اگر ٹیسٹ کے تحت عملدرآمد ایک واحد ٹریس (اور اس کے تسلسل) کے لئے وضاحت میں ناکام ہونے والی ایک متعین محدود ریاست مشین ہونی چاہئے ، اور اس کی ریاستوں کی تعداد نامعلوم ہے تو ، تو یہ صرف کلاس III سے تعلق رکھتا ہے۔ ٹیسٹنگ ٹائم مشینیں جہاں منتقلی کو متحرک کیا جاتا ہے اگر کچھ حقیقی محدود وقفے کے اندر اندر ان پٹ تیار کیے جاتے ہیں تو صرف کلاس IV سے کلاسوں سے تعلق رکھتا ہے ، جبکہ بہت سے غیر متعین نظاموں کی جانچ صرف کلاس V سے تعلق رکھتا ہے (لیکن تمام نہیں ، اور کچھ کلاس I سے بھی تعلق رکھتے ہیں۔) کلاس I میں شامل ہونے کی ضرورت نہیں ہے ••فرض کردہ حساب کتاب کے ماڈل کی سادگی ،•• جیسا کہ کچھ ٹیسٹنگ کیسز میں کسی بھی پروگرامنگ زبان میں لکھے گئے نفاذ شامل ہیں ، اور مسلسل طول و عرض پر منحصر مشینوں کے طور پر بیان کردہ ٹیسٹنگ نفاذ کلاس I میں ثابت ہوئے ہیں۔ دوسرے تفصیلی معاملات ، جیسے لازمی معنویت کے تحت میتھیو ہینسی کے ذریعہ ٹیسٹنگ فریم ورک ، اور عقلی ٹائم آؤٹ کے ساتھ ٹائم مشینیں ، کلاس II سے تعلق رکھتے ہیں۔,کلاس I میں شامل ہونے کے لئے کیا ضرورت ہے؟,True,False
205,314,26,5a7b9e5821c2de001afea1d1,سافٹ ویئر_ٹیسٹنگ,یہ ثابت کیا گیا ہے کہ ہر کلاس کو اگلے میں سختی سے شامل کیا گیا ہے۔ مثال کے طور پر ، جب ہم یہ فرض کرتے ہیں کہ ٹیسٹ کے تحت عملدرآمد کے رویے کو ان پٹ اور آؤٹ پٹ کے کچھ معروف محدود سیٹوں کے لئے ایک متعین محدود ریاست مشین کے ذریعہ اشارہ کیا جاسکتا ہے اور کچھ معلوم تعداد میں ریاستوں کے ساتھ کلاس I (اور تمام بعد کی کلاسوں) سے تعلق رکھتا ہے۔ تاہم ، اگر ریاستوں کی تعداد معلوم نہیں ہے تو ، پھر یہ صرف کلاس II سے تمام کلاسوں سے تعلق رکھتا ہے۔ اگر ٹیسٹ کے تحت عملدرآمد ایک واحد ٹریس (اور اس کے تسلسل) کے لئے وضاحت میں ناکام ہونے والی ایک متعین محدود ریاست مشین ہونی چاہئے ، اور اس کی ریاستوں کی تعداد نامعلوم ہے تو ، تو یہ صرف کلاس III سے تعلق رکھتا ہے۔ ٹیسٹنگ ٹائم مشینیں جہاں منتقلی کو متحرک کیا جاتا ہے اگر کچھ حقیقی محدود وقفے کے اندر اندر ان پٹ تیار کیے جاتے ہیں تو صرف کلاس IV سے کلاسوں سے تعلق رکھتا ہے ، جبکہ بہت سے غیر متعین نظاموں کی جانچ صرف کلاس V سے تعلق رکھتا ہے (لیکن تمام نہیں ، اور کچھ کلاس I سے بھی تعلق رکھتے ہیں۔) کلاس I میں شامل کرنے کے لئے فرض کردہ حساب کتاب کے ماڈل کی سادگی کی ضرورت نہیں ہے ، کیونکہ کسی بھی پروگرامنگ زبان میں لکھے گئے نفاذ کو شامل کرنے والے کچھ ٹیسٹنگ کیسز ، اور مسلسل طول و عرض پر منحصر مشینوں کے طور پر بیان کردہ ٹیسٹنگ نفاذ ، کلاس I میں ثابت ہوئے ہیں۔ دوسرے تفصیلی معاملات ، جیسے میتھیو ہینسی کے ذریعہ ••ٹیسٹنگ فریم ورک•• لازمی معنویت کے تحت ، اور عقلی ٹائم آؤٹ کے ساتھ ٹائم مشینیں ، کلاس II سے تعلق رکھتے ہیں۔,میتھیو Hennessy کیا لکھا؟,True,False
206,314,27,572955e1af94a219006aa2cd,سافٹ ویئر_ٹیسٹنگ,"سافٹ ویئر ٹیسٹرز اور کوالٹی اشورینس کے ماہرین کی پیشہ ورانہ خواہشات کی حمایت کے لئے کئی سرٹیفیکیشن پروگرام موجود ہیں۔ اب کوئی سرٹیفیکیشن پیش نہیں کیا جاتا ہے اصل میں ""درخواست دہندہ کو سافٹ ویئر کی جانچ کرنے کی صلاحیت ظاہر کرنے کی ضرورت ہوتی ہے۔ کوئی سرٹیفیکیشن وسیع پیمانے پر قبول شدہ علم کی بنیاد پر نہیں ہے۔ اس کی وجہ سے کچھ لوگوں نے اعلان کیا ہے کہ جانچ کا میدان سرٹیفیکیشن کے لئے تیار نہیں ہے۔ سرٹیفیکیشن خود کسی فرد کی پیداوری ، ان کی مہارت ، یا عملی علم کی پیمائش نہیں کرسکتا ہے ، اور ٹیسٹر کی حیثیت سے ان کی اہلیت یا پیشہ ورانہ مہارت کی ضمانت نہیں دے سکتا ہے۔",وہاں کئی سرٹیفکیٹ کے ساتھ جو حاصل کیا جا سکتا ہے، وہ سب ایک خصوصیت ہے جو وہ اشتراک کرتے ہیں؟,False,True
207,314,27,572955e1af94a219006aa2ce,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹرز اور کوالٹی اشورینس کے ماہرین کی پیشہ ورانہ خواہشات کی حمایت کے لئے کئی سرٹیفیکیشن پروگرام موجود ہیں۔ اب پیش کردہ کوئی سرٹیفیکیشن دراصل درخواست دہندہ کو سافٹ ویئر کی جانچ کرنے کی اپنی صلاحیت ظاہر کرنے کی ضرورت نہیں ہے۔ کوئی سرٹیفیکیشن وسیع پیمانے پر قبول شدہ علم کی بنیاد پر نہیں ہے۔ اس نے کچھ لوگوں کو یہ اعلان کرنے پر مجبور کیا ہے کہ ••ٹیسٹنگ فیلڈ سرٹیفیکیشن کے لئے تیار نہیں ہے۔•• سرٹیفیکیشن خود کسی فرد کی پیداوری ، ان کی مہارت ، یا عملی علم کی پیمائش نہیں کرسکتا ، اور ٹیسٹر کی حیثیت سے ان کی اہلیت ، یا پیشہ ورانہ مہارت کی ضمانت نہیں دے سکتا۔,درخواست دہندہ کے لئے یہ ظاہر کرنے میں ناکامی کیا ہے کہ وہ کتنی اچھی طرح سے ٹیسٹ کرتے ہیں؟,False,False
208,314,27,572955e1af94a219006aa2cf,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹرز اور کوالٹی اشورینس کے ماہرین کی پیشہ ورانہ خواہشات کی حمایت کے لئے کئی سرٹیفیکیشن پروگرام موجود ہیں۔ اب پیش کردہ کوئی سرٹیفیکیشن دراصل درخواست دہندہ کو سافٹ ویئر کی جانچ کرنے کی اپنی صلاحیت ظاہر کرنے کی ضرورت نہیں ہے۔ کوئی سرٹیفیکیشن وسیع پیمانے پر قبول شدہ علم کی بنیاد پر نہیں ہے۔ اس کی وجہ سے کچھ لوگوں نے اعلان کیا ہے کہ جانچ کا میدان سرٹیفیکیشن کے لئے تیار نہیں ہے۔ سرٹیفیکیشن خود کسی ••فرد کی پیداوری ، ان کی مہارت ، یا عملی علم•• کی پیمائش نہیں کرسکتا ہے ، اور ٹیسٹر کی حیثیت سے ان کی اہلیت یا پیشہ ورانہ مہارت کی ضمانت نہیں دے سکتا ہے۔,کون سی چار خصوصیات سرٹیفیکیشن کی پیمائش نہیں کر سکتے ہیں؟,False,False
209,314,27,5a7b9f0621c2de001afea1e0,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹرز اور کوالٹی اشورینس کے ماہرین کی پیشہ ورانہ خواہشات کی حمایت کے لئے متعدد ••سرٹیفیکیشن پروگرام•• موجود ہیں۔ اب پیش کردہ کوئی سرٹیفیکیشن دراصل درخواست دہندہ کو سافٹ ویئر کی جانچ کرنے کی اپنی صلاحیت ظاہر کرنے کی ضرورت نہیں ہے۔ کوئی سرٹیفیکیشن وسیع پیمانے پر قبول شدہ علم کی بنیاد پر نہیں ہے۔ اس کی وجہ سے کچھ لوگوں نے اعلان کیا ہے کہ جانچ کا میدان سرٹیفیکیشن کے لئے تیار نہیں ہے۔ سرٹیفیکیشن خود کسی فرد کی پیداوری ، ان کی مہارت ، یا عملی علم کی پیمائش نہیں کرسکتا ہے ، اور ٹیسٹر کی حیثیت سے ان کی اہلیت یا پیشہ ورانہ مہارت کی ضمانت نہیں دے سکتا ہے۔,سافٹ ویئر ٹیسٹرز کی غیر پیشہ ورانہ خواہشات کی حمایت کرنے کے لئے کیا پروگرام دستیاب ہیں؟,True,False
210,314,27,5a7b9f0621c2de001afea1e1,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹرز اور کوالٹی اشورینس کے ماہرین کی پیشہ ورانہ خواہشات کی حمایت کے لئے کئی سرٹیفیکیشن پروگرام موجود ہیں۔ ••کوئی سرٹیفیکیشن•• جو اب پیش کیا جاتا ہے اس میں اصل میں درخواست دہندہ کو سافٹ ویئر کی جانچ کرنے کی اپنی صلاحیت ظاہر کرنے کی ضرورت ہوتی ہے۔ کوئی سرٹیفیکیشن وسیع پیمانے پر قبول شدہ علم کی بنیاد پر نہیں ہے۔ اس کی وجہ سے کچھ لوگوں نے اعلان کیا ہے کہ جانچ کا میدان سرٹیفیکیشن کے لئے تیار نہیں ہے۔ سرٹیفیکیشن خود کسی فرد کی پیداوری ، ان کی مہارت ، یا عملی علم کی پیمائش نہیں کرسکتا ، اور ٹیسٹر کی حیثیت سے ان کی اہلیت یا پیشہ ورانہ مہارت کی ضمانت نہیں دے سکتا۔,کس سرٹیفکیٹ کے لئے درخواست دہندگان کو صلاحیت کا مظاہرہ کرنے کی ضرورت ہے؟,True,False
211,314,27,5a7b9f0621c2de001afea1e2,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹرز اور کوالٹی اشورینس کے ماہرین کی پیشہ ورانہ خواہشات کی حمایت کے لئے کئی سرٹیفیکیشن پروگرام موجود ہیں۔ اب پیش کردہ کوئی سرٹیفیکیشن دراصل درخواست دہندہ کو سافٹ ویئر کی جانچ کرنے کی اپنی صلاحیت ظاہر کرنے کی ضرورت نہیں ہے۔ کوئی سرٹیفیکیشن وسیع پیمانے پر قبول شدہ علم کی بنیاد پر نہیں ہے۔ اس نے کچھ لوگوں کو یہ اعلان کرنے پر مجبور کیا ہے کہ جانچ کا میدان ••سرٹیفیکیشن•• کے لئے تیار نہیں ہے۔ سرٹیفیکیشن خود کسی فرد کی پیداوری ، ان کی مہارت ، یا عملی علم کی پیمائش نہیں کرسکتا ، اور ٹیسٹر کی حیثیت سے ان کی اہلیت ، یا پیشہ ورانہ مہارت کی ضمانت نہیں دے سکتا۔,کچھ کہتے ہیں کہ ٹیسٹنگ فیلڈ کس کے لئے تیار ہے؟,True,False
212,314,27,5a7b9f0621c2de001afea1e3,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹرز اور کوالٹی اشورینس کے ماہرین کی پیشہ ورانہ خواہشات کی حمایت کے لئے کئی سرٹیفیکیشن پروگرام موجود ہیں۔ اب پیش کردہ کوئی سرٹیفیکیشن دراصل درخواست دہندہ کو سافٹ ویئر کی جانچ کرنے کی اپنی صلاحیت ظاہر کرنے کی ضرورت نہیں ہے۔ کوئی سرٹیفیکیشن وسیع پیمانے پر قبول شدہ علم کی بنیاد پر نہیں ہے۔ اس کی وجہ سے کچھ لوگوں نے اعلان کیا ہے کہ جانچ کا میدان سرٹیفیکیشن کے لئے تیار نہیں ہے۔ سرٹیفیکیشن خود کسی فرد کی •• پیداوری ، ان کی مہارت ، یا عملی علم •• کی پیمائش نہیں کرسکتا ہے ، اور ٹیسٹر کی حیثیت سے ان کی اہلیت یا پیشہ ورانہ مہارت کی ضمانت نہیں دے سکتا ہے۔,سرٹیفیکیشن کس چیز کا پیمانہ ہے؟,True,False
213,314,28,572958236aef051400154d24,سافٹ ویئر_ٹیسٹنگ,••سافٹ ویئر ٹیسٹنگ•• سافٹ ویئر کوالٹی اشورینس (ایس کیو اے) کے عمل کا ایک حصہ ہے۔: 347 ایس کیو اے میں ، سافٹ ویئر پروسیس کے ماہرین اور آڈیٹر صرف دستاویزات ، کوڈ اور سسٹم جیسے نوادرات کے بجائے سافٹ ویئر ڈویلپمنٹ کے عمل سے متعلق ہیں۔ وہ سافٹ ویئر انجینئرنگ کے عمل کو خود جانچتے اور تبدیل کرتے ہیں تاکہ ان غلطیوں کی تعداد کو کم کیا جاسکے جو فراہم کردہ سافٹ ویئر میں ختم ہوجاتی ہیں۔ نام نہاد عیب کی شرح۔ قابل قبول عیب کی شرح کیا ہے یہ سافٹ ویئر کی نوعیت پر منحصر ہے۔ فلائٹ سمیلیٹر ویڈیو گیم میں اصل ہوائی جہاز کے سافٹ ویئر کے مقابلے میں بہت زیادہ عیب برداشت ہوگی۔ اگرچہ ایس کیو اے کے ساتھ قریبی روابط ہیں ، جانچ کے محکمے اکثر آزادانہ طور پر موجود ہوتے ہیں ، اور کچھ کمپنیوں میں ایس کیو اے فنکشن نہیں ہوسکتا ہے۔ [ حوالہ کی ضرورت ہے ],SQA کا حصہ کیا بناتا ہے؟,False,False
214,314,28,572958236aef051400154d25,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹنگ سافٹ ویئر کوالٹی اشورینس (ایس کیو اے) کے عمل کا ایک حصہ ہے۔: 347 ایس کیو اے میں ، سافٹ ویئر پروسیس کے ماہرین اور آڈیٹر صرف دستاویزات ، کوڈ اور سسٹم جیسے نوادرات کے بجائے ••سافٹ ویئر ڈویلپمنٹ عمل•• سے متعلق ہیں۔ وہ سافٹ ویئر انجینئرنگ کے عمل کو خود جانچتے اور تبدیل کرتے ہیں تاکہ ان غلطیوں کی تعداد کو کم کیا جاسکے جو فراہم کردہ سافٹ ویئر میں ختم ہوجاتی ہیں۔ نام نہاد عیب کی شرح۔ قابل قبول عیب کی شرح کیا ہے یہ سافٹ ویئر کی نوعیت پر منحصر ہے۔ فلائٹ سمیلیٹر ویڈیو گیم میں اصل ہوائی جہاز کے سافٹ ویئر کے مقابلے میں بہت زیادہ عیب برداشت ہوگی۔ اگرچہ ایس کیو اے کے ساتھ قریبی روابط ہیں ، جانچ کے محکمے اکثر آزادانہ طور پر موجود ہوتے ہیں ، اور کچھ کمپنیوں میں ایس کیو اے فنکشن نہیں ہوسکتا ہے۔ [ حوالہ کی ضرورت ہے ],سافٹ ویئر کے ماہر اور آڈیٹرز کے لئے بنیادی تشویش کیا ہے؟,False,False
215,314,28,572958236aef051400154d26,سافٹ ویئر_ٹیسٹنگ,سافٹ ویئر ٹیسٹنگ سافٹ ویئر کوالٹی اشورینس (ایس کیو اے) کے عمل کا ایک حصہ ہے۔: 347 ایس کیو اے میں ، سافٹ ویئر پروسیسنگ کے ماہرین اور آڈیٹر صرف دستاویزات ، کوڈ اور سسٹم جیسے نوادرات کے بجائے سافٹ ویئر ڈویلپمنٹ کے عمل سے متعلق ہیں۔ وہ سافٹ ویئر انجینئرنگ کے عمل کو خود جانچتے اور تبدیل کرتے ہیں تاکہ ان غلطیوں کی تعداد کو کم کیا جاسکے جو فراہم کردہ سافٹ ویئر میں ختم ہوجاتی ہیں۔ نام نہاد عیب کی شرح۔ قابل قبول عیب کی شرح کیا ہے یہ سافٹ ویئر کی نوعیت پر منحصر ہے۔ ایک فلائٹ سمیلیٹر ••ویڈیو گیم•• میں اصل ہوائی جہاز کے سافٹ ویئر کے مقابلے میں بہت زیادہ عیب برداشت ہوگی۔ اگرچہ ایس کیو اے کے ساتھ قریبی روابط ہیں ، جانچ کے محکمے اکثر آزادانہ طور پر موجود ہوتے ہیں ، اور کچھ کمپنیوں میں ایس کیو اے فنکشن نہیں ہوسکتا ہے۔ [ حوالہ کی ضرورت ہے ],کس قسم کے سافٹ ویئر میں بہتر خرابی رواداری ہوگی؟,False,False
